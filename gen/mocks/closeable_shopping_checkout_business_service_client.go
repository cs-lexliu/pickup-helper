// Code generated by mockery v2.32.4. DO NOT EDIT.

package mocks

import (
	context "context"

	grpc "google.golang.org/grpc"

	mock "github.com/stretchr/testify/mock"

	shoppingcheckoutpb "github.com/cs-lexliu/pickup-helper/gen/pb/shopping-checkout"
)

// CloseableShoppingCheckoutBusinessServiceClient is an autogenerated mock type for the CloseableShoppingCheckoutBusinessServiceClient type
type CloseableShoppingCheckoutBusinessServiceClient struct {
	mock.Mock
}

// Close provides a mock function with given fields:
func (_m *CloseableShoppingCheckoutBusinessServiceClient) Close() {
	_m.Called()
}

// GetCheckoutDeliveryMethodsV1 provides a mock function with given fields: ctx, in, opts
func (_m *CloseableShoppingCheckoutBusinessServiceClient) GetCheckoutDeliveryMethodsV1(ctx context.Context, in *shoppingcheckoutpb.GetCheckoutDeliveryMethodsV1Request, opts ...grpc.CallOption) (*shoppingcheckoutpb.GetCheckoutDeliveryMethodsV1Response, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *shoppingcheckoutpb.GetCheckoutDeliveryMethodsV1Response
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *shoppingcheckoutpb.GetCheckoutDeliveryMethodsV1Request, ...grpc.CallOption) (*shoppingcheckoutpb.GetCheckoutDeliveryMethodsV1Response, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *shoppingcheckoutpb.GetCheckoutDeliveryMethodsV1Request, ...grpc.CallOption) *shoppingcheckoutpb.GetCheckoutDeliveryMethodsV1Response); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*shoppingcheckoutpb.GetCheckoutDeliveryMethodsV1Response)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *shoppingcheckoutpb.GetCheckoutDeliveryMethodsV1Request, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetCheckoutPaymentMethodsV1 provides a mock function with given fields: ctx, in, opts
func (_m *CloseableShoppingCheckoutBusinessServiceClient) GetCheckoutPaymentMethodsV1(ctx context.Context, in *shoppingcheckoutpb.GetCheckoutPaymentMethodsV1Request, opts ...grpc.CallOption) (*shoppingcheckoutpb.GetCheckoutPaymentMethodsV1Response, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *shoppingcheckoutpb.GetCheckoutPaymentMethodsV1Response
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *shoppingcheckoutpb.GetCheckoutPaymentMethodsV1Request, ...grpc.CallOption) (*shoppingcheckoutpb.GetCheckoutPaymentMethodsV1Response, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *shoppingcheckoutpb.GetCheckoutPaymentMethodsV1Request, ...grpc.CallOption) *shoppingcheckoutpb.GetCheckoutPaymentMethodsV1Response); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*shoppingcheckoutpb.GetCheckoutPaymentMethodsV1Response)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *shoppingcheckoutpb.GetCheckoutPaymentMethodsV1Request, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetItemPricesV1 provides a mock function with given fields: ctx, in, opts
func (_m *CloseableShoppingCheckoutBusinessServiceClient) GetItemPricesV1(ctx context.Context, in *shoppingcheckoutpb.GetItemPricesV1Request, opts ...grpc.CallOption) (*shoppingcheckoutpb.GetItemPricesV1Response, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *shoppingcheckoutpb.GetItemPricesV1Response
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *shoppingcheckoutpb.GetItemPricesV1Request, ...grpc.CallOption) (*shoppingcheckoutpb.GetItemPricesV1Response, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *shoppingcheckoutpb.GetItemPricesV1Request, ...grpc.CallOption) *shoppingcheckoutpb.GetItemPricesV1Response); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*shoppingcheckoutpb.GetItemPricesV1Response)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *shoppingcheckoutpb.GetItemPricesV1Request, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetMakePaymentInfoV1 provides a mock function with given fields: ctx, in, opts
func (_m *CloseableShoppingCheckoutBusinessServiceClient) GetMakePaymentInfoV1(ctx context.Context, in *shoppingcheckoutpb.GetMakePaymentInfoV1Request, opts ...grpc.CallOption) (*shoppingcheckoutpb.GetMakePaymentInfoV1Response, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *shoppingcheckoutpb.GetMakePaymentInfoV1Response
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *shoppingcheckoutpb.GetMakePaymentInfoV1Request, ...grpc.CallOption) (*shoppingcheckoutpb.GetMakePaymentInfoV1Response, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *shoppingcheckoutpb.GetMakePaymentInfoV1Request, ...grpc.CallOption) *shoppingcheckoutpb.GetMakePaymentInfoV1Response); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*shoppingcheckoutpb.GetMakePaymentInfoV1Response)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *shoppingcheckoutpb.GetMakePaymentInfoV1Request, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GroupItemsV1 provides a mock function with given fields: ctx, in, opts
func (_m *CloseableShoppingCheckoutBusinessServiceClient) GroupItemsV1(ctx context.Context, in *shoppingcheckoutpb.GroupItemsV1Request, opts ...grpc.CallOption) (*shoppingcheckoutpb.GroupItemsV1Response, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *shoppingcheckoutpb.GroupItemsV1Response
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *shoppingcheckoutpb.GroupItemsV1Request, ...grpc.CallOption) (*shoppingcheckoutpb.GroupItemsV1Response, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *shoppingcheckoutpb.GroupItemsV1Request, ...grpc.CallOption) *shoppingcheckoutpb.GroupItemsV1Response); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*shoppingcheckoutpb.GroupItemsV1Response)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *shoppingcheckoutpb.GroupItemsV1Request, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PerformCheckoutV1 provides a mock function with given fields: ctx, in, opts
func (_m *CloseableShoppingCheckoutBusinessServiceClient) PerformCheckoutV1(ctx context.Context, in *shoppingcheckoutpb.PerformCheckoutV1Request, opts ...grpc.CallOption) (*shoppingcheckoutpb.PerformCheckoutV1Response, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *shoppingcheckoutpb.PerformCheckoutV1Response
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *shoppingcheckoutpb.PerformCheckoutV1Request, ...grpc.CallOption) (*shoppingcheckoutpb.PerformCheckoutV1Response, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *shoppingcheckoutpb.PerformCheckoutV1Request, ...grpc.CallOption) *shoppingcheckoutpb.PerformCheckoutV1Response); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*shoppingcheckoutpb.PerformCheckoutV1Response)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *shoppingcheckoutpb.PerformCheckoutV1Request, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PrepareCheckoutV1 provides a mock function with given fields: ctx, in, opts
func (_m *CloseableShoppingCheckoutBusinessServiceClient) PrepareCheckoutV1(ctx context.Context, in *shoppingcheckoutpb.PrepareCheckoutV1Request, opts ...grpc.CallOption) (*shoppingcheckoutpb.PrepareCheckoutV1Response, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *shoppingcheckoutpb.PrepareCheckoutV1Response
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *shoppingcheckoutpb.PrepareCheckoutV1Request, ...grpc.CallOption) (*shoppingcheckoutpb.PrepareCheckoutV1Response, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *shoppingcheckoutpb.PrepareCheckoutV1Request, ...grpc.CallOption) *shoppingcheckoutpb.PrepareCheckoutV1Response); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*shoppingcheckoutpb.PrepareCheckoutV1Response)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *shoppingcheckoutpb.PrepareCheckoutV1Request, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewCloseableShoppingCheckoutBusinessServiceClient creates a new instance of CloseableShoppingCheckoutBusinessServiceClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewCloseableShoppingCheckoutBusinessServiceClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *CloseableShoppingCheckoutBusinessServiceClient {
	mock := &CloseableShoppingCheckoutBusinessServiceClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
