// Code generated by mockery v2.32.4. DO NOT EDIT.

package mocks

import (
	context "context"

	deliverymanagerpb "github.com/cs-lexliu/pickup-helper/gen/pb/DeliveryManager"
	grpc "google.golang.org/grpc"

	mock "github.com/stretchr/testify/mock"
)

// CloseableDeliveryManagerServiceClient is an autogenerated mock type for the CloseableDeliveryManagerServiceClient type
type CloseableDeliveryManagerServiceClient struct {
	mock.Mock
}

// Close provides a mock function with given fields:
func (_m *CloseableDeliveryManagerServiceClient) Close() {
	_m.Called()
}

// ConsolidateDeliveryOption provides a mock function with given fields: ctx, in, opts
func (_m *CloseableDeliveryManagerServiceClient) ConsolidateDeliveryOption(ctx context.Context, in *deliverymanagerpb.ConsolidateDeliveryOptionRequest, opts ...grpc.CallOption) (*deliverymanagerpb.ConsolidateDeliveryOptionResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *deliverymanagerpb.ConsolidateDeliveryOptionResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *deliverymanagerpb.ConsolidateDeliveryOptionRequest, ...grpc.CallOption) (*deliverymanagerpb.ConsolidateDeliveryOptionResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *deliverymanagerpb.ConsolidateDeliveryOptionRequest, ...grpc.CallOption) *deliverymanagerpb.ConsolidateDeliveryOptionResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*deliverymanagerpb.ConsolidateDeliveryOptionResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *deliverymanagerpb.ConsolidateDeliveryOptionRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateDelivery provides a mock function with given fields: ctx, in, opts
func (_m *CloseableDeliveryManagerServiceClient) CreateDelivery(ctx context.Context, in *deliverymanagerpb.CreateDeliveryRequest, opts ...grpc.CallOption) (*deliverymanagerpb.CreateDeliveryResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *deliverymanagerpb.CreateDeliveryResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *deliverymanagerpb.CreateDeliveryRequest, ...grpc.CallOption) (*deliverymanagerpb.CreateDeliveryResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *deliverymanagerpb.CreateDeliveryRequest, ...grpc.CallOption) *deliverymanagerpb.CreateDeliveryResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*deliverymanagerpb.CreateDeliveryResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *deliverymanagerpb.CreateDeliveryRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetCategoryInfo provides a mock function with given fields: ctx, in, opts
func (_m *CloseableDeliveryManagerServiceClient) GetCategoryInfo(ctx context.Context, in *deliverymanagerpb.GetCategoryInfoRequest, opts ...grpc.CallOption) (*deliverymanagerpb.GetCategoryInfoResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *deliverymanagerpb.GetCategoryInfoResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *deliverymanagerpb.GetCategoryInfoRequest, ...grpc.CallOption) (*deliverymanagerpb.GetCategoryInfoResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *deliverymanagerpb.GetCategoryInfoRequest, ...grpc.CallOption) *deliverymanagerpb.GetCategoryInfoResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*deliverymanagerpb.GetCategoryInfoResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *deliverymanagerpb.GetCategoryInfoRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetCourierProgresses provides a mock function with given fields: ctx, in, opts
func (_m *CloseableDeliveryManagerServiceClient) GetCourierProgresses(ctx context.Context, in *deliverymanagerpb.GetCourierProgressesRequest, opts ...grpc.CallOption) (*deliverymanagerpb.GetCourierProgressesResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *deliverymanagerpb.GetCourierProgressesResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *deliverymanagerpb.GetCourierProgressesRequest, ...grpc.CallOption) (*deliverymanagerpb.GetCourierProgressesResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *deliverymanagerpb.GetCourierProgressesRequest, ...grpc.CallOption) *deliverymanagerpb.GetCourierProgressesResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*deliverymanagerpb.GetCourierProgressesResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *deliverymanagerpb.GetCourierProgressesRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetCustomDeliveryProviderPropertyOptions provides a mock function with given fields: ctx, in, opts
func (_m *CloseableDeliveryManagerServiceClient) GetCustomDeliveryProviderPropertyOptions(ctx context.Context, in *deliverymanagerpb.GetCustomDeliveryProviderPropertyOptionsRequest, opts ...grpc.CallOption) (*deliverymanagerpb.GetCustomDeliveryProviderPropertyOptionsResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *deliverymanagerpb.GetCustomDeliveryProviderPropertyOptionsResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *deliverymanagerpb.GetCustomDeliveryProviderPropertyOptionsRequest, ...grpc.CallOption) (*deliverymanagerpb.GetCustomDeliveryProviderPropertyOptionsResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *deliverymanagerpb.GetCustomDeliveryProviderPropertyOptionsRequest, ...grpc.CallOption) *deliverymanagerpb.GetCustomDeliveryProviderPropertyOptionsResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*deliverymanagerpb.GetCustomDeliveryProviderPropertyOptionsResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *deliverymanagerpb.GetCustomDeliveryProviderPropertyOptionsRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetDeliveryProgresses provides a mock function with given fields: ctx, in, opts
func (_m *CloseableDeliveryManagerServiceClient) GetDeliveryProgresses(ctx context.Context, in *deliverymanagerpb.GetDeliveryProgressesRequest, opts ...grpc.CallOption) (*deliverymanagerpb.GetDeliveryProgressesResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *deliverymanagerpb.GetDeliveryProgressesResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *deliverymanagerpb.GetDeliveryProgressesRequest, ...grpc.CallOption) (*deliverymanagerpb.GetDeliveryProgressesResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *deliverymanagerpb.GetDeliveryProgressesRequest, ...grpc.CallOption) *deliverymanagerpb.GetDeliveryProgressesResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*deliverymanagerpb.GetDeliveryProgressesResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *deliverymanagerpb.GetDeliveryProgressesRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetDeliveryPropertyOptions provides a mock function with given fields: ctx, in, opts
func (_m *CloseableDeliveryManagerServiceClient) GetDeliveryPropertyOptions(ctx context.Context, in *deliverymanagerpb.GetDeliveryPropertyOptionsRequest, opts ...grpc.CallOption) (*deliverymanagerpb.GetDeliveryPropertyOptionsResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *deliverymanagerpb.GetDeliveryPropertyOptionsResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *deliverymanagerpb.GetDeliveryPropertyOptionsRequest, ...grpc.CallOption) (*deliverymanagerpb.GetDeliveryPropertyOptionsResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *deliverymanagerpb.GetDeliveryPropertyOptionsRequest, ...grpc.CallOption) *deliverymanagerpb.GetDeliveryPropertyOptionsResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*deliverymanagerpb.GetDeliveryPropertyOptionsResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *deliverymanagerpb.GetDeliveryPropertyOptionsRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ParseDeliveryOptionFromListingAttribute provides a mock function with given fields: ctx, in, opts
func (_m *CloseableDeliveryManagerServiceClient) ParseDeliveryOptionFromListingAttribute(ctx context.Context, in *deliverymanagerpb.ParseDeliveryOptionFromListingAttributeRequest, opts ...grpc.CallOption) (*deliverymanagerpb.ParseDeliveryOptionFromListingAttributeResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *deliverymanagerpb.ParseDeliveryOptionFromListingAttributeResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *deliverymanagerpb.ParseDeliveryOptionFromListingAttributeRequest, ...grpc.CallOption) (*deliverymanagerpb.ParseDeliveryOptionFromListingAttributeResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *deliverymanagerpb.ParseDeliveryOptionFromListingAttributeRequest, ...grpc.CallOption) *deliverymanagerpb.ParseDeliveryOptionFromListingAttributeResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*deliverymanagerpb.ParseDeliveryOptionFromListingAttributeResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *deliverymanagerpb.ParseDeliveryOptionFromListingAttributeRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RequestD2DDelivery provides a mock function with given fields: ctx, in, opts
func (_m *CloseableDeliveryManagerServiceClient) RequestD2DDelivery(ctx context.Context, in *deliverymanagerpb.RequestD2DDeliveryRequest, opts ...grpc.CallOption) (*deliverymanagerpb.RequestD2DDeliveryResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *deliverymanagerpb.RequestD2DDeliveryResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *deliverymanagerpb.RequestD2DDeliveryRequest, ...grpc.CallOption) (*deliverymanagerpb.RequestD2DDeliveryResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *deliverymanagerpb.RequestD2DDeliveryRequest, ...grpc.CallOption) *deliverymanagerpb.RequestD2DDeliveryResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*deliverymanagerpb.RequestD2DDeliveryResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *deliverymanagerpb.RequestD2DDeliveryRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// StartCustomDelivery provides a mock function with given fields: ctx, in, opts
func (_m *CloseableDeliveryManagerServiceClient) StartCustomDelivery(ctx context.Context, in *deliverymanagerpb.StartCustomDeliveryRequest, opts ...grpc.CallOption) (*deliverymanagerpb.StartCustomDeliveryResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *deliverymanagerpb.StartCustomDeliveryResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *deliverymanagerpb.StartCustomDeliveryRequest, ...grpc.CallOption) (*deliverymanagerpb.StartCustomDeliveryResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *deliverymanagerpb.StartCustomDeliveryRequest, ...grpc.CallOption) *deliverymanagerpb.StartCustomDeliveryResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*deliverymanagerpb.StartCustomDeliveryResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *deliverymanagerpb.StartCustomDeliveryRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// StartD2DDelivery provides a mock function with given fields: ctx, in, opts
func (_m *CloseableDeliveryManagerServiceClient) StartD2DDelivery(ctx context.Context, in *deliverymanagerpb.StartD2DDeliveryRequest, opts ...grpc.CallOption) (*deliverymanagerpb.StartD2DDeliveryResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *deliverymanagerpb.StartD2DDeliveryResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *deliverymanagerpb.StartD2DDeliveryRequest, ...grpc.CallOption) (*deliverymanagerpb.StartD2DDeliveryResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *deliverymanagerpb.StartD2DDeliveryRequest, ...grpc.CallOption) *deliverymanagerpb.StartD2DDeliveryResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*deliverymanagerpb.StartD2DDeliveryResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *deliverymanagerpb.StartD2DDeliveryRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ValidateShippingAttributes provides a mock function with given fields: ctx, in, opts
func (_m *CloseableDeliveryManagerServiceClient) ValidateShippingAttributes(ctx context.Context, in *deliverymanagerpb.ValidateListingAttributesRequest, opts ...grpc.CallOption) (*deliverymanagerpb.ValidateListingAttributesResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *deliverymanagerpb.ValidateListingAttributesResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *deliverymanagerpb.ValidateListingAttributesRequest, ...grpc.CallOption) (*deliverymanagerpb.ValidateListingAttributesResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *deliverymanagerpb.ValidateListingAttributesRequest, ...grpc.CallOption) *deliverymanagerpb.ValidateListingAttributesResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*deliverymanagerpb.ValidateListingAttributesResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *deliverymanagerpb.ValidateListingAttributesRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ValidateShippingOption provides a mock function with given fields: ctx, in, opts
func (_m *CloseableDeliveryManagerServiceClient) ValidateShippingOption(ctx context.Context, in *deliverymanagerpb.ValidateShippingOptionRequest, opts ...grpc.CallOption) (*deliverymanagerpb.ValidateShippingOptionResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *deliverymanagerpb.ValidateShippingOptionResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *deliverymanagerpb.ValidateShippingOptionRequest, ...grpc.CallOption) (*deliverymanagerpb.ValidateShippingOptionResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *deliverymanagerpb.ValidateShippingOptionRequest, ...grpc.CallOption) *deliverymanagerpb.ValidateShippingOptionResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*deliverymanagerpb.ValidateShippingOptionResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *deliverymanagerpb.ValidateShippingOptionRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewCloseableDeliveryManagerServiceClient creates a new instance of CloseableDeliveryManagerServiceClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewCloseableDeliveryManagerServiceClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *CloseableDeliveryManagerServiceClient {
	mock := &CloseableDeliveryManagerServiceClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
