// Code generated by mockery v2.32.4. DO NOT EDIT.

package mocks

import (
	context "context"

	grpc "google.golang.org/grpc"

	messaging_proto "github.com/carousell/messaging/messaging/messaging_proto"

	mock "github.com/stretchr/testify/mock"

	shoppingcheckoutcorepb "github.com/cs-lexliu/pickup-helper/gen/pb/shopping-checkout-core"
)

// CloseableShoppingCheckoutCoreServiceClient is an autogenerated mock type for the CloseableShoppingCheckoutCoreServiceClient type
type CloseableShoppingCheckoutCoreServiceClient struct {
	mock.Mock
}

// CancelCheckout provides a mock function with given fields: ctx, in, opts
func (_m *CloseableShoppingCheckoutCoreServiceClient) CancelCheckout(ctx context.Context, in *shoppingcheckoutcorepb.CancelCheckoutRequest, opts ...grpc.CallOption) (*shoppingcheckoutcorepb.CancelCheckoutResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *shoppingcheckoutcorepb.CancelCheckoutResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *shoppingcheckoutcorepb.CancelCheckoutRequest, ...grpc.CallOption) (*shoppingcheckoutcorepb.CancelCheckoutResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *shoppingcheckoutcorepb.CancelCheckoutRequest, ...grpc.CallOption) *shoppingcheckoutcorepb.CancelCheckoutResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*shoppingcheckoutcorepb.CancelCheckoutResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *shoppingcheckoutcorepb.CancelCheckoutRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Close provides a mock function with given fields:
func (_m *CloseableShoppingCheckoutCoreServiceClient) Close() {
	_m.Called()
}

// CompleteCheckout provides a mock function with given fields: ctx, in, opts
func (_m *CloseableShoppingCheckoutCoreServiceClient) CompleteCheckout(ctx context.Context, in *shoppingcheckoutcorepb.CompleteCheckoutRequest, opts ...grpc.CallOption) (*shoppingcheckoutcorepb.CompleteCheckoutResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *shoppingcheckoutcorepb.CompleteCheckoutResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *shoppingcheckoutcorepb.CompleteCheckoutRequest, ...grpc.CallOption) (*shoppingcheckoutcorepb.CompleteCheckoutResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *shoppingcheckoutcorepb.CompleteCheckoutRequest, ...grpc.CallOption) *shoppingcheckoutcorepb.CompleteCheckoutResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*shoppingcheckoutcorepb.CompleteCheckoutResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *shoppingcheckoutcorepb.CompleteCheckoutRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetCheckoutByID provides a mock function with given fields: ctx, in, opts
func (_m *CloseableShoppingCheckoutCoreServiceClient) GetCheckoutByID(ctx context.Context, in *shoppingcheckoutcorepb.GetCheckoutByIDRequest, opts ...grpc.CallOption) (*shoppingcheckoutcorepb.GetCheckoutByIDResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *shoppingcheckoutcorepb.GetCheckoutByIDResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *shoppingcheckoutcorepb.GetCheckoutByIDRequest, ...grpc.CallOption) (*shoppingcheckoutcorepb.GetCheckoutByIDResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *shoppingcheckoutcorepb.GetCheckoutByIDRequest, ...grpc.CallOption) *shoppingcheckoutcorepb.GetCheckoutByIDResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*shoppingcheckoutcorepb.GetCheckoutByIDResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *shoppingcheckoutcorepb.GetCheckoutByIDRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetCheckoutList provides a mock function with given fields: ctx, in, opts
func (_m *CloseableShoppingCheckoutCoreServiceClient) GetCheckoutList(ctx context.Context, in *shoppingcheckoutcorepb.GetCheckoutListRequest, opts ...grpc.CallOption) (*shoppingcheckoutcorepb.GetCheckoutListResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *shoppingcheckoutcorepb.GetCheckoutListResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *shoppingcheckoutcorepb.GetCheckoutListRequest, ...grpc.CallOption) (*shoppingcheckoutcorepb.GetCheckoutListResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *shoppingcheckoutcorepb.GetCheckoutListRequest, ...grpc.CallOption) *shoppingcheckoutcorepb.GetCheckoutListResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*shoppingcheckoutcorepb.GetCheckoutListResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *shoppingcheckoutcorepb.GetCheckoutListRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetCheckoutListByBuyerID provides a mock function with given fields: ctx, in, opts
func (_m *CloseableShoppingCheckoutCoreServiceClient) GetCheckoutListByBuyerID(ctx context.Context, in *shoppingcheckoutcorepb.GetCheckoutListByBuyerIDRequest, opts ...grpc.CallOption) (*shoppingcheckoutcorepb.GetCheckoutListByBuyerIDResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *shoppingcheckoutcorepb.GetCheckoutListByBuyerIDResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *shoppingcheckoutcorepb.GetCheckoutListByBuyerIDRequest, ...grpc.CallOption) (*shoppingcheckoutcorepb.GetCheckoutListByBuyerIDResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *shoppingcheckoutcorepb.GetCheckoutListByBuyerIDRequest, ...grpc.CallOption) *shoppingcheckoutcorepb.GetCheckoutListByBuyerIDResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*shoppingcheckoutcorepb.GetCheckoutListByBuyerIDResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *shoppingcheckoutcorepb.GetCheckoutListByBuyerIDRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// InitCheckout provides a mock function with given fields: ctx, in, opts
func (_m *CloseableShoppingCheckoutCoreServiceClient) InitCheckout(ctx context.Context, in *shoppingcheckoutcorepb.InitCheckoutRequest, opts ...grpc.CallOption) (*shoppingcheckoutcorepb.InitCheckoutResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *shoppingcheckoutcorepb.InitCheckoutResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *shoppingcheckoutcorepb.InitCheckoutRequest, ...grpc.CallOption) (*shoppingcheckoutcorepb.InitCheckoutResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *shoppingcheckoutcorepb.InitCheckoutRequest, ...grpc.CallOption) *shoppingcheckoutcorepb.InitCheckoutResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*shoppingcheckoutcorepb.InitCheckoutResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *shoppingcheckoutcorepb.InitCheckoutRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// InvalidateCheckout provides a mock function with given fields: ctx, in, opts
func (_m *CloseableShoppingCheckoutCoreServiceClient) InvalidateCheckout(ctx context.Context, in *shoppingcheckoutcorepb.InvalidateCheckoutRequest, opts ...grpc.CallOption) (*shoppingcheckoutcorepb.InvalidateCheckoutResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *shoppingcheckoutcorepb.InvalidateCheckoutResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *shoppingcheckoutcorepb.InvalidateCheckoutRequest, ...grpc.CallOption) (*shoppingcheckoutcorepb.InvalidateCheckoutResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *shoppingcheckoutcorepb.InvalidateCheckoutRequest, ...grpc.CallOption) *shoppingcheckoutcorepb.InvalidateCheckoutResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*shoppingcheckoutcorepb.InvalidateCheckoutResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *shoppingcheckoutcorepb.InvalidateCheckoutRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MarkListingSoftReserved provides a mock function with given fields: ctx, in, opts
func (_m *CloseableShoppingCheckoutCoreServiceClient) MarkListingSoftReserved(ctx context.Context, in *shoppingcheckoutcorepb.MarkListingSoftReservedRequest, opts ...grpc.CallOption) (*shoppingcheckoutcorepb.MarkListingSoftReservedResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *shoppingcheckoutcorepb.MarkListingSoftReservedResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *shoppingcheckoutcorepb.MarkListingSoftReservedRequest, ...grpc.CallOption) (*shoppingcheckoutcorepb.MarkListingSoftReservedResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *shoppingcheckoutcorepb.MarkListingSoftReservedRequest, ...grpc.CallOption) *shoppingcheckoutcorepb.MarkListingSoftReservedResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*shoppingcheckoutcorepb.MarkListingSoftReservedResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *shoppingcheckoutcorepb.MarkListingSoftReservedRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ReceiveMessage provides a mock function with given fields: ctx, in, opts
func (_m *CloseableShoppingCheckoutCoreServiceClient) ReceiveMessage(ctx context.Context, in *messaging_proto.MessageRequest, opts ...grpc.CallOption) (*messaging_proto.MessageResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *messaging_proto.MessageResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *messaging_proto.MessageRequest, ...grpc.CallOption) (*messaging_proto.MessageResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *messaging_proto.MessageRequest, ...grpc.CallOption) *messaging_proto.MessageResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*messaging_proto.MessageResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *messaging_proto.MessageRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UnmarkListingSoftReserved provides a mock function with given fields: ctx, in, opts
func (_m *CloseableShoppingCheckoutCoreServiceClient) UnmarkListingSoftReserved(ctx context.Context, in *shoppingcheckoutcorepb.UnmarkListingSoftReservedRequest, opts ...grpc.CallOption) (*shoppingcheckoutcorepb.UnmarkListingSoftReservedResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *shoppingcheckoutcorepb.UnmarkListingSoftReservedResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *shoppingcheckoutcorepb.UnmarkListingSoftReservedRequest, ...grpc.CallOption) (*shoppingcheckoutcorepb.UnmarkListingSoftReservedResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *shoppingcheckoutcorepb.UnmarkListingSoftReservedRequest, ...grpc.CallOption) *shoppingcheckoutcorepb.UnmarkListingSoftReservedResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*shoppingcheckoutcorepb.UnmarkListingSoftReservedResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *shoppingcheckoutcorepb.UnmarkListingSoftReservedRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateCheckoutPendingPayment provides a mock function with given fields: ctx, in, opts
func (_m *CloseableShoppingCheckoutCoreServiceClient) UpdateCheckoutPendingPayment(ctx context.Context, in *shoppingcheckoutcorepb.UpdateCheckoutPendingPaymentRequest, opts ...grpc.CallOption) (*shoppingcheckoutcorepb.UpdateCheckoutPendingPaymentResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *shoppingcheckoutcorepb.UpdateCheckoutPendingPaymentResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *shoppingcheckoutcorepb.UpdateCheckoutPendingPaymentRequest, ...grpc.CallOption) (*shoppingcheckoutcorepb.UpdateCheckoutPendingPaymentResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *shoppingcheckoutcorepb.UpdateCheckoutPendingPaymentRequest, ...grpc.CallOption) *shoppingcheckoutcorepb.UpdateCheckoutPendingPaymentResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*shoppingcheckoutcorepb.UpdateCheckoutPendingPaymentResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *shoppingcheckoutcorepb.UpdateCheckoutPendingPaymentRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewCloseableShoppingCheckoutCoreServiceClient creates a new instance of CloseableShoppingCheckoutCoreServiceClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewCloseableShoppingCheckoutCoreServiceClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *CloseableShoppingCheckoutCoreServiceClient {
	mock := &CloseableShoppingCheckoutCoreServiceClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
