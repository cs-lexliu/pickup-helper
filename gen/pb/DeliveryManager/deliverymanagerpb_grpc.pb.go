// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.22.2
// source: DeliveryManager/deliverymanagerpb.proto

package deliverymanagerpb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	DeliveryManagerService_GetDeliveryPropertyOptions_FullMethodName               = "/deliverymanagerpb.DeliveryManagerService/GetDeliveryPropertyOptions"
	DeliveryManagerService_ParseDeliveryOptionFromListingAttribute_FullMethodName  = "/deliverymanagerpb.DeliveryManagerService/ParseDeliveryOptionFromListingAttribute"
	DeliveryManagerService_ConsolidateDeliveryOption_FullMethodName                = "/deliverymanagerpb.DeliveryManagerService/ConsolidateDeliveryOption"
	DeliveryManagerService_CreateDelivery_FullMethodName                           = "/deliverymanagerpb.DeliveryManagerService/CreateDelivery"
	DeliveryManagerService_StartD2DDelivery_FullMethodName                         = "/deliverymanagerpb.DeliveryManagerService/StartD2DDelivery"
	DeliveryManagerService_RequestD2DDelivery_FullMethodName                       = "/deliverymanagerpb.DeliveryManagerService/RequestD2DDelivery"
	DeliveryManagerService_GetDeliveryProgresses_FullMethodName                    = "/deliverymanagerpb.DeliveryManagerService/GetDeliveryProgresses"
	DeliveryManagerService_GetCourierProgresses_FullMethodName                     = "/deliverymanagerpb.DeliveryManagerService/GetCourierProgresses"
	DeliveryManagerService_StartCustomDelivery_FullMethodName                      = "/deliverymanagerpb.DeliveryManagerService/StartCustomDelivery"
	DeliveryManagerService_GetCustomDeliveryProviderPropertyOptions_FullMethodName = "/deliverymanagerpb.DeliveryManagerService/GetCustomDeliveryProviderPropertyOptions"
	DeliveryManagerService_ValidateShippingAttributes_FullMethodName               = "/deliverymanagerpb.DeliveryManagerService/ValidateShippingAttributes"
	DeliveryManagerService_GetCategoryInfo_FullMethodName                          = "/deliverymanagerpb.DeliveryManagerService/GetCategoryInfo"
	DeliveryManagerService_ValidateShippingOption_FullMethodName                   = "/deliverymanagerpb.DeliveryManagerService/ValidateShippingOption"
)

// DeliveryManagerServiceClient is the client API for DeliveryManagerService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DeliveryManagerServiceClient interface {
	GetDeliveryPropertyOptions(ctx context.Context, in *GetDeliveryPropertyOptionsRequest, opts ...grpc.CallOption) (*GetDeliveryPropertyOptionsResponse, error)
	// ParseDeliveryOptionFromListingAttribute returns the delivery options which are parsing from listing attributes.
	//  There are multiple delivery options contained in the listing attributes.
	//  The endpoint will return all available delivery options in response.
	ParseDeliveryOptionFromListingAttribute(ctx context.Context, in *ParseDeliveryOptionFromListingAttributeRequest, opts ...grpc.CallOption) (*ParseDeliveryOptionFromListingAttributeResponse, error)
	// ConsolidateDeliveryOption returns a delivery option that contains all data for creating.
	//  Sometimes, we can not provide the delivery fee before the buyer fills in the receiver information.
	//  The result will fail if we lost data in the requested delivery option.
	ConsolidateDeliveryOption(ctx context.Context, in *ConsolidateDeliveryOptionRequest, opts ...grpc.CallOption) (*ConsolidateDeliveryOptionResponse, error)
	// CreateDelivery creates the delivery by the given delivery option.
	CreateDelivery(ctx context.Context, in *CreateDeliveryRequest, opts ...grpc.CallOption) (*CreateDeliveryResponse, error)
	// StartD2DDelivery creates and start the D2D delivery.
	// StartD2DDelivery in same as calling CreateDelivery and RequestD2DDelivery.
	StartD2DDelivery(ctx context.Context, in *StartD2DDeliveryRequest, opts ...grpc.CallOption) (*StartD2DDeliveryResponse, error)
	// RequestD2DDelivery send the D2D delivery schdule request to courier partner.
	RequestD2DDelivery(ctx context.Context, in *RequestD2DDeliveryRequest, opts ...grpc.CallOption) (*RequestD2DDeliveryResponse, error)
	// GetDeliveryProgresses returns the delivery progress by the given delivery ids.
	GetDeliveryProgresses(ctx context.Context, in *GetDeliveryProgressesRequest, opts ...grpc.CallOption) (*GetDeliveryProgressesResponse, error)
	// GetCourierProgresses returns the courier progress by the given delivery ids.
	GetCourierProgresses(ctx context.Context, in *GetCourierProgressesRequest, opts ...grpc.CallOption) (*GetCourierProgressesResponse, error)
	// StartCustomDelivery creates and start the delivery .
	StartCustomDelivery(ctx context.Context, in *StartCustomDeliveryRequest, opts ...grpc.CallOption) (*StartCustomDeliveryResponse, error)
	// GetCustomDeliveryProviderPropertyOptions  returns all couriers for seller to start delivery
	// would be called in case of custom delivery
	GetCustomDeliveryProviderPropertyOptions(ctx context.Context, in *GetCustomDeliveryProviderPropertyOptionsRequest, opts ...grpc.CallOption) (*GetCustomDeliveryProviderPropertyOptionsResponse, error)
	// ValidateShippingAttributes return all invalid reason
	ValidateShippingAttributes(ctx context.Context, in *ValidateListingAttributesRequest, opts ...grpc.CallOption) (*ValidateListingAttributesResponse, error)
	// GetCategoryInfo returns default scale weight , default volumetric weight
	GetCategoryInfo(ctx context.Context, in *GetCategoryInfoRequest, opts ...grpc.CallOption) (*GetCategoryInfoResponse, error)
	// ValidateShippingOption validates shipping option, used at ORP
	ValidateShippingOption(ctx context.Context, in *ValidateShippingOptionRequest, opts ...grpc.CallOption) (*ValidateShippingOptionResponse, error)
}

type deliveryManagerServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewDeliveryManagerServiceClient(cc grpc.ClientConnInterface) DeliveryManagerServiceClient {
	return &deliveryManagerServiceClient{cc}
}

func (c *deliveryManagerServiceClient) GetDeliveryPropertyOptions(ctx context.Context, in *GetDeliveryPropertyOptionsRequest, opts ...grpc.CallOption) (*GetDeliveryPropertyOptionsResponse, error) {
	out := new(GetDeliveryPropertyOptionsResponse)
	err := c.cc.Invoke(ctx, DeliveryManagerService_GetDeliveryPropertyOptions_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deliveryManagerServiceClient) ParseDeliveryOptionFromListingAttribute(ctx context.Context, in *ParseDeliveryOptionFromListingAttributeRequest, opts ...grpc.CallOption) (*ParseDeliveryOptionFromListingAttributeResponse, error) {
	out := new(ParseDeliveryOptionFromListingAttributeResponse)
	err := c.cc.Invoke(ctx, DeliveryManagerService_ParseDeliveryOptionFromListingAttribute_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deliveryManagerServiceClient) ConsolidateDeliveryOption(ctx context.Context, in *ConsolidateDeliveryOptionRequest, opts ...grpc.CallOption) (*ConsolidateDeliveryOptionResponse, error) {
	out := new(ConsolidateDeliveryOptionResponse)
	err := c.cc.Invoke(ctx, DeliveryManagerService_ConsolidateDeliveryOption_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deliveryManagerServiceClient) CreateDelivery(ctx context.Context, in *CreateDeliveryRequest, opts ...grpc.CallOption) (*CreateDeliveryResponse, error) {
	out := new(CreateDeliveryResponse)
	err := c.cc.Invoke(ctx, DeliveryManagerService_CreateDelivery_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deliveryManagerServiceClient) StartD2DDelivery(ctx context.Context, in *StartD2DDeliveryRequest, opts ...grpc.CallOption) (*StartD2DDeliveryResponse, error) {
	out := new(StartD2DDeliveryResponse)
	err := c.cc.Invoke(ctx, DeliveryManagerService_StartD2DDelivery_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deliveryManagerServiceClient) RequestD2DDelivery(ctx context.Context, in *RequestD2DDeliveryRequest, opts ...grpc.CallOption) (*RequestD2DDeliveryResponse, error) {
	out := new(RequestD2DDeliveryResponse)
	err := c.cc.Invoke(ctx, DeliveryManagerService_RequestD2DDelivery_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deliveryManagerServiceClient) GetDeliveryProgresses(ctx context.Context, in *GetDeliveryProgressesRequest, opts ...grpc.CallOption) (*GetDeliveryProgressesResponse, error) {
	out := new(GetDeliveryProgressesResponse)
	err := c.cc.Invoke(ctx, DeliveryManagerService_GetDeliveryProgresses_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deliveryManagerServiceClient) GetCourierProgresses(ctx context.Context, in *GetCourierProgressesRequest, opts ...grpc.CallOption) (*GetCourierProgressesResponse, error) {
	out := new(GetCourierProgressesResponse)
	err := c.cc.Invoke(ctx, DeliveryManagerService_GetCourierProgresses_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deliveryManagerServiceClient) StartCustomDelivery(ctx context.Context, in *StartCustomDeliveryRequest, opts ...grpc.CallOption) (*StartCustomDeliveryResponse, error) {
	out := new(StartCustomDeliveryResponse)
	err := c.cc.Invoke(ctx, DeliveryManagerService_StartCustomDelivery_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deliveryManagerServiceClient) GetCustomDeliveryProviderPropertyOptions(ctx context.Context, in *GetCustomDeliveryProviderPropertyOptionsRequest, opts ...grpc.CallOption) (*GetCustomDeliveryProviderPropertyOptionsResponse, error) {
	out := new(GetCustomDeliveryProviderPropertyOptionsResponse)
	err := c.cc.Invoke(ctx, DeliveryManagerService_GetCustomDeliveryProviderPropertyOptions_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deliveryManagerServiceClient) ValidateShippingAttributes(ctx context.Context, in *ValidateListingAttributesRequest, opts ...grpc.CallOption) (*ValidateListingAttributesResponse, error) {
	out := new(ValidateListingAttributesResponse)
	err := c.cc.Invoke(ctx, DeliveryManagerService_ValidateShippingAttributes_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deliveryManagerServiceClient) GetCategoryInfo(ctx context.Context, in *GetCategoryInfoRequest, opts ...grpc.CallOption) (*GetCategoryInfoResponse, error) {
	out := new(GetCategoryInfoResponse)
	err := c.cc.Invoke(ctx, DeliveryManagerService_GetCategoryInfo_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deliveryManagerServiceClient) ValidateShippingOption(ctx context.Context, in *ValidateShippingOptionRequest, opts ...grpc.CallOption) (*ValidateShippingOptionResponse, error) {
	out := new(ValidateShippingOptionResponse)
	err := c.cc.Invoke(ctx, DeliveryManagerService_ValidateShippingOption_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DeliveryManagerServiceServer is the server API for DeliveryManagerService service.
// All implementations must embed UnimplementedDeliveryManagerServiceServer
// for forward compatibility
type DeliveryManagerServiceServer interface {
	GetDeliveryPropertyOptions(context.Context, *GetDeliveryPropertyOptionsRequest) (*GetDeliveryPropertyOptionsResponse, error)
	// ParseDeliveryOptionFromListingAttribute returns the delivery options which are parsing from listing attributes.
	//  There are multiple delivery options contained in the listing attributes.
	//  The endpoint will return all available delivery options in response.
	ParseDeliveryOptionFromListingAttribute(context.Context, *ParseDeliveryOptionFromListingAttributeRequest) (*ParseDeliveryOptionFromListingAttributeResponse, error)
	// ConsolidateDeliveryOption returns a delivery option that contains all data for creating.
	//  Sometimes, we can not provide the delivery fee before the buyer fills in the receiver information.
	//  The result will fail if we lost data in the requested delivery option.
	ConsolidateDeliveryOption(context.Context, *ConsolidateDeliveryOptionRequest) (*ConsolidateDeliveryOptionResponse, error)
	// CreateDelivery creates the delivery by the given delivery option.
	CreateDelivery(context.Context, *CreateDeliveryRequest) (*CreateDeliveryResponse, error)
	// StartD2DDelivery creates and start the D2D delivery.
	// StartD2DDelivery in same as calling CreateDelivery and RequestD2DDelivery.
	StartD2DDelivery(context.Context, *StartD2DDeliveryRequest) (*StartD2DDeliveryResponse, error)
	// RequestD2DDelivery send the D2D delivery schdule request to courier partner.
	RequestD2DDelivery(context.Context, *RequestD2DDeliveryRequest) (*RequestD2DDeliveryResponse, error)
	// GetDeliveryProgresses returns the delivery progress by the given delivery ids.
	GetDeliveryProgresses(context.Context, *GetDeliveryProgressesRequest) (*GetDeliveryProgressesResponse, error)
	// GetCourierProgresses returns the courier progress by the given delivery ids.
	GetCourierProgresses(context.Context, *GetCourierProgressesRequest) (*GetCourierProgressesResponse, error)
	// StartCustomDelivery creates and start the delivery .
	StartCustomDelivery(context.Context, *StartCustomDeliveryRequest) (*StartCustomDeliveryResponse, error)
	// GetCustomDeliveryProviderPropertyOptions  returns all couriers for seller to start delivery
	// would be called in case of custom delivery
	GetCustomDeliveryProviderPropertyOptions(context.Context, *GetCustomDeliveryProviderPropertyOptionsRequest) (*GetCustomDeliveryProviderPropertyOptionsResponse, error)
	// ValidateShippingAttributes return all invalid reason
	ValidateShippingAttributes(context.Context, *ValidateListingAttributesRequest) (*ValidateListingAttributesResponse, error)
	// GetCategoryInfo returns default scale weight , default volumetric weight
	GetCategoryInfo(context.Context, *GetCategoryInfoRequest) (*GetCategoryInfoResponse, error)
	// ValidateShippingOption validates shipping option, used at ORP
	ValidateShippingOption(context.Context, *ValidateShippingOptionRequest) (*ValidateShippingOptionResponse, error)
	mustEmbedUnimplementedDeliveryManagerServiceServer()
}

// UnimplementedDeliveryManagerServiceServer must be embedded to have forward compatible implementations.
type UnimplementedDeliveryManagerServiceServer struct {
}

func (UnimplementedDeliveryManagerServiceServer) GetDeliveryPropertyOptions(context.Context, *GetDeliveryPropertyOptionsRequest) (*GetDeliveryPropertyOptionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDeliveryPropertyOptions not implemented")
}
func (UnimplementedDeliveryManagerServiceServer) ParseDeliveryOptionFromListingAttribute(context.Context, *ParseDeliveryOptionFromListingAttributeRequest) (*ParseDeliveryOptionFromListingAttributeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ParseDeliveryOptionFromListingAttribute not implemented")
}
func (UnimplementedDeliveryManagerServiceServer) ConsolidateDeliveryOption(context.Context, *ConsolidateDeliveryOptionRequest) (*ConsolidateDeliveryOptionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ConsolidateDeliveryOption not implemented")
}
func (UnimplementedDeliveryManagerServiceServer) CreateDelivery(context.Context, *CreateDeliveryRequest) (*CreateDeliveryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateDelivery not implemented")
}
func (UnimplementedDeliveryManagerServiceServer) StartD2DDelivery(context.Context, *StartD2DDeliveryRequest) (*StartD2DDeliveryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StartD2DDelivery not implemented")
}
func (UnimplementedDeliveryManagerServiceServer) RequestD2DDelivery(context.Context, *RequestD2DDeliveryRequest) (*RequestD2DDeliveryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RequestD2DDelivery not implemented")
}
func (UnimplementedDeliveryManagerServiceServer) GetDeliveryProgresses(context.Context, *GetDeliveryProgressesRequest) (*GetDeliveryProgressesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDeliveryProgresses not implemented")
}
func (UnimplementedDeliveryManagerServiceServer) GetCourierProgresses(context.Context, *GetCourierProgressesRequest) (*GetCourierProgressesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCourierProgresses not implemented")
}
func (UnimplementedDeliveryManagerServiceServer) StartCustomDelivery(context.Context, *StartCustomDeliveryRequest) (*StartCustomDeliveryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StartCustomDelivery not implemented")
}
func (UnimplementedDeliveryManagerServiceServer) GetCustomDeliveryProviderPropertyOptions(context.Context, *GetCustomDeliveryProviderPropertyOptionsRequest) (*GetCustomDeliveryProviderPropertyOptionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCustomDeliveryProviderPropertyOptions not implemented")
}
func (UnimplementedDeliveryManagerServiceServer) ValidateShippingAttributes(context.Context, *ValidateListingAttributesRequest) (*ValidateListingAttributesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ValidateShippingAttributes not implemented")
}
func (UnimplementedDeliveryManagerServiceServer) GetCategoryInfo(context.Context, *GetCategoryInfoRequest) (*GetCategoryInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCategoryInfo not implemented")
}
func (UnimplementedDeliveryManagerServiceServer) ValidateShippingOption(context.Context, *ValidateShippingOptionRequest) (*ValidateShippingOptionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ValidateShippingOption not implemented")
}
func (UnimplementedDeliveryManagerServiceServer) mustEmbedUnimplementedDeliveryManagerServiceServer() {
}

// UnsafeDeliveryManagerServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DeliveryManagerServiceServer will
// result in compilation errors.
type UnsafeDeliveryManagerServiceServer interface {
	mustEmbedUnimplementedDeliveryManagerServiceServer()
}

func RegisterDeliveryManagerServiceServer(s grpc.ServiceRegistrar, srv DeliveryManagerServiceServer) {
	s.RegisterService(&DeliveryManagerService_ServiceDesc, srv)
}

func _DeliveryManagerService_GetDeliveryPropertyOptions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDeliveryPropertyOptionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeliveryManagerServiceServer).GetDeliveryPropertyOptions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DeliveryManagerService_GetDeliveryPropertyOptions_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeliveryManagerServiceServer).GetDeliveryPropertyOptions(ctx, req.(*GetDeliveryPropertyOptionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeliveryManagerService_ParseDeliveryOptionFromListingAttribute_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ParseDeliveryOptionFromListingAttributeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeliveryManagerServiceServer).ParseDeliveryOptionFromListingAttribute(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DeliveryManagerService_ParseDeliveryOptionFromListingAttribute_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeliveryManagerServiceServer).ParseDeliveryOptionFromListingAttribute(ctx, req.(*ParseDeliveryOptionFromListingAttributeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeliveryManagerService_ConsolidateDeliveryOption_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConsolidateDeliveryOptionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeliveryManagerServiceServer).ConsolidateDeliveryOption(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DeliveryManagerService_ConsolidateDeliveryOption_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeliveryManagerServiceServer).ConsolidateDeliveryOption(ctx, req.(*ConsolidateDeliveryOptionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeliveryManagerService_CreateDelivery_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateDeliveryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeliveryManagerServiceServer).CreateDelivery(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DeliveryManagerService_CreateDelivery_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeliveryManagerServiceServer).CreateDelivery(ctx, req.(*CreateDeliveryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeliveryManagerService_StartD2DDelivery_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StartD2DDeliveryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeliveryManagerServiceServer).StartD2DDelivery(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DeliveryManagerService_StartD2DDelivery_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeliveryManagerServiceServer).StartD2DDelivery(ctx, req.(*StartD2DDeliveryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeliveryManagerService_RequestD2DDelivery_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestD2DDeliveryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeliveryManagerServiceServer).RequestD2DDelivery(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DeliveryManagerService_RequestD2DDelivery_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeliveryManagerServiceServer).RequestD2DDelivery(ctx, req.(*RequestD2DDeliveryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeliveryManagerService_GetDeliveryProgresses_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDeliveryProgressesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeliveryManagerServiceServer).GetDeliveryProgresses(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DeliveryManagerService_GetDeliveryProgresses_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeliveryManagerServiceServer).GetDeliveryProgresses(ctx, req.(*GetDeliveryProgressesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeliveryManagerService_GetCourierProgresses_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCourierProgressesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeliveryManagerServiceServer).GetCourierProgresses(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DeliveryManagerService_GetCourierProgresses_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeliveryManagerServiceServer).GetCourierProgresses(ctx, req.(*GetCourierProgressesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeliveryManagerService_StartCustomDelivery_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StartCustomDeliveryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeliveryManagerServiceServer).StartCustomDelivery(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DeliveryManagerService_StartCustomDelivery_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeliveryManagerServiceServer).StartCustomDelivery(ctx, req.(*StartCustomDeliveryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeliveryManagerService_GetCustomDeliveryProviderPropertyOptions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCustomDeliveryProviderPropertyOptionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeliveryManagerServiceServer).GetCustomDeliveryProviderPropertyOptions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DeliveryManagerService_GetCustomDeliveryProviderPropertyOptions_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeliveryManagerServiceServer).GetCustomDeliveryProviderPropertyOptions(ctx, req.(*GetCustomDeliveryProviderPropertyOptionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeliveryManagerService_ValidateShippingAttributes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ValidateListingAttributesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeliveryManagerServiceServer).ValidateShippingAttributes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DeliveryManagerService_ValidateShippingAttributes_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeliveryManagerServiceServer).ValidateShippingAttributes(ctx, req.(*ValidateListingAttributesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeliveryManagerService_GetCategoryInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCategoryInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeliveryManagerServiceServer).GetCategoryInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DeliveryManagerService_GetCategoryInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeliveryManagerServiceServer).GetCategoryInfo(ctx, req.(*GetCategoryInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeliveryManagerService_ValidateShippingOption_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ValidateShippingOptionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeliveryManagerServiceServer).ValidateShippingOption(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DeliveryManagerService_ValidateShippingOption_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeliveryManagerServiceServer).ValidateShippingOption(ctx, req.(*ValidateShippingOptionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// DeliveryManagerService_ServiceDesc is the grpc.ServiceDesc for DeliveryManagerService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DeliveryManagerService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "deliverymanagerpb.DeliveryManagerService",
	HandlerType: (*DeliveryManagerServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetDeliveryPropertyOptions",
			Handler:    _DeliveryManagerService_GetDeliveryPropertyOptions_Handler,
		},
		{
			MethodName: "ParseDeliveryOptionFromListingAttribute",
			Handler:    _DeliveryManagerService_ParseDeliveryOptionFromListingAttribute_Handler,
		},
		{
			MethodName: "ConsolidateDeliveryOption",
			Handler:    _DeliveryManagerService_ConsolidateDeliveryOption_Handler,
		},
		{
			MethodName: "CreateDelivery",
			Handler:    _DeliveryManagerService_CreateDelivery_Handler,
		},
		{
			MethodName: "StartD2DDelivery",
			Handler:    _DeliveryManagerService_StartD2DDelivery_Handler,
		},
		{
			MethodName: "RequestD2DDelivery",
			Handler:    _DeliveryManagerService_RequestD2DDelivery_Handler,
		},
		{
			MethodName: "GetDeliveryProgresses",
			Handler:    _DeliveryManagerService_GetDeliveryProgresses_Handler,
		},
		{
			MethodName: "GetCourierProgresses",
			Handler:    _DeliveryManagerService_GetCourierProgresses_Handler,
		},
		{
			MethodName: "StartCustomDelivery",
			Handler:    _DeliveryManagerService_StartCustomDelivery_Handler,
		},
		{
			MethodName: "GetCustomDeliveryProviderPropertyOptions",
			Handler:    _DeliveryManagerService_GetCustomDeliveryProviderPropertyOptions_Handler,
		},
		{
			MethodName: "ValidateShippingAttributes",
			Handler:    _DeliveryManagerService_ValidateShippingAttributes_Handler,
		},
		{
			MethodName: "GetCategoryInfo",
			Handler:    _DeliveryManagerService_GetCategoryInfo_Handler,
		},
		{
			MethodName: "ValidateShippingOption",
			Handler:    _DeliveryManagerService_ValidateShippingOption_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "DeliveryManager/deliverymanagerpb.proto",
}

const (
	InternalDeliveryManagerService_SyncDeliveryToLogistics_FullMethodName = "/deliverymanagerpb.InternalDeliveryManagerService/SyncDeliveryToLogistics"
	InternalDeliveryManagerService_GetCategoryConfigByID_FullMethodName   = "/deliverymanagerpb.InternalDeliveryManagerService/GetCategoryConfigByID"
	InternalDeliveryManagerService_CreateCategoryConfig_FullMethodName    = "/deliverymanagerpb.InternalDeliveryManagerService/CreateCategoryConfig"
)

// InternalDeliveryManagerServiceClient is the client API for InternalDeliveryManagerService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type InternalDeliveryManagerServiceClient interface {
	// SyncDeliveryToLogistics syncs delivery to logistics which storing in the legacy database (ES).
	SyncDeliveryToLogistics(ctx context.Context, in *SyncDeliveryToLogisticsRequest, opts ...grpc.CallOption) (*SyncDeliveryToLogisticsResponse, error)
	//GetCategoryByID return config by category ID
	GetCategoryConfigByID(ctx context.Context, in *GetCategoryConfigRequest, opts ...grpc.CallOption) (*GetCategoryConfigResponse, error)
	//CreateCategoryConfig - add category config
	CreateCategoryConfig(ctx context.Context, in *CreateCategoryConfigRequest, opts ...grpc.CallOption) (*CreateCategoryConfigResponse, error)
}

type internalDeliveryManagerServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewInternalDeliveryManagerServiceClient(cc grpc.ClientConnInterface) InternalDeliveryManagerServiceClient {
	return &internalDeliveryManagerServiceClient{cc}
}

func (c *internalDeliveryManagerServiceClient) SyncDeliveryToLogistics(ctx context.Context, in *SyncDeliveryToLogisticsRequest, opts ...grpc.CallOption) (*SyncDeliveryToLogisticsResponse, error) {
	out := new(SyncDeliveryToLogisticsResponse)
	err := c.cc.Invoke(ctx, InternalDeliveryManagerService_SyncDeliveryToLogistics_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *internalDeliveryManagerServiceClient) GetCategoryConfigByID(ctx context.Context, in *GetCategoryConfigRequest, opts ...grpc.CallOption) (*GetCategoryConfigResponse, error) {
	out := new(GetCategoryConfigResponse)
	err := c.cc.Invoke(ctx, InternalDeliveryManagerService_GetCategoryConfigByID_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *internalDeliveryManagerServiceClient) CreateCategoryConfig(ctx context.Context, in *CreateCategoryConfigRequest, opts ...grpc.CallOption) (*CreateCategoryConfigResponse, error) {
	out := new(CreateCategoryConfigResponse)
	err := c.cc.Invoke(ctx, InternalDeliveryManagerService_CreateCategoryConfig_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// InternalDeliveryManagerServiceServer is the server API for InternalDeliveryManagerService service.
// All implementations must embed UnimplementedInternalDeliveryManagerServiceServer
// for forward compatibility
type InternalDeliveryManagerServiceServer interface {
	// SyncDeliveryToLogistics syncs delivery to logistics which storing in the legacy database (ES).
	SyncDeliveryToLogistics(context.Context, *SyncDeliveryToLogisticsRequest) (*SyncDeliveryToLogisticsResponse, error)
	//GetCategoryByID return config by category ID
	GetCategoryConfigByID(context.Context, *GetCategoryConfigRequest) (*GetCategoryConfigResponse, error)
	//CreateCategoryConfig - add category config
	CreateCategoryConfig(context.Context, *CreateCategoryConfigRequest) (*CreateCategoryConfigResponse, error)
	mustEmbedUnimplementedInternalDeliveryManagerServiceServer()
}

// UnimplementedInternalDeliveryManagerServiceServer must be embedded to have forward compatible implementations.
type UnimplementedInternalDeliveryManagerServiceServer struct {
}

func (UnimplementedInternalDeliveryManagerServiceServer) SyncDeliveryToLogistics(context.Context, *SyncDeliveryToLogisticsRequest) (*SyncDeliveryToLogisticsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SyncDeliveryToLogistics not implemented")
}
func (UnimplementedInternalDeliveryManagerServiceServer) GetCategoryConfigByID(context.Context, *GetCategoryConfigRequest) (*GetCategoryConfigResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCategoryConfigByID not implemented")
}
func (UnimplementedInternalDeliveryManagerServiceServer) CreateCategoryConfig(context.Context, *CreateCategoryConfigRequest) (*CreateCategoryConfigResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateCategoryConfig not implemented")
}
func (UnimplementedInternalDeliveryManagerServiceServer) mustEmbedUnimplementedInternalDeliveryManagerServiceServer() {
}

// UnsafeInternalDeliveryManagerServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to InternalDeliveryManagerServiceServer will
// result in compilation errors.
type UnsafeInternalDeliveryManagerServiceServer interface {
	mustEmbedUnimplementedInternalDeliveryManagerServiceServer()
}

func RegisterInternalDeliveryManagerServiceServer(s grpc.ServiceRegistrar, srv InternalDeliveryManagerServiceServer) {
	s.RegisterService(&InternalDeliveryManagerService_ServiceDesc, srv)
}

func _InternalDeliveryManagerService_SyncDeliveryToLogistics_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SyncDeliveryToLogisticsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InternalDeliveryManagerServiceServer).SyncDeliveryToLogistics(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: InternalDeliveryManagerService_SyncDeliveryToLogistics_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InternalDeliveryManagerServiceServer).SyncDeliveryToLogistics(ctx, req.(*SyncDeliveryToLogisticsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InternalDeliveryManagerService_GetCategoryConfigByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCategoryConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InternalDeliveryManagerServiceServer).GetCategoryConfigByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: InternalDeliveryManagerService_GetCategoryConfigByID_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InternalDeliveryManagerServiceServer).GetCategoryConfigByID(ctx, req.(*GetCategoryConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InternalDeliveryManagerService_CreateCategoryConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateCategoryConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InternalDeliveryManagerServiceServer).CreateCategoryConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: InternalDeliveryManagerService_CreateCategoryConfig_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InternalDeliveryManagerServiceServer).CreateCategoryConfig(ctx, req.(*CreateCategoryConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// InternalDeliveryManagerService_ServiceDesc is the grpc.ServiceDesc for InternalDeliveryManagerService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var InternalDeliveryManagerService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "deliverymanagerpb.InternalDeliveryManagerService",
	HandlerType: (*InternalDeliveryManagerServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SyncDeliveryToLogistics",
			Handler:    _InternalDeliveryManagerService_SyncDeliveryToLogistics_Handler,
		},
		{
			MethodName: "GetCategoryConfigByID",
			Handler:    _InternalDeliveryManagerService_GetCategoryConfigByID_Handler,
		},
		{
			MethodName: "CreateCategoryConfig",
			Handler:    _InternalDeliveryManagerService_CreateCategoryConfig_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "DeliveryManager/deliverymanagerpb.proto",
}

const (
	DeliveryViewerService_GetDeliveryViews_FullMethodName = "/deliverymanagerpb.DeliveryViewerService/GetDeliveryViews"
)

// DeliveryViewerServiceClient is the client API for DeliveryViewerService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DeliveryViewerServiceClient interface {
	// GetDeliveryViews returns the delivery view by the given delivery ids.
	GetDeliveryViews(ctx context.Context, in *GetDeliveryViewsRequest, opts ...grpc.CallOption) (*GetDeliveryViewsResponse, error)
}

type deliveryViewerServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewDeliveryViewerServiceClient(cc grpc.ClientConnInterface) DeliveryViewerServiceClient {
	return &deliveryViewerServiceClient{cc}
}

func (c *deliveryViewerServiceClient) GetDeliveryViews(ctx context.Context, in *GetDeliveryViewsRequest, opts ...grpc.CallOption) (*GetDeliveryViewsResponse, error) {
	out := new(GetDeliveryViewsResponse)
	err := c.cc.Invoke(ctx, DeliveryViewerService_GetDeliveryViews_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DeliveryViewerServiceServer is the server API for DeliveryViewerService service.
// All implementations must embed UnimplementedDeliveryViewerServiceServer
// for forward compatibility
type DeliveryViewerServiceServer interface {
	// GetDeliveryViews returns the delivery view by the given delivery ids.
	GetDeliveryViews(context.Context, *GetDeliveryViewsRequest) (*GetDeliveryViewsResponse, error)
	mustEmbedUnimplementedDeliveryViewerServiceServer()
}

// UnimplementedDeliveryViewerServiceServer must be embedded to have forward compatible implementations.
type UnimplementedDeliveryViewerServiceServer struct {
}

func (UnimplementedDeliveryViewerServiceServer) GetDeliveryViews(context.Context, *GetDeliveryViewsRequest) (*GetDeliveryViewsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDeliveryViews not implemented")
}
func (UnimplementedDeliveryViewerServiceServer) mustEmbedUnimplementedDeliveryViewerServiceServer() {}

// UnsafeDeliveryViewerServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DeliveryViewerServiceServer will
// result in compilation errors.
type UnsafeDeliveryViewerServiceServer interface {
	mustEmbedUnimplementedDeliveryViewerServiceServer()
}

func RegisterDeliveryViewerServiceServer(s grpc.ServiceRegistrar, srv DeliveryViewerServiceServer) {
	s.RegisterService(&DeliveryViewerService_ServiceDesc, srv)
}

func _DeliveryViewerService_GetDeliveryViews_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDeliveryViewsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeliveryViewerServiceServer).GetDeliveryViews(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DeliveryViewerService_GetDeliveryViews_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeliveryViewerServiceServer).GetDeliveryViews(ctx, req.(*GetDeliveryViewsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// DeliveryViewerService_ServiceDesc is the grpc.ServiceDesc for DeliveryViewerService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DeliveryViewerService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "deliverymanagerpb.DeliveryViewerService",
	HandlerType: (*DeliveryViewerServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetDeliveryViews",
			Handler:    _DeliveryViewerService_GetDeliveryViews_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "DeliveryManager/deliverymanagerpb.proto",
}
