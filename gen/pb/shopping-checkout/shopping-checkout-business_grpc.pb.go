// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.22.2
// source: shopping-checkout/shopping-checkout-business.proto

package shoppingcheckoutpb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	ShoppingCheckoutBusinessService_GetCheckoutDeliveryMethodsV1_FullMethodName = "/shoppingcheckoutpb.ShoppingCheckoutBusinessService/GetCheckoutDeliveryMethodsV1"
	ShoppingCheckoutBusinessService_GetCheckoutPaymentMethodsV1_FullMethodName  = "/shoppingcheckoutpb.ShoppingCheckoutBusinessService/GetCheckoutPaymentMethodsV1"
	ShoppingCheckoutBusinessService_GetItemPricesV1_FullMethodName              = "/shoppingcheckoutpb.ShoppingCheckoutBusinessService/GetItemPricesV1"
	ShoppingCheckoutBusinessService_GetMakePaymentInfoV1_FullMethodName         = "/shoppingcheckoutpb.ShoppingCheckoutBusinessService/GetMakePaymentInfoV1"
	ShoppingCheckoutBusinessService_GroupItemsV1_FullMethodName                 = "/shoppingcheckoutpb.ShoppingCheckoutBusinessService/GroupItemsV1"
	ShoppingCheckoutBusinessService_PerformCheckoutV1_FullMethodName            = "/shoppingcheckoutpb.ShoppingCheckoutBusinessService/PerformCheckoutV1"
	ShoppingCheckoutBusinessService_PrepareCheckoutV1_FullMethodName            = "/shoppingcheckoutpb.ShoppingCheckoutBusinessService/PrepareCheckoutV1"
)

// ShoppingCheckoutBusinessServiceClient is the client API for ShoppingCheckoutBusinessService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ShoppingCheckoutBusinessServiceClient interface {
	GetCheckoutDeliveryMethodsV1(ctx context.Context, in *GetCheckoutDeliveryMethodsV1Request, opts ...grpc.CallOption) (*GetCheckoutDeliveryMethodsV1Response, error)
	GetCheckoutPaymentMethodsV1(ctx context.Context, in *GetCheckoutPaymentMethodsV1Request, opts ...grpc.CallOption) (*GetCheckoutPaymentMethodsV1Response, error)
	GetItemPricesV1(ctx context.Context, in *GetItemPricesV1Request, opts ...grpc.CallOption) (*GetItemPricesV1Response, error)
	GetMakePaymentInfoV1(ctx context.Context, in *GetMakePaymentInfoV1Request, opts ...grpc.CallOption) (*GetMakePaymentInfoV1Response, error)
	GroupItemsV1(ctx context.Context, in *GroupItemsV1Request, opts ...grpc.CallOption) (*GroupItemsV1Response, error)
	PerformCheckoutV1(ctx context.Context, in *PerformCheckoutV1Request, opts ...grpc.CallOption) (*PerformCheckoutV1Response, error)
	PrepareCheckoutV1(ctx context.Context, in *PrepareCheckoutV1Request, opts ...grpc.CallOption) (*PrepareCheckoutV1Response, error)
}

type shoppingCheckoutBusinessServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewShoppingCheckoutBusinessServiceClient(cc grpc.ClientConnInterface) ShoppingCheckoutBusinessServiceClient {
	return &shoppingCheckoutBusinessServiceClient{cc}
}

func (c *shoppingCheckoutBusinessServiceClient) GetCheckoutDeliveryMethodsV1(ctx context.Context, in *GetCheckoutDeliveryMethodsV1Request, opts ...grpc.CallOption) (*GetCheckoutDeliveryMethodsV1Response, error) {
	out := new(GetCheckoutDeliveryMethodsV1Response)
	err := c.cc.Invoke(ctx, ShoppingCheckoutBusinessService_GetCheckoutDeliveryMethodsV1_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shoppingCheckoutBusinessServiceClient) GetCheckoutPaymentMethodsV1(ctx context.Context, in *GetCheckoutPaymentMethodsV1Request, opts ...grpc.CallOption) (*GetCheckoutPaymentMethodsV1Response, error) {
	out := new(GetCheckoutPaymentMethodsV1Response)
	err := c.cc.Invoke(ctx, ShoppingCheckoutBusinessService_GetCheckoutPaymentMethodsV1_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shoppingCheckoutBusinessServiceClient) GetItemPricesV1(ctx context.Context, in *GetItemPricesV1Request, opts ...grpc.CallOption) (*GetItemPricesV1Response, error) {
	out := new(GetItemPricesV1Response)
	err := c.cc.Invoke(ctx, ShoppingCheckoutBusinessService_GetItemPricesV1_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shoppingCheckoutBusinessServiceClient) GetMakePaymentInfoV1(ctx context.Context, in *GetMakePaymentInfoV1Request, opts ...grpc.CallOption) (*GetMakePaymentInfoV1Response, error) {
	out := new(GetMakePaymentInfoV1Response)
	err := c.cc.Invoke(ctx, ShoppingCheckoutBusinessService_GetMakePaymentInfoV1_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shoppingCheckoutBusinessServiceClient) GroupItemsV1(ctx context.Context, in *GroupItemsV1Request, opts ...grpc.CallOption) (*GroupItemsV1Response, error) {
	out := new(GroupItemsV1Response)
	err := c.cc.Invoke(ctx, ShoppingCheckoutBusinessService_GroupItemsV1_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shoppingCheckoutBusinessServiceClient) PerformCheckoutV1(ctx context.Context, in *PerformCheckoutV1Request, opts ...grpc.CallOption) (*PerformCheckoutV1Response, error) {
	out := new(PerformCheckoutV1Response)
	err := c.cc.Invoke(ctx, ShoppingCheckoutBusinessService_PerformCheckoutV1_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shoppingCheckoutBusinessServiceClient) PrepareCheckoutV1(ctx context.Context, in *PrepareCheckoutV1Request, opts ...grpc.CallOption) (*PrepareCheckoutV1Response, error) {
	out := new(PrepareCheckoutV1Response)
	err := c.cc.Invoke(ctx, ShoppingCheckoutBusinessService_PrepareCheckoutV1_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ShoppingCheckoutBusinessServiceServer is the server API for ShoppingCheckoutBusinessService service.
// All implementations must embed UnimplementedShoppingCheckoutBusinessServiceServer
// for forward compatibility
type ShoppingCheckoutBusinessServiceServer interface {
	GetCheckoutDeliveryMethodsV1(context.Context, *GetCheckoutDeliveryMethodsV1Request) (*GetCheckoutDeliveryMethodsV1Response, error)
	GetCheckoutPaymentMethodsV1(context.Context, *GetCheckoutPaymentMethodsV1Request) (*GetCheckoutPaymentMethodsV1Response, error)
	GetItemPricesV1(context.Context, *GetItemPricesV1Request) (*GetItemPricesV1Response, error)
	GetMakePaymentInfoV1(context.Context, *GetMakePaymentInfoV1Request) (*GetMakePaymentInfoV1Response, error)
	GroupItemsV1(context.Context, *GroupItemsV1Request) (*GroupItemsV1Response, error)
	PerformCheckoutV1(context.Context, *PerformCheckoutV1Request) (*PerformCheckoutV1Response, error)
	PrepareCheckoutV1(context.Context, *PrepareCheckoutV1Request) (*PrepareCheckoutV1Response, error)
	mustEmbedUnimplementedShoppingCheckoutBusinessServiceServer()
}

// UnimplementedShoppingCheckoutBusinessServiceServer must be embedded to have forward compatible implementations.
type UnimplementedShoppingCheckoutBusinessServiceServer struct {
}

func (UnimplementedShoppingCheckoutBusinessServiceServer) GetCheckoutDeliveryMethodsV1(context.Context, *GetCheckoutDeliveryMethodsV1Request) (*GetCheckoutDeliveryMethodsV1Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCheckoutDeliveryMethodsV1 not implemented")
}
func (UnimplementedShoppingCheckoutBusinessServiceServer) GetCheckoutPaymentMethodsV1(context.Context, *GetCheckoutPaymentMethodsV1Request) (*GetCheckoutPaymentMethodsV1Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCheckoutPaymentMethodsV1 not implemented")
}
func (UnimplementedShoppingCheckoutBusinessServiceServer) GetItemPricesV1(context.Context, *GetItemPricesV1Request) (*GetItemPricesV1Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetItemPricesV1 not implemented")
}
func (UnimplementedShoppingCheckoutBusinessServiceServer) GetMakePaymentInfoV1(context.Context, *GetMakePaymentInfoV1Request) (*GetMakePaymentInfoV1Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMakePaymentInfoV1 not implemented")
}
func (UnimplementedShoppingCheckoutBusinessServiceServer) GroupItemsV1(context.Context, *GroupItemsV1Request) (*GroupItemsV1Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GroupItemsV1 not implemented")
}
func (UnimplementedShoppingCheckoutBusinessServiceServer) PerformCheckoutV1(context.Context, *PerformCheckoutV1Request) (*PerformCheckoutV1Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PerformCheckoutV1 not implemented")
}
func (UnimplementedShoppingCheckoutBusinessServiceServer) PrepareCheckoutV1(context.Context, *PrepareCheckoutV1Request) (*PrepareCheckoutV1Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PrepareCheckoutV1 not implemented")
}
func (UnimplementedShoppingCheckoutBusinessServiceServer) mustEmbedUnimplementedShoppingCheckoutBusinessServiceServer() {
}

// UnsafeShoppingCheckoutBusinessServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ShoppingCheckoutBusinessServiceServer will
// result in compilation errors.
type UnsafeShoppingCheckoutBusinessServiceServer interface {
	mustEmbedUnimplementedShoppingCheckoutBusinessServiceServer()
}

func RegisterShoppingCheckoutBusinessServiceServer(s grpc.ServiceRegistrar, srv ShoppingCheckoutBusinessServiceServer) {
	s.RegisterService(&ShoppingCheckoutBusinessService_ServiceDesc, srv)
}

func _ShoppingCheckoutBusinessService_GetCheckoutDeliveryMethodsV1_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCheckoutDeliveryMethodsV1Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShoppingCheckoutBusinessServiceServer).GetCheckoutDeliveryMethodsV1(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ShoppingCheckoutBusinessService_GetCheckoutDeliveryMethodsV1_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShoppingCheckoutBusinessServiceServer).GetCheckoutDeliveryMethodsV1(ctx, req.(*GetCheckoutDeliveryMethodsV1Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _ShoppingCheckoutBusinessService_GetCheckoutPaymentMethodsV1_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCheckoutPaymentMethodsV1Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShoppingCheckoutBusinessServiceServer).GetCheckoutPaymentMethodsV1(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ShoppingCheckoutBusinessService_GetCheckoutPaymentMethodsV1_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShoppingCheckoutBusinessServiceServer).GetCheckoutPaymentMethodsV1(ctx, req.(*GetCheckoutPaymentMethodsV1Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _ShoppingCheckoutBusinessService_GetItemPricesV1_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetItemPricesV1Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShoppingCheckoutBusinessServiceServer).GetItemPricesV1(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ShoppingCheckoutBusinessService_GetItemPricesV1_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShoppingCheckoutBusinessServiceServer).GetItemPricesV1(ctx, req.(*GetItemPricesV1Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _ShoppingCheckoutBusinessService_GetMakePaymentInfoV1_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMakePaymentInfoV1Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShoppingCheckoutBusinessServiceServer).GetMakePaymentInfoV1(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ShoppingCheckoutBusinessService_GetMakePaymentInfoV1_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShoppingCheckoutBusinessServiceServer).GetMakePaymentInfoV1(ctx, req.(*GetMakePaymentInfoV1Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _ShoppingCheckoutBusinessService_GroupItemsV1_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GroupItemsV1Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShoppingCheckoutBusinessServiceServer).GroupItemsV1(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ShoppingCheckoutBusinessService_GroupItemsV1_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShoppingCheckoutBusinessServiceServer).GroupItemsV1(ctx, req.(*GroupItemsV1Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _ShoppingCheckoutBusinessService_PerformCheckoutV1_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PerformCheckoutV1Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShoppingCheckoutBusinessServiceServer).PerformCheckoutV1(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ShoppingCheckoutBusinessService_PerformCheckoutV1_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShoppingCheckoutBusinessServiceServer).PerformCheckoutV1(ctx, req.(*PerformCheckoutV1Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _ShoppingCheckoutBusinessService_PrepareCheckoutV1_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PrepareCheckoutV1Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShoppingCheckoutBusinessServiceServer).PrepareCheckoutV1(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ShoppingCheckoutBusinessService_PrepareCheckoutV1_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShoppingCheckoutBusinessServiceServer).PrepareCheckoutV1(ctx, req.(*PrepareCheckoutV1Request))
	}
	return interceptor(ctx, in, info, handler)
}

// ShoppingCheckoutBusinessService_ServiceDesc is the grpc.ServiceDesc for ShoppingCheckoutBusinessService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ShoppingCheckoutBusinessService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "shoppingcheckoutpb.ShoppingCheckoutBusinessService",
	HandlerType: (*ShoppingCheckoutBusinessServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetCheckoutDeliveryMethodsV1",
			Handler:    _ShoppingCheckoutBusinessService_GetCheckoutDeliveryMethodsV1_Handler,
		},
		{
			MethodName: "GetCheckoutPaymentMethodsV1",
			Handler:    _ShoppingCheckoutBusinessService_GetCheckoutPaymentMethodsV1_Handler,
		},
		{
			MethodName: "GetItemPricesV1",
			Handler:    _ShoppingCheckoutBusinessService_GetItemPricesV1_Handler,
		},
		{
			MethodName: "GetMakePaymentInfoV1",
			Handler:    _ShoppingCheckoutBusinessService_GetMakePaymentInfoV1_Handler,
		},
		{
			MethodName: "GroupItemsV1",
			Handler:    _ShoppingCheckoutBusinessService_GroupItemsV1_Handler,
		},
		{
			MethodName: "PerformCheckoutV1",
			Handler:    _ShoppingCheckoutBusinessService_PerformCheckoutV1_Handler,
		},
		{
			MethodName: "PrepareCheckoutV1",
			Handler:    _ShoppingCheckoutBusinessService_PrepareCheckoutV1_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "shopping-checkout/shopping-checkout-business.proto",
}
