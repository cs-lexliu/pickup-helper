// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.22.2
// source: OrderManager/OrderManager.proto

package ordermanagerpb

import (
	context "context"
	messaging_proto "github.com/carousell/messaging/messaging/messaging_proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	OrderManager_GetOrders_FullMethodName                   = "/ordermanagerpb.OrderManager/GetOrders"
	OrderManager_CreateOrder_FullMethodName                 = "/ordermanagerpb.OrderManager/CreateOrder"
	OrderManager_CancelOrder_FullMethodName                 = "/ordermanagerpb.OrderManager/CancelOrder"
	OrderManager_ScheduleMeetup_FullMethodName              = "/ordermanagerpb.OrderManager/ScheduleMeetup"
	OrderManager_FinishOrder_FullMethodName                 = "/ordermanagerpb.OrderManager/FinishOrder"
	OrderManager_ReceiveMessage_FullMethodName              = "/ordermanagerpb.OrderManager/ReceiveMessage"
	OrderManager_NotifyDisputeRequestCreated_FullMethodName = "/ordermanagerpb.OrderManager/NotifyDisputeRequestCreated"
	OrderManager_NotifyDisputeRequestClosed_FullMethodName  = "/ordermanagerpb.OrderManager/NotifyDisputeRequestClosed"
	OrderManager_StartD2DDelivery_FullMethodName            = "/ordermanagerpb.OrderManager/StartD2DDelivery"
)

// OrderManagerClient is the client API for OrderManager service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type OrderManagerClient interface {
	GetOrders(ctx context.Context, in *GetOrdersRequest, opts ...grpc.CallOption) (*GetOrdersResponse, error)
	CreateOrder(ctx context.Context, in *CreateOrderRequest, opts ...grpc.CallOption) (*CreateOrderResponse, error)
	CancelOrder(ctx context.Context, in *CancelOrderRequest, opts ...grpc.CallOption) (*CancelOrderResponse, error)
	ScheduleMeetup(ctx context.Context, in *ScheduleMeetupRequest, opts ...grpc.CallOption) (*ScheduleMeetupResponse, error)
	FinishOrder(ctx context.Context, in *FinishOrderRequest, opts ...grpc.CallOption) (*FinishOrderResponse, error)
	ReceiveMessage(ctx context.Context, in *messaging_proto.MessageRequest, opts ...grpc.CallOption) (*messaging_proto.MessageResponse, error)
	NotifyDisputeRequestCreated(ctx context.Context, in *NotifyDisputeRequestCreatedRequest, opts ...grpc.CallOption) (*NotifyDisputeRequestCreatedResponse, error)
	NotifyDisputeRequestClosed(ctx context.Context, in *NotifyDisputeRequestClosedRequest, opts ...grpc.CallOption) (*NotifyDisputeRequestClosedResponse, error)
	StartD2DDelivery(ctx context.Context, in *StartD2DDeliveryRequest, opts ...grpc.CallOption) (*StartD2DDeliveryResponse, error)
}

type orderManagerClient struct {
	cc grpc.ClientConnInterface
}

func NewOrderManagerClient(cc grpc.ClientConnInterface) OrderManagerClient {
	return &orderManagerClient{cc}
}

func (c *orderManagerClient) GetOrders(ctx context.Context, in *GetOrdersRequest, opts ...grpc.CallOption) (*GetOrdersResponse, error) {
	out := new(GetOrdersResponse)
	err := c.cc.Invoke(ctx, OrderManager_GetOrders_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderManagerClient) CreateOrder(ctx context.Context, in *CreateOrderRequest, opts ...grpc.CallOption) (*CreateOrderResponse, error) {
	out := new(CreateOrderResponse)
	err := c.cc.Invoke(ctx, OrderManager_CreateOrder_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderManagerClient) CancelOrder(ctx context.Context, in *CancelOrderRequest, opts ...grpc.CallOption) (*CancelOrderResponse, error) {
	out := new(CancelOrderResponse)
	err := c.cc.Invoke(ctx, OrderManager_CancelOrder_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderManagerClient) ScheduleMeetup(ctx context.Context, in *ScheduleMeetupRequest, opts ...grpc.CallOption) (*ScheduleMeetupResponse, error) {
	out := new(ScheduleMeetupResponse)
	err := c.cc.Invoke(ctx, OrderManager_ScheduleMeetup_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderManagerClient) FinishOrder(ctx context.Context, in *FinishOrderRequest, opts ...grpc.CallOption) (*FinishOrderResponse, error) {
	out := new(FinishOrderResponse)
	err := c.cc.Invoke(ctx, OrderManager_FinishOrder_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderManagerClient) ReceiveMessage(ctx context.Context, in *messaging_proto.MessageRequest, opts ...grpc.CallOption) (*messaging_proto.MessageResponse, error) {
	out := new(messaging_proto.MessageResponse)
	err := c.cc.Invoke(ctx, OrderManager_ReceiveMessage_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderManagerClient) NotifyDisputeRequestCreated(ctx context.Context, in *NotifyDisputeRequestCreatedRequest, opts ...grpc.CallOption) (*NotifyDisputeRequestCreatedResponse, error) {
	out := new(NotifyDisputeRequestCreatedResponse)
	err := c.cc.Invoke(ctx, OrderManager_NotifyDisputeRequestCreated_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderManagerClient) NotifyDisputeRequestClosed(ctx context.Context, in *NotifyDisputeRequestClosedRequest, opts ...grpc.CallOption) (*NotifyDisputeRequestClosedResponse, error) {
	out := new(NotifyDisputeRequestClosedResponse)
	err := c.cc.Invoke(ctx, OrderManager_NotifyDisputeRequestClosed_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderManagerClient) StartD2DDelivery(ctx context.Context, in *StartD2DDeliveryRequest, opts ...grpc.CallOption) (*StartD2DDeliveryResponse, error) {
	out := new(StartD2DDeliveryResponse)
	err := c.cc.Invoke(ctx, OrderManager_StartD2DDelivery_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// OrderManagerServer is the server API for OrderManager service.
// All implementations must embed UnimplementedOrderManagerServer
// for forward compatibility
type OrderManagerServer interface {
	GetOrders(context.Context, *GetOrdersRequest) (*GetOrdersResponse, error)
	CreateOrder(context.Context, *CreateOrderRequest) (*CreateOrderResponse, error)
	CancelOrder(context.Context, *CancelOrderRequest) (*CancelOrderResponse, error)
	ScheduleMeetup(context.Context, *ScheduleMeetupRequest) (*ScheduleMeetupResponse, error)
	FinishOrder(context.Context, *FinishOrderRequest) (*FinishOrderResponse, error)
	ReceiveMessage(context.Context, *messaging_proto.MessageRequest) (*messaging_proto.MessageResponse, error)
	NotifyDisputeRequestCreated(context.Context, *NotifyDisputeRequestCreatedRequest) (*NotifyDisputeRequestCreatedResponse, error)
	NotifyDisputeRequestClosed(context.Context, *NotifyDisputeRequestClosedRequest) (*NotifyDisputeRequestClosedResponse, error)
	StartD2DDelivery(context.Context, *StartD2DDeliveryRequest) (*StartD2DDeliveryResponse, error)
	mustEmbedUnimplementedOrderManagerServer()
}

// UnimplementedOrderManagerServer must be embedded to have forward compatible implementations.
type UnimplementedOrderManagerServer struct {
}

func (UnimplementedOrderManagerServer) GetOrders(context.Context, *GetOrdersRequest) (*GetOrdersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOrders not implemented")
}
func (UnimplementedOrderManagerServer) CreateOrder(context.Context, *CreateOrderRequest) (*CreateOrderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateOrder not implemented")
}
func (UnimplementedOrderManagerServer) CancelOrder(context.Context, *CancelOrderRequest) (*CancelOrderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CancelOrder not implemented")
}
func (UnimplementedOrderManagerServer) ScheduleMeetup(context.Context, *ScheduleMeetupRequest) (*ScheduleMeetupResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ScheduleMeetup not implemented")
}
func (UnimplementedOrderManagerServer) FinishOrder(context.Context, *FinishOrderRequest) (*FinishOrderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FinishOrder not implemented")
}
func (UnimplementedOrderManagerServer) ReceiveMessage(context.Context, *messaging_proto.MessageRequest) (*messaging_proto.MessageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReceiveMessage not implemented")
}
func (UnimplementedOrderManagerServer) NotifyDisputeRequestCreated(context.Context, *NotifyDisputeRequestCreatedRequest) (*NotifyDisputeRequestCreatedResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NotifyDisputeRequestCreated not implemented")
}
func (UnimplementedOrderManagerServer) NotifyDisputeRequestClosed(context.Context, *NotifyDisputeRequestClosedRequest) (*NotifyDisputeRequestClosedResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NotifyDisputeRequestClosed not implemented")
}
func (UnimplementedOrderManagerServer) StartD2DDelivery(context.Context, *StartD2DDeliveryRequest) (*StartD2DDeliveryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StartD2DDelivery not implemented")
}
func (UnimplementedOrderManagerServer) mustEmbedUnimplementedOrderManagerServer() {}

// UnsafeOrderManagerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to OrderManagerServer will
// result in compilation errors.
type UnsafeOrderManagerServer interface {
	mustEmbedUnimplementedOrderManagerServer()
}

func RegisterOrderManagerServer(s grpc.ServiceRegistrar, srv OrderManagerServer) {
	s.RegisterService(&OrderManager_ServiceDesc, srv)
}

func _OrderManager_GetOrders_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetOrdersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderManagerServer).GetOrders(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OrderManager_GetOrders_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderManagerServer).GetOrders(ctx, req.(*GetOrdersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrderManager_CreateOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateOrderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderManagerServer).CreateOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OrderManager_CreateOrder_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderManagerServer).CreateOrder(ctx, req.(*CreateOrderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrderManager_CancelOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CancelOrderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderManagerServer).CancelOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OrderManager_CancelOrder_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderManagerServer).CancelOrder(ctx, req.(*CancelOrderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrderManager_ScheduleMeetup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ScheduleMeetupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderManagerServer).ScheduleMeetup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OrderManager_ScheduleMeetup_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderManagerServer).ScheduleMeetup(ctx, req.(*ScheduleMeetupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrderManager_FinishOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FinishOrderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderManagerServer).FinishOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OrderManager_FinishOrder_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderManagerServer).FinishOrder(ctx, req.(*FinishOrderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrderManager_ReceiveMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(messaging_proto.MessageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderManagerServer).ReceiveMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OrderManager_ReceiveMessage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderManagerServer).ReceiveMessage(ctx, req.(*messaging_proto.MessageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrderManager_NotifyDisputeRequestCreated_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NotifyDisputeRequestCreatedRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderManagerServer).NotifyDisputeRequestCreated(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OrderManager_NotifyDisputeRequestCreated_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderManagerServer).NotifyDisputeRequestCreated(ctx, req.(*NotifyDisputeRequestCreatedRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrderManager_NotifyDisputeRequestClosed_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NotifyDisputeRequestClosedRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderManagerServer).NotifyDisputeRequestClosed(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OrderManager_NotifyDisputeRequestClosed_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderManagerServer).NotifyDisputeRequestClosed(ctx, req.(*NotifyDisputeRequestClosedRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrderManager_StartD2DDelivery_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StartD2DDeliveryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderManagerServer).StartD2DDelivery(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OrderManager_StartD2DDelivery_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderManagerServer).StartD2DDelivery(ctx, req.(*StartD2DDeliveryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// OrderManager_ServiceDesc is the grpc.ServiceDesc for OrderManager service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var OrderManager_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "ordermanagerpb.OrderManager",
	HandlerType: (*OrderManagerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetOrders",
			Handler:    _OrderManager_GetOrders_Handler,
		},
		{
			MethodName: "CreateOrder",
			Handler:    _OrderManager_CreateOrder_Handler,
		},
		{
			MethodName: "CancelOrder",
			Handler:    _OrderManager_CancelOrder_Handler,
		},
		{
			MethodName: "ScheduleMeetup",
			Handler:    _OrderManager_ScheduleMeetup_Handler,
		},
		{
			MethodName: "FinishOrder",
			Handler:    _OrderManager_FinishOrder_Handler,
		},
		{
			MethodName: "ReceiveMessage",
			Handler:    _OrderManager_ReceiveMessage_Handler,
		},
		{
			MethodName: "NotifyDisputeRequestCreated",
			Handler:    _OrderManager_NotifyDisputeRequestCreated_Handler,
		},
		{
			MethodName: "NotifyDisputeRequestClosed",
			Handler:    _OrderManager_NotifyDisputeRequestClosed_Handler,
		},
		{
			MethodName: "StartD2DDelivery",
			Handler:    _OrderManager_StartD2DDelivery_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "OrderManager/OrderManager.proto",
}
