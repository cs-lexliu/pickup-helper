// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.30.0
// 	protoc        v4.22.2
// source: OrderManager/OrderManager.proto

package ordermanagerpb

import (
	messaging_proto "github.com/carousell/messaging/messaging/messaging_proto"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	wrapperspb "google.golang.org/protobuf/types/known/wrapperspb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type OrderType int32

const (
	// Deprecated: Marked as deprecated in OrderManager/OrderManager.proto.
	OrderType_UNSPECIFIED OrderType = 0
	// Deprecated: Marked as deprecated in OrderManager/OrderManager.proto.
	OrderType_ORDER_TYPE_AP OrderType = 1
	// Deprecated: Marked as deprecated in OrderManager/OrderManager.proto.
	OrderType_ORDER_TYPE_BP OrderType = 2
)

// Enum value maps for OrderType.
var (
	OrderType_name = map[int32]string{
		0: "UNSPECIFIED",
		1: "ORDER_TYPE_AP",
		2: "ORDER_TYPE_BP",
	}
	OrderType_value = map[string]int32{
		"UNSPECIFIED":   0,
		"ORDER_TYPE_AP": 1,
		"ORDER_TYPE_BP": 2,
	}
)

func (x OrderType) Enum() *OrderType {
	p := new(OrderType)
	*p = x
	return p
}

func (x OrderType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OrderType) Descriptor() protoreflect.EnumDescriptor {
	return file_OrderManager_OrderManager_proto_enumTypes[0].Descriptor()
}

func (OrderType) Type() protoreflect.EnumType {
	return &file_OrderManager_OrderManager_proto_enumTypes[0]
}

func (x OrderType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use OrderType.Descriptor instead.
func (OrderType) EnumDescriptor() ([]byte, []int) {
	return file_OrderManager_OrderManager_proto_rawDescGZIP(), []int{0}
}

type CancelledReason int32

const (
	CancelledReason_CANCELLED_REASON_UNSPECIFIED                  CancelledReason = 0
	CancelledReason_CANCELLED_REASON_BUYER_ALT_PRODUCT            CancelledReason = 1
	CancelledReason_CANCELLED_REASON_BUYER_WAIT_TIME              CancelledReason = 2
	CancelledReason_CANCELLED_REASON_BUYER_MULTIPLE_ITEMS         CancelledReason = 3
	CancelledReason_CANCELLED_REASON_BUYER_MISTAKE                CancelledReason = 4
	CancelledReason_CANCELLED_REASON_BOTH_NOT_SURE                CancelledReason = 5
	CancelledReason_CANCELLED_REASON_BOTH_OTHERS                  CancelledReason = 6
	CancelledReason_CANCELLED_REASON_SELLER_CHANGED_MIND          CancelledReason = 7
	CancelledReason_CANCELLED_REASON_SELLER_MISQUOTED             CancelledReason = 8
	CancelledReason_CANCELLED_REASON_SELLER_OUT_OF_STOCK          CancelledReason = 9
	CancelledReason_CANCELLED_REASON_SELLER_ITEM_DAMAGED          CancelledReason = 10
	CancelledReason_CANCELLED_REASON_BOTH_NOT_SURE_PAYMENT        CancelledReason = 11
	CancelledReason_CANCELLED_REASON_BOTH_NOT_SURE_SHIPPING       CancelledReason = 12
	CancelledReason_CANCELLED_REASON_SELLER_ASK_TO_CANCEL         CancelledReason = 13
	CancelledReason_CANCELLED_REASON_SYSTEM_DELIVERY_NOT_STARTED  CancelledReason = 14
	CancelledReason_CANCELLED_REASON_SYSTEM_MEET_UP_NOT_SCHEDULED CancelledReason = 15
	CancelledReason_CANCELLED_REASON_SYSTEM_PICK_UP_FAILED        CancelledReason = 16
)

// Enum value maps for CancelledReason.
var (
	CancelledReason_name = map[int32]string{
		0:  "CANCELLED_REASON_UNSPECIFIED",
		1:  "CANCELLED_REASON_BUYER_ALT_PRODUCT",
		2:  "CANCELLED_REASON_BUYER_WAIT_TIME",
		3:  "CANCELLED_REASON_BUYER_MULTIPLE_ITEMS",
		4:  "CANCELLED_REASON_BUYER_MISTAKE",
		5:  "CANCELLED_REASON_BOTH_NOT_SURE",
		6:  "CANCELLED_REASON_BOTH_OTHERS",
		7:  "CANCELLED_REASON_SELLER_CHANGED_MIND",
		8:  "CANCELLED_REASON_SELLER_MISQUOTED",
		9:  "CANCELLED_REASON_SELLER_OUT_OF_STOCK",
		10: "CANCELLED_REASON_SELLER_ITEM_DAMAGED",
		11: "CANCELLED_REASON_BOTH_NOT_SURE_PAYMENT",
		12: "CANCELLED_REASON_BOTH_NOT_SURE_SHIPPING",
		13: "CANCELLED_REASON_SELLER_ASK_TO_CANCEL",
		14: "CANCELLED_REASON_SYSTEM_DELIVERY_NOT_STARTED",
		15: "CANCELLED_REASON_SYSTEM_MEET_UP_NOT_SCHEDULED",
		16: "CANCELLED_REASON_SYSTEM_PICK_UP_FAILED",
	}
	CancelledReason_value = map[string]int32{
		"CANCELLED_REASON_UNSPECIFIED":                  0,
		"CANCELLED_REASON_BUYER_ALT_PRODUCT":            1,
		"CANCELLED_REASON_BUYER_WAIT_TIME":              2,
		"CANCELLED_REASON_BUYER_MULTIPLE_ITEMS":         3,
		"CANCELLED_REASON_BUYER_MISTAKE":                4,
		"CANCELLED_REASON_BOTH_NOT_SURE":                5,
		"CANCELLED_REASON_BOTH_OTHERS":                  6,
		"CANCELLED_REASON_SELLER_CHANGED_MIND":          7,
		"CANCELLED_REASON_SELLER_MISQUOTED":             8,
		"CANCELLED_REASON_SELLER_OUT_OF_STOCK":          9,
		"CANCELLED_REASON_SELLER_ITEM_DAMAGED":          10,
		"CANCELLED_REASON_BOTH_NOT_SURE_PAYMENT":        11,
		"CANCELLED_REASON_BOTH_NOT_SURE_SHIPPING":       12,
		"CANCELLED_REASON_SELLER_ASK_TO_CANCEL":         13,
		"CANCELLED_REASON_SYSTEM_DELIVERY_NOT_STARTED":  14,
		"CANCELLED_REASON_SYSTEM_MEET_UP_NOT_SCHEDULED": 15,
		"CANCELLED_REASON_SYSTEM_PICK_UP_FAILED":        16,
	}
)

func (x CancelledReason) Enum() *CancelledReason {
	p := new(CancelledReason)
	*p = x
	return p
}

func (x CancelledReason) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CancelledReason) Descriptor() protoreflect.EnumDescriptor {
	return file_OrderManager_OrderManager_proto_enumTypes[1].Descriptor()
}

func (CancelledReason) Type() protoreflect.EnumType {
	return &file_OrderManager_OrderManager_proto_enumTypes[1]
}

func (x CancelledReason) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CancelledReason.Descriptor instead.
func (CancelledReason) EnumDescriptor() ([]byte, []int) {
	return file_OrderManager_OrderManager_proto_rawDescGZIP(), []int{1}
}

type ItemType int32

const (
	ItemType_ITEM_TYPE_UNSPECIFIED ItemType = 0
	ItemType_ITEM_TYPE_IB          ItemType = 1
	ItemType_ITEM_TYPE_CP          ItemType = 2
	ItemType_ITEM_TYPE_BP          ItemType = 3
	ItemType_ITEM_TYPE_AP          ItemType = 4
)

// Enum value maps for ItemType.
var (
	ItemType_name = map[int32]string{
		0: "ITEM_TYPE_UNSPECIFIED",
		1: "ITEM_TYPE_IB",
		2: "ITEM_TYPE_CP",
		3: "ITEM_TYPE_BP",
		4: "ITEM_TYPE_AP",
	}
	ItemType_value = map[string]int32{
		"ITEM_TYPE_UNSPECIFIED": 0,
		"ITEM_TYPE_IB":          1,
		"ITEM_TYPE_CP":          2,
		"ITEM_TYPE_BP":          3,
		"ITEM_TYPE_AP":          4,
	}
)

func (x ItemType) Enum() *ItemType {
	p := new(ItemType)
	*p = x
	return p
}

func (x ItemType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ItemType) Descriptor() protoreflect.EnumDescriptor {
	return file_OrderManager_OrderManager_proto_enumTypes[2].Descriptor()
}

func (ItemType) Type() protoreflect.EnumType {
	return &file_OrderManager_OrderManager_proto_enumTypes[2]
}

func (x ItemType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ItemType.Descriptor instead.
func (ItemType) EnumDescriptor() ([]byte, []int) {
	return file_OrderManager_OrderManager_proto_rawDescGZIP(), []int{2}
}

type LineItemState int32

const (
	LineItemState_LINE_ITEM_STATE_UNSPECIFIED      LineItemState = 0
	LineItemState_LINE_ITEM_STATE_INIT             LineItemState = 1
	LineItemState_LINE_ITEM_STATE_CANCELLED        LineItemState = 2
	LineItemState_LINE_ITEM_STATE_PROCESSING       LineItemState = 3
	LineItemState_LINE_ITEM_STATE_FULFILLED        LineItemState = 4
	LineItemState_LINE_ITEM_STATE_IN_EXCEPTION     LineItemState = 5
	LineItemState_LINE_ITEM_STATE_FINISHED         LineItemState = 6
	LineItemState_LINE_ITEM_STATE_DISPUTE_RESOLVED LineItemState = 7
)

// Enum value maps for LineItemState.
var (
	LineItemState_name = map[int32]string{
		0: "LINE_ITEM_STATE_UNSPECIFIED",
		1: "LINE_ITEM_STATE_INIT",
		2: "LINE_ITEM_STATE_CANCELLED",
		3: "LINE_ITEM_STATE_PROCESSING",
		4: "LINE_ITEM_STATE_FULFILLED",
		5: "LINE_ITEM_STATE_IN_EXCEPTION",
		6: "LINE_ITEM_STATE_FINISHED",
		7: "LINE_ITEM_STATE_DISPUTE_RESOLVED",
	}
	LineItemState_value = map[string]int32{
		"LINE_ITEM_STATE_UNSPECIFIED":      0,
		"LINE_ITEM_STATE_INIT":             1,
		"LINE_ITEM_STATE_CANCELLED":        2,
		"LINE_ITEM_STATE_PROCESSING":       3,
		"LINE_ITEM_STATE_FULFILLED":        4,
		"LINE_ITEM_STATE_IN_EXCEPTION":     5,
		"LINE_ITEM_STATE_FINISHED":         6,
		"LINE_ITEM_STATE_DISPUTE_RESOLVED": 7,
	}
)

func (x LineItemState) Enum() *LineItemState {
	p := new(LineItemState)
	*p = x
	return p
}

func (x LineItemState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (LineItemState) Descriptor() protoreflect.EnumDescriptor {
	return file_OrderManager_OrderManager_proto_enumTypes[3].Descriptor()
}

func (LineItemState) Type() protoreflect.EnumType {
	return &file_OrderManager_OrderManager_proto_enumTypes[3]
}

func (x LineItemState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use LineItemState.Descriptor instead.
func (LineItemState) EnumDescriptor() ([]byte, []int) {
	return file_OrderManager_OrderManager_proto_rawDescGZIP(), []int{3}
}

type FulfillmentOrderState int32

const (
	FulfillmentOrderState_FULFILLMENT_ORDER_STATE_UNSPECIFIED      FulfillmentOrderState = 0
	FulfillmentOrderState_FULFILLMENT_ORDER_STATE_INIT             FulfillmentOrderState = 1
	FulfillmentOrderState_FULFILLMENT_ORDER_STATE_CANCELLED        FulfillmentOrderState = 2
	FulfillmentOrderState_FULFILLMENT_ORDER_STATE_PROCESSING       FulfillmentOrderState = 3
	FulfillmentOrderState_FULFILLMENT_ORDER_STATE_FULFILLED        FulfillmentOrderState = 4
	FulfillmentOrderState_FULFILLMENT_ORDER_STATE_IN_EXCEPTION     FulfillmentOrderState = 5
	FulfillmentOrderState_FULFILLMENT_ORDER_STATE_FINISHED         FulfillmentOrderState = 6
	FulfillmentOrderState_FULFILLMENT_ORDER_STATE_DISPUTE_RESOLVED FulfillmentOrderState = 7
)

// Enum value maps for FulfillmentOrderState.
var (
	FulfillmentOrderState_name = map[int32]string{
		0: "FULFILLMENT_ORDER_STATE_UNSPECIFIED",
		1: "FULFILLMENT_ORDER_STATE_INIT",
		2: "FULFILLMENT_ORDER_STATE_CANCELLED",
		3: "FULFILLMENT_ORDER_STATE_PROCESSING",
		4: "FULFILLMENT_ORDER_STATE_FULFILLED",
		5: "FULFILLMENT_ORDER_STATE_IN_EXCEPTION",
		6: "FULFILLMENT_ORDER_STATE_FINISHED",
		7: "FULFILLMENT_ORDER_STATE_DISPUTE_RESOLVED",
	}
	FulfillmentOrderState_value = map[string]int32{
		"FULFILLMENT_ORDER_STATE_UNSPECIFIED":      0,
		"FULFILLMENT_ORDER_STATE_INIT":             1,
		"FULFILLMENT_ORDER_STATE_CANCELLED":        2,
		"FULFILLMENT_ORDER_STATE_PROCESSING":       3,
		"FULFILLMENT_ORDER_STATE_FULFILLED":        4,
		"FULFILLMENT_ORDER_STATE_IN_EXCEPTION":     5,
		"FULFILLMENT_ORDER_STATE_FINISHED":         6,
		"FULFILLMENT_ORDER_STATE_DISPUTE_RESOLVED": 7,
	}
)

func (x FulfillmentOrderState) Enum() *FulfillmentOrderState {
	p := new(FulfillmentOrderState)
	*p = x
	return p
}

func (x FulfillmentOrderState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (FulfillmentOrderState) Descriptor() protoreflect.EnumDescriptor {
	return file_OrderManager_OrderManager_proto_enumTypes[4].Descriptor()
}

func (FulfillmentOrderState) Type() protoreflect.EnumType {
	return &file_OrderManager_OrderManager_proto_enumTypes[4]
}

func (x FulfillmentOrderState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use FulfillmentOrderState.Descriptor instead.
func (FulfillmentOrderState) EnumDescriptor() ([]byte, []int) {
	return file_OrderManager_OrderManager_proto_rawDescGZIP(), []int{4}
}

type RoleType int32

const (
	RoleType_ROLE_TYPE_UNSPECIFIED RoleType = 0
	RoleType_ROLE_TYPE_SELLER      RoleType = 1
	RoleType_ROLE_TYPE_BUYER       RoleType = 2
	RoleType_ROLE_TYPE_SYSTEM      RoleType = 3
	RoleType_ROLE_TYPE_ADMIN       RoleType = 4
)

// Enum value maps for RoleType.
var (
	RoleType_name = map[int32]string{
		0: "ROLE_TYPE_UNSPECIFIED",
		1: "ROLE_TYPE_SELLER",
		2: "ROLE_TYPE_BUYER",
		3: "ROLE_TYPE_SYSTEM",
		4: "ROLE_TYPE_ADMIN",
	}
	RoleType_value = map[string]int32{
		"ROLE_TYPE_UNSPECIFIED": 0,
		"ROLE_TYPE_SELLER":      1,
		"ROLE_TYPE_BUYER":       2,
		"ROLE_TYPE_SYSTEM":      3,
		"ROLE_TYPE_ADMIN":       4,
	}
)

func (x RoleType) Enum() *RoleType {
	p := new(RoleType)
	*p = x
	return p
}

func (x RoleType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RoleType) Descriptor() protoreflect.EnumDescriptor {
	return file_OrderManager_OrderManager_proto_enumTypes[5].Descriptor()
}

func (RoleType) Type() protoreflect.EnumType {
	return &file_OrderManager_OrderManager_proto_enumTypes[5]
}

func (x RoleType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RoleType.Descriptor instead.
func (RoleType) EnumDescriptor() ([]byte, []int) {
	return file_OrderManager_OrderManager_proto_rawDescGZIP(), []int{5}
}

type FeeNameType int32

const (
	FeeNameType_UNKNOWN_FEE_NAME_TYPE  FeeNameType = 0
	FeeNameType_PLATFORM_FEE           FeeNameType = 1
	FeeNameType_BUYER_PROTECTION_FEE   FeeNameType = 2 // deprycated
	FeeNameType_PAYMENT_PROCESSING_FEE FeeNameType = 3
	FeeNameType_ALL_FEE_NAME_TYPE      FeeNameType = 999
)

// Enum value maps for FeeNameType.
var (
	FeeNameType_name = map[int32]string{
		0:   "UNKNOWN_FEE_NAME_TYPE",
		1:   "PLATFORM_FEE",
		2:   "BUYER_PROTECTION_FEE",
		3:   "PAYMENT_PROCESSING_FEE",
		999: "ALL_FEE_NAME_TYPE",
	}
	FeeNameType_value = map[string]int32{
		"UNKNOWN_FEE_NAME_TYPE":  0,
		"PLATFORM_FEE":           1,
		"BUYER_PROTECTION_FEE":   2,
		"PAYMENT_PROCESSING_FEE": 3,
		"ALL_FEE_NAME_TYPE":      999,
	}
)

func (x FeeNameType) Enum() *FeeNameType {
	p := new(FeeNameType)
	*p = x
	return p
}

func (x FeeNameType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (FeeNameType) Descriptor() protoreflect.EnumDescriptor {
	return file_OrderManager_OrderManager_proto_enumTypes[6].Descriptor()
}

func (FeeNameType) Type() protoreflect.EnumType {
	return &file_OrderManager_OrderManager_proto_enumTypes[6]
}

func (x FeeNameType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use FeeNameType.Descriptor instead.
func (FeeNameType) EnumDescriptor() ([]byte, []int) {
	return file_OrderManager_OrderManager_proto_rawDescGZIP(), []int{6}
}

type FeeValueType int32

const (
	FeeValueType_UNKNOWN_FEE_VALUE_TYPE FeeValueType = 0
	FeeValueType_PERCENTAGE             FeeValueType = 1
	FeeValueType_FLAT                   FeeValueType = 2
)

// Enum value maps for FeeValueType.
var (
	FeeValueType_name = map[int32]string{
		0: "UNKNOWN_FEE_VALUE_TYPE",
		1: "PERCENTAGE",
		2: "FLAT",
	}
	FeeValueType_value = map[string]int32{
		"UNKNOWN_FEE_VALUE_TYPE": 0,
		"PERCENTAGE":             1,
		"FLAT":                   2,
	}
)

func (x FeeValueType) Enum() *FeeValueType {
	p := new(FeeValueType)
	*p = x
	return p
}

func (x FeeValueType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (FeeValueType) Descriptor() protoreflect.EnumDescriptor {
	return file_OrderManager_OrderManager_proto_enumTypes[7].Descriptor()
}

func (FeeValueType) Type() protoreflect.EnumType {
	return &file_OrderManager_OrderManager_proto_enumTypes[7]
}

func (x FeeValueType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use FeeValueType.Descriptor instead.
func (FeeValueType) EnumDescriptor() ([]byte, []int) {
	return file_OrderManager_OrderManager_proto_rawDescGZIP(), []int{7}
}

type DisputeState int32

const (
	DisputeState_DISPUTE_STATE_UNSPECIFIED DisputeState = 0
	DisputeState_DISPUTE_STATE_RESOLVED    DisputeState = 1
	DisputeState_DISPUTE_STATE_CANCELLED   DisputeState = 2
	DisputeState_DISPUTE_STATE_DECLINED    DisputeState = 3
)

// Enum value maps for DisputeState.
var (
	DisputeState_name = map[int32]string{
		0: "DISPUTE_STATE_UNSPECIFIED",
		1: "DISPUTE_STATE_RESOLVED",
		2: "DISPUTE_STATE_CANCELLED",
		3: "DISPUTE_STATE_DECLINED",
	}
	DisputeState_value = map[string]int32{
		"DISPUTE_STATE_UNSPECIFIED": 0,
		"DISPUTE_STATE_RESOLVED":    1,
		"DISPUTE_STATE_CANCELLED":   2,
		"DISPUTE_STATE_DECLINED":    3,
	}
)

func (x DisputeState) Enum() *DisputeState {
	p := new(DisputeState)
	*p = x
	return p
}

func (x DisputeState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DisputeState) Descriptor() protoreflect.EnumDescriptor {
	return file_OrderManager_OrderManager_proto_enumTypes[8].Descriptor()
}

func (DisputeState) Type() protoreflect.EnumType {
	return &file_OrderManager_OrderManager_proto_enumTypes[8]
}

func (x DisputeState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DisputeState.Descriptor instead.
func (DisputeState) EnumDescriptor() ([]byte, []int) {
	return file_OrderManager_OrderManager_proto_rawDescGZIP(), []int{8}
}

type Pagination struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Offset int64 `protobuf:"varint,1,opt,name=offset,proto3" json:"offset,omitempty"`
	Size   int64 `protobuf:"varint,2,opt,name=size,proto3" json:"size,omitempty"`
	Total  int64 `protobuf:"varint,3,opt,name=total,proto3" json:"total,omitempty"`
}

func (x *Pagination) Reset() {
	*x = Pagination{}
	if protoimpl.UnsafeEnabled {
		mi := &file_OrderManager_OrderManager_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Pagination) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Pagination) ProtoMessage() {}

func (x *Pagination) ProtoReflect() protoreflect.Message {
	mi := &file_OrderManager_OrderManager_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Pagination.ProtoReflect.Descriptor instead.
func (*Pagination) Descriptor() ([]byte, []int) {
	return file_OrderManager_OrderManager_proto_rawDescGZIP(), []int{0}
}

func (x *Pagination) GetOffset() int64 {
	if x != nil {
		return x.Offset
	}
	return 0
}

func (x *Pagination) GetSize() int64 {
	if x != nil {
		return x.Size
	}
	return 0
}

func (x *Pagination) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

type PaginationRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Offset int64 `protobuf:"varint,1,opt,name=offset,proto3" json:"offset,omitempty"`
	Size   int64 `protobuf:"varint,2,opt,name=size,proto3" json:"size,omitempty"`
}

func (x *PaginationRequest) Reset() {
	*x = PaginationRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_OrderManager_OrderManager_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PaginationRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PaginationRequest) ProtoMessage() {}

func (x *PaginationRequest) ProtoReflect() protoreflect.Message {
	mi := &file_OrderManager_OrderManager_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PaginationRequest.ProtoReflect.Descriptor instead.
func (*PaginationRequest) Descriptor() ([]byte, []int) {
	return file_OrderManager_OrderManager_proto_rawDescGZIP(), []int{1}
}

func (x *PaginationRequest) GetOffset() int64 {
	if x != nil {
		return x.Offset
	}
	return 0
}

func (x *PaginationRequest) GetSize() int64 {
	if x != nil {
		return x.Size
	}
	return 0
}

type GetOrdersRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Query      *GetOrdersRequest_Query `protobuf:"bytes,1,opt,name=query,proto3" json:"query,omitempty"`
	Pagination *PaginationRequest      `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (x *GetOrdersRequest) Reset() {
	*x = GetOrdersRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_OrderManager_OrderManager_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetOrdersRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetOrdersRequest) ProtoMessage() {}

func (x *GetOrdersRequest) ProtoReflect() protoreflect.Message {
	mi := &file_OrderManager_OrderManager_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetOrdersRequest.ProtoReflect.Descriptor instead.
func (*GetOrdersRequest) Descriptor() ([]byte, []int) {
	return file_OrderManager_OrderManager_proto_rawDescGZIP(), []int{2}
}

func (x *GetOrdersRequest) GetQuery() *GetOrdersRequest_Query {
	if x != nil {
		return x.Query
	}
	return nil
}

func (x *GetOrdersRequest) GetPagination() *PaginationRequest {
	if x != nil {
		return x.Pagination
	}
	return nil
}

type GetOrdersResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Orders     []*FulfillmentOrder `protobuf:"bytes,1,rep,name=orders,proto3" json:"orders,omitempty"`
	Pagination *Pagination         `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (x *GetOrdersResponse) Reset() {
	*x = GetOrdersResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_OrderManager_OrderManager_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetOrdersResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetOrdersResponse) ProtoMessage() {}

func (x *GetOrdersResponse) ProtoReflect() protoreflect.Message {
	mi := &file_OrderManager_OrderManager_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetOrdersResponse.ProtoReflect.Descriptor instead.
func (*GetOrdersResponse) Descriptor() ([]byte, []int) {
	return file_OrderManager_OrderManager_proto_rawDescGZIP(), []int{3}
}

func (x *GetOrdersResponse) GetOrders() []*FulfillmentOrder {
	if x != nil {
		return x.Orders
	}
	return nil
}

func (x *GetOrdersResponse) GetPagination() *Pagination {
	if x != nil {
		return x.Pagination
	}
	return nil
}

type LineItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                 string           `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	ListingId          int64            `protobuf:"varint,2,opt,name=listing_id,json=listingId,proto3" json:"listing_id,omitempty"`
	StrikethroughPrice string           `protobuf:"bytes,3,opt,name=strikethrough_price,json=strikethroughPrice,proto3" json:"strikethrough_price,omitempty"` // original listing price
	ListingPrice       string           `protobuf:"bytes,4,opt,name=listing_price,json=listingPrice,proto3" json:"listing_price,omitempty"`                   // offer price, spc price, or listing price
	WarrantyCoverageId string           `protobuf:"bytes,5,opt,name=warranty_coverage_id,json=warrantyCoverageId,proto3" json:"warranty_coverage_id,omitempty"`
	WarrantyFee        string           `protobuf:"bytes,6,opt,name=warranty_fee,json=warrantyFee,proto3" json:"warranty_fee,omitempty"`
	ItemType           ItemType         `protobuf:"varint,7,opt,name=item_type,json=itemType,proto3,enum=ordermanagerpb.ItemType" json:"item_type,omitempty"`
	State              LineItemState    `protobuf:"varint,8,opt,name=state,proto3,enum=ordermanagerpb.LineItemState" json:"state,omitempty"`
	SellerFees         []*FeeInfo       `protobuf:"bytes,9,rep,name=seller_fees,json=sellerFees,proto3" json:"seller_fees,omitempty"`
	BuyerFees          []*FeeInfo       `protobuf:"bytes,10,rep,name=buyer_fees,json=buyerFees,proto3" json:"buyer_fees,omitempty"`
	ListingSnapshot    *ListingSnapshot `protobuf:"bytes,11,opt,name=listing_snapshot,json=listingSnapshot,proto3" json:"listing_snapshot,omitempty"`
	BuyerChargedAmount string           `protobuf:"bytes,12,opt,name=buyer_charged_amount,json=buyerChargedAmount,proto3" json:"buyer_charged_amount,omitempty"`
}

func (x *LineItem) Reset() {
	*x = LineItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_OrderManager_OrderManager_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LineItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LineItem) ProtoMessage() {}

func (x *LineItem) ProtoReflect() protoreflect.Message {
	mi := &file_OrderManager_OrderManager_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LineItem.ProtoReflect.Descriptor instead.
func (*LineItem) Descriptor() ([]byte, []int) {
	return file_OrderManager_OrderManager_proto_rawDescGZIP(), []int{4}
}

func (x *LineItem) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *LineItem) GetListingId() int64 {
	if x != nil {
		return x.ListingId
	}
	return 0
}

func (x *LineItem) GetStrikethroughPrice() string {
	if x != nil {
		return x.StrikethroughPrice
	}
	return ""
}

func (x *LineItem) GetListingPrice() string {
	if x != nil {
		return x.ListingPrice
	}
	return ""
}

func (x *LineItem) GetWarrantyCoverageId() string {
	if x != nil {
		return x.WarrantyCoverageId
	}
	return ""
}

func (x *LineItem) GetWarrantyFee() string {
	if x != nil {
		return x.WarrantyFee
	}
	return ""
}

func (x *LineItem) GetItemType() ItemType {
	if x != nil {
		return x.ItemType
	}
	return ItemType_ITEM_TYPE_UNSPECIFIED
}

func (x *LineItem) GetState() LineItemState {
	if x != nil {
		return x.State
	}
	return LineItemState_LINE_ITEM_STATE_UNSPECIFIED
}

func (x *LineItem) GetSellerFees() []*FeeInfo {
	if x != nil {
		return x.SellerFees
	}
	return nil
}

func (x *LineItem) GetBuyerFees() []*FeeInfo {
	if x != nil {
		return x.BuyerFees
	}
	return nil
}

func (x *LineItem) GetListingSnapshot() *ListingSnapshot {
	if x != nil {
		return x.ListingSnapshot
	}
	return nil
}

func (x *LineItem) GetBuyerChargedAmount() string {
	if x != nil {
		return x.BuyerChargedAmount
	}
	return ""
}

type ListingSnapshot struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ImageUrl           string `protobuf:"bytes,1,opt,name=image_url,json=imageUrl,proto3" json:"image_url,omitempty"`
	Title              string `protobuf:"bytes,2,opt,name=title,proto3" json:"title,omitempty"`
	CgProductId        string `protobuf:"bytes,3,opt,name=cg_product_id,json=cgProductId,proto3" json:"cg_product_id,omitempty"`
	CgProductVariantId string `protobuf:"bytes,4,opt,name=cg_product_variant_id,json=cgProductVariantId,proto3" json:"cg_product_variant_id,omitempty"`
	LayeredCondition   int32  `protobuf:"varint,5,opt,name=layered_condition,json=layeredCondition,proto3" json:"layered_condition,omitempty"`
	CategoryId         string `protobuf:"bytes,6,opt,name=category_id,json=categoryId,proto3" json:"category_id,omitempty"` // aka ccid
}

func (x *ListingSnapshot) Reset() {
	*x = ListingSnapshot{}
	if protoimpl.UnsafeEnabled {
		mi := &file_OrderManager_OrderManager_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListingSnapshot) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListingSnapshot) ProtoMessage() {}

func (x *ListingSnapshot) ProtoReflect() protoreflect.Message {
	mi := &file_OrderManager_OrderManager_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListingSnapshot.ProtoReflect.Descriptor instead.
func (*ListingSnapshot) Descriptor() ([]byte, []int) {
	return file_OrderManager_OrderManager_proto_rawDescGZIP(), []int{5}
}

func (x *ListingSnapshot) GetImageUrl() string {
	if x != nil {
		return x.ImageUrl
	}
	return ""
}

func (x *ListingSnapshot) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *ListingSnapshot) GetCgProductId() string {
	if x != nil {
		return x.CgProductId
	}
	return ""
}

func (x *ListingSnapshot) GetCgProductVariantId() string {
	if x != nil {
		return x.CgProductVariantId
	}
	return ""
}

func (x *ListingSnapshot) GetLayeredCondition() int32 {
	if x != nil {
		return x.LayeredCondition
	}
	return 0
}

func (x *ListingSnapshot) GetCategoryId() string {
	if x != nil {
		return x.CategoryId
	}
	return ""
}

type CreateOrderRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CheckoutId         string          `protobuf:"bytes,1,opt,name=checkout_id,json=checkoutId,proto3" json:"checkout_id,omitempty"`
	FulfillmentOrderId string          `protobuf:"bytes,2,opt,name=fulfillment_order_id,json=fulfillmentOrderId,proto3" json:"fulfillment_order_id,omitempty"`
	PaymentId          string          `protobuf:"bytes,3,opt,name=payment_id,json=paymentId,proto3" json:"payment_id,omitempty"` // for M1, the capture payment responsibility is on OM
	SellerId           int64           `protobuf:"varint,4,opt,name=seller_id,json=sellerId,proto3" json:"seller_id,omitempty"`
	BuyerId            int64           `protobuf:"varint,5,opt,name=buyer_id,json=buyerId,proto3" json:"buyer_id,omitempty"`
	CountryId          string          `protobuf:"bytes,6,opt,name=country_id,json=countryId,proto3" json:"country_id,omitempty"`
	DeliveryOption     *DeliveryOption `protobuf:"bytes,7,opt,name=delivery_option,json=deliveryOption,proto3" json:"delivery_option,omitempty"`
	LineItems          []*LineItem     `protobuf:"bytes,8,rep,name=line_items,json=lineItems,proto3" json:"line_items,omitempty"`
	DeliveryFee        string          `protobuf:"bytes,9,opt,name=delivery_fee,json=deliveryFee,proto3" json:"delivery_fee,omitempty"`
	SellerDeliveryFee  string          `protobuf:"bytes,10,opt,name=seller_delivery_fee,json=sellerDeliveryFee,proto3" json:"seller_delivery_fee,omitempty"`
	BuyerDeliveryFee   string          `protobuf:"bytes,11,opt,name=buyer_delivery_fee,json=buyerDeliveryFee,proto3" json:"buyer_delivery_fee,omitempty"`
	SellerFees         []*FeeInfo      `protobuf:"bytes,12,rep,name=seller_fees,json=sellerFees,proto3" json:"seller_fees,omitempty"`
	BuyerFees          []*FeeInfo      `protobuf:"bytes,13,rep,name=buyer_fees,json=buyerFees,proto3" json:"buyer_fees,omitempty"`
	Promotions         []*Promotion    `protobuf:"bytes,14,rep,name=promotions,proto3" json:"promotions,omitempty"`
	BuyerChargedAmount string          `protobuf:"bytes,15,opt,name=buyer_charged_amount,json=buyerChargedAmount,proto3" json:"buyer_charged_amount,omitempty"` // coupon to be added
}

func (x *CreateOrderRequest) Reset() {
	*x = CreateOrderRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_OrderManager_OrderManager_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateOrderRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateOrderRequest) ProtoMessage() {}

func (x *CreateOrderRequest) ProtoReflect() protoreflect.Message {
	mi := &file_OrderManager_OrderManager_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateOrderRequest.ProtoReflect.Descriptor instead.
func (*CreateOrderRequest) Descriptor() ([]byte, []int) {
	return file_OrderManager_OrderManager_proto_rawDescGZIP(), []int{6}
}

func (x *CreateOrderRequest) GetCheckoutId() string {
	if x != nil {
		return x.CheckoutId
	}
	return ""
}

func (x *CreateOrderRequest) GetFulfillmentOrderId() string {
	if x != nil {
		return x.FulfillmentOrderId
	}
	return ""
}

func (x *CreateOrderRequest) GetPaymentId() string {
	if x != nil {
		return x.PaymentId
	}
	return ""
}

func (x *CreateOrderRequest) GetSellerId() int64 {
	if x != nil {
		return x.SellerId
	}
	return 0
}

func (x *CreateOrderRequest) GetBuyerId() int64 {
	if x != nil {
		return x.BuyerId
	}
	return 0
}

func (x *CreateOrderRequest) GetCountryId() string {
	if x != nil {
		return x.CountryId
	}
	return ""
}

func (x *CreateOrderRequest) GetDeliveryOption() *DeliveryOption {
	if x != nil {
		return x.DeliveryOption
	}
	return nil
}

func (x *CreateOrderRequest) GetLineItems() []*LineItem {
	if x != nil {
		return x.LineItems
	}
	return nil
}

func (x *CreateOrderRequest) GetDeliveryFee() string {
	if x != nil {
		return x.DeliveryFee
	}
	return ""
}

func (x *CreateOrderRequest) GetSellerDeliveryFee() string {
	if x != nil {
		return x.SellerDeliveryFee
	}
	return ""
}

func (x *CreateOrderRequest) GetBuyerDeliveryFee() string {
	if x != nil {
		return x.BuyerDeliveryFee
	}
	return ""
}

func (x *CreateOrderRequest) GetSellerFees() []*FeeInfo {
	if x != nil {
		return x.SellerFees
	}
	return nil
}

func (x *CreateOrderRequest) GetBuyerFees() []*FeeInfo {
	if x != nil {
		return x.BuyerFees
	}
	return nil
}

func (x *CreateOrderRequest) GetPromotions() []*Promotion {
	if x != nil {
		return x.Promotions
	}
	return nil
}

func (x *CreateOrderRequest) GetBuyerChargedAmount() string {
	if x != nil {
		return x.BuyerChargedAmount
	}
	return ""
}

type CreateOrderResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Order *FulfillmentOrder `protobuf:"bytes,1,opt,name=order,proto3" json:"order,omitempty"` // fulfillment order is equivalent to order in Order Manager
}

func (x *CreateOrderResponse) Reset() {
	*x = CreateOrderResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_OrderManager_OrderManager_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateOrderResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateOrderResponse) ProtoMessage() {}

func (x *CreateOrderResponse) ProtoReflect() protoreflect.Message {
	mi := &file_OrderManager_OrderManager_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateOrderResponse.ProtoReflect.Descriptor instead.
func (*CreateOrderResponse) Descriptor() ([]byte, []int) {
	return file_OrderManager_OrderManager_proto_rawDescGZIP(), []int{7}
}

func (x *CreateOrderResponse) GetOrder() *FulfillmentOrder {
	if x != nil {
		return x.Order
	}
	return nil
}

type CancelOrderRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OrderId       string          `protobuf:"bytes,1,opt,name=order_id,json=orderId,proto3" json:"order_id,omitempty"`
	CancelledById int64           `protobuf:"varint,2,opt,name=cancelled_by_id,json=cancelledById,proto3" json:"cancelled_by_id,omitempty"`
	Reason        CancelledReason `protobuf:"varint,3,opt,name=reason,proto3,enum=ordermanagerpb.CancelledReason" json:"reason,omitempty"`
	Detail        string          `protobuf:"bytes,4,opt,name=detail,proto3" json:"detail,omitempty"`
}

func (x *CancelOrderRequest) Reset() {
	*x = CancelOrderRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_OrderManager_OrderManager_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CancelOrderRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CancelOrderRequest) ProtoMessage() {}

func (x *CancelOrderRequest) ProtoReflect() protoreflect.Message {
	mi := &file_OrderManager_OrderManager_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CancelOrderRequest.ProtoReflect.Descriptor instead.
func (*CancelOrderRequest) Descriptor() ([]byte, []int) {
	return file_OrderManager_OrderManager_proto_rawDescGZIP(), []int{8}
}

func (x *CancelOrderRequest) GetOrderId() string {
	if x != nil {
		return x.OrderId
	}
	return ""
}

func (x *CancelOrderRequest) GetCancelledById() int64 {
	if x != nil {
		return x.CancelledById
	}
	return 0
}

func (x *CancelOrderRequest) GetReason() CancelledReason {
	if x != nil {
		return x.Reason
	}
	return CancelledReason_CANCELLED_REASON_UNSPECIFIED
}

func (x *CancelOrderRequest) GetDetail() string {
	if x != nil {
		return x.Detail
	}
	return ""
}

type CancelOrderResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success bool `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
}

func (x *CancelOrderResponse) Reset() {
	*x = CancelOrderResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_OrderManager_OrderManager_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CancelOrderResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CancelOrderResponse) ProtoMessage() {}

func (x *CancelOrderResponse) ProtoReflect() protoreflect.Message {
	mi := &file_OrderManager_OrderManager_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CancelOrderResponse.ProtoReflect.Descriptor instead.
func (*CancelOrderResponse) Descriptor() ([]byte, []int) {
	return file_OrderManager_OrderManager_proto_rawDescGZIP(), []int{9}
}

func (x *CancelOrderResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

type ScheduleMeetupRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OrderId string `protobuf:"bytes,1,opt,name=order_id,json=orderId,proto3" json:"order_id,omitempty"`
}

func (x *ScheduleMeetupRequest) Reset() {
	*x = ScheduleMeetupRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_OrderManager_OrderManager_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ScheduleMeetupRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ScheduleMeetupRequest) ProtoMessage() {}

func (x *ScheduleMeetupRequest) ProtoReflect() protoreflect.Message {
	mi := &file_OrderManager_OrderManager_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ScheduleMeetupRequest.ProtoReflect.Descriptor instead.
func (*ScheduleMeetupRequest) Descriptor() ([]byte, []int) {
	return file_OrderManager_OrderManager_proto_rawDescGZIP(), []int{10}
}

func (x *ScheduleMeetupRequest) GetOrderId() string {
	if x != nil {
		return x.OrderId
	}
	return ""
}

type ScheduleMeetupResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success bool `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
}

func (x *ScheduleMeetupResponse) Reset() {
	*x = ScheduleMeetupResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_OrderManager_OrderManager_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ScheduleMeetupResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ScheduleMeetupResponse) ProtoMessage() {}

func (x *ScheduleMeetupResponse) ProtoReflect() protoreflect.Message {
	mi := &file_OrderManager_OrderManager_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ScheduleMeetupResponse.ProtoReflect.Descriptor instead.
func (*ScheduleMeetupResponse) Descriptor() ([]byte, []int) {
	return file_OrderManager_OrderManager_proto_rawDescGZIP(), []int{11}
}

func (x *ScheduleMeetupResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

type FinishOrderRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OrderId      string `protobuf:"bytes,1,opt,name=order_id,json=orderId,proto3" json:"order_id,omitempty"`
	FinishedById int64  `protobuf:"varint,2,opt,name=finished_by_id,json=finishedById,proto3" json:"finished_by_id,omitempty"` // the request finish order user_id
}

func (x *FinishOrderRequest) Reset() {
	*x = FinishOrderRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_OrderManager_OrderManager_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FinishOrderRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FinishOrderRequest) ProtoMessage() {}

func (x *FinishOrderRequest) ProtoReflect() protoreflect.Message {
	mi := &file_OrderManager_OrderManager_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FinishOrderRequest.ProtoReflect.Descriptor instead.
func (*FinishOrderRequest) Descriptor() ([]byte, []int) {
	return file_OrderManager_OrderManager_proto_rawDescGZIP(), []int{12}
}

func (x *FinishOrderRequest) GetOrderId() string {
	if x != nil {
		return x.OrderId
	}
	return ""
}

func (x *FinishOrderRequest) GetFinishedById() int64 {
	if x != nil {
		return x.FinishedById
	}
	return 0
}

type FinishOrderResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success bool `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
}

func (x *FinishOrderResponse) Reset() {
	*x = FinishOrderResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_OrderManager_OrderManager_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FinishOrderResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FinishOrderResponse) ProtoMessage() {}

func (x *FinishOrderResponse) ProtoReflect() protoreflect.Message {
	mi := &file_OrderManager_OrderManager_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FinishOrderResponse.ProtoReflect.Descriptor instead.
func (*FinishOrderResponse) Descriptor() ([]byte, []int) {
	return file_OrderManager_OrderManager_proto_rawDescGZIP(), []int{13}
}

func (x *FinishOrderResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

type FulfillmentOrder struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                   string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	CheckoutId           string                 `protobuf:"bytes,2,opt,name=checkout_id,json=checkoutId,proto3" json:"checkout_id,omitempty"`
	PaymentId            string                 `protobuf:"bytes,3,opt,name=payment_id,json=paymentId,proto3" json:"payment_id,omitempty"` // for M1, the capture payment responsibility is on OM
	SellerId             int64                  `protobuf:"varint,6,opt,name=seller_id,json=sellerId,proto3" json:"seller_id,omitempty"`
	BuyerId              int64                  `protobuf:"varint,7,opt,name=buyer_id,json=buyerId,proto3" json:"buyer_id,omitempty"`
	State                FulfillmentOrderState  `protobuf:"varint,8,opt,name=state,proto3,enum=ordermanagerpb.FulfillmentOrderState" json:"state,omitempty"` // to display the state
	CountryId            string                 `protobuf:"bytes,9,opt,name=country_id,json=countryId,proto3" json:"country_id,omitempty"`
	CreatedAt            *timestamppb.Timestamp `protobuf:"bytes,10,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	UpdatedAt            *timestamppb.Timestamp `protobuf:"bytes,11,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
	CancelInfo           *CancelInfo            `protobuf:"bytes,12,opt,name=cancel_info,json=cancelInfo,proto3" json:"cancel_info,omitempty"`
	DeliveryOption       *DeliveryOption        `protobuf:"bytes,13,opt,name=delivery_option,json=deliveryOption,proto3" json:"delivery_option,omitempty"` // please refer to delivery manager
	DeliveryInfos        []*DeliveryInfo        `protobuf:"bytes,14,rep,name=delivery_infos,json=deliveryInfos,proto3" json:"delivery_infos,omitempty"`
	DisputeInfos         []*DisputeInfo         `protobuf:"bytes,15,rep,name=dispute_infos,json=disputeInfos,proto3" json:"dispute_infos,omitempty"`
	LineItems            []*LineItem            `protobuf:"bytes,16,rep,name=line_items,json=lineItems,proto3" json:"line_items,omitempty"`
	DeliveryFee          string                 `protobuf:"bytes,17,opt,name=delivery_fee,json=deliveryFee,proto3" json:"delivery_fee,omitempty"`
	SellerDeliveryFee    string                 `protobuf:"bytes,18,opt,name=seller_delivery_fee,json=sellerDeliveryFee,proto3" json:"seller_delivery_fee,omitempty"`
	BuyerDeliveryFee     string                 `protobuf:"bytes,19,opt,name=buyer_delivery_fee,json=buyerDeliveryFee,proto3" json:"buyer_delivery_fee,omitempty"`
	SellerFees           []*FeeInfo             `protobuf:"bytes,20,rep,name=seller_fees,json=sellerFees,proto3" json:"seller_fees,omitempty"`
	BuyerFees            []*FeeInfo             `protobuf:"bytes,21,rep,name=buyer_fees,json=buyerFees,proto3" json:"buyer_fees,omitempty"`
	Promotions           []*Promotion           `protobuf:"bytes,22,rep,name=promotions,proto3" json:"promotions,omitempty"`
	BuyerChargedAmount   string                 `protobuf:"bytes,23,opt,name=buyer_charged_amount,json=buyerChargedAmount,proto3" json:"buyer_charged_amount,omitempty"`       // final price for buyer before dispute
	SellerTransferAmount string                 `protobuf:"bytes,24,opt,name=seller_transfer_amount,json=sellerTransferAmount,proto3" json:"seller_transfer_amount,omitempty"` // final price for seller before dispute
	AutoCanceledAt       *timestamppb.Timestamp `protobuf:"bytes,25,opt,name=auto_canceled_at,json=autoCanceledAt,proto3" json:"auto_canceled_at,omitempty"`                   // order will be auto canceled by system
	AutoFinishedAt       *timestamppb.Timestamp `protobuf:"bytes,26,opt,name=auto_finished_at,json=autoFinishedAt,proto3" json:"auto_finished_at,omitempty"`                   // order will be auto canceled by system
}

func (x *FulfillmentOrder) Reset() {
	*x = FulfillmentOrder{}
	if protoimpl.UnsafeEnabled {
		mi := &file_OrderManager_OrderManager_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FulfillmentOrder) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FulfillmentOrder) ProtoMessage() {}

func (x *FulfillmentOrder) ProtoReflect() protoreflect.Message {
	mi := &file_OrderManager_OrderManager_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FulfillmentOrder.ProtoReflect.Descriptor instead.
func (*FulfillmentOrder) Descriptor() ([]byte, []int) {
	return file_OrderManager_OrderManager_proto_rawDescGZIP(), []int{14}
}

func (x *FulfillmentOrder) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *FulfillmentOrder) GetCheckoutId() string {
	if x != nil {
		return x.CheckoutId
	}
	return ""
}

func (x *FulfillmentOrder) GetPaymentId() string {
	if x != nil {
		return x.PaymentId
	}
	return ""
}

func (x *FulfillmentOrder) GetSellerId() int64 {
	if x != nil {
		return x.SellerId
	}
	return 0
}

func (x *FulfillmentOrder) GetBuyerId() int64 {
	if x != nil {
		return x.BuyerId
	}
	return 0
}

func (x *FulfillmentOrder) GetState() FulfillmentOrderState {
	if x != nil {
		return x.State
	}
	return FulfillmentOrderState_FULFILLMENT_ORDER_STATE_UNSPECIFIED
}

func (x *FulfillmentOrder) GetCountryId() string {
	if x != nil {
		return x.CountryId
	}
	return ""
}

func (x *FulfillmentOrder) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *FulfillmentOrder) GetUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

func (x *FulfillmentOrder) GetCancelInfo() *CancelInfo {
	if x != nil {
		return x.CancelInfo
	}
	return nil
}

func (x *FulfillmentOrder) GetDeliveryOption() *DeliveryOption {
	if x != nil {
		return x.DeliveryOption
	}
	return nil
}

func (x *FulfillmentOrder) GetDeliveryInfos() []*DeliveryInfo {
	if x != nil {
		return x.DeliveryInfos
	}
	return nil
}

func (x *FulfillmentOrder) GetDisputeInfos() []*DisputeInfo {
	if x != nil {
		return x.DisputeInfos
	}
	return nil
}

func (x *FulfillmentOrder) GetLineItems() []*LineItem {
	if x != nil {
		return x.LineItems
	}
	return nil
}

func (x *FulfillmentOrder) GetDeliveryFee() string {
	if x != nil {
		return x.DeliveryFee
	}
	return ""
}

func (x *FulfillmentOrder) GetSellerDeliveryFee() string {
	if x != nil {
		return x.SellerDeliveryFee
	}
	return ""
}

func (x *FulfillmentOrder) GetBuyerDeliveryFee() string {
	if x != nil {
		return x.BuyerDeliveryFee
	}
	return ""
}

func (x *FulfillmentOrder) GetSellerFees() []*FeeInfo {
	if x != nil {
		return x.SellerFees
	}
	return nil
}

func (x *FulfillmentOrder) GetBuyerFees() []*FeeInfo {
	if x != nil {
		return x.BuyerFees
	}
	return nil
}

func (x *FulfillmentOrder) GetPromotions() []*Promotion {
	if x != nil {
		return x.Promotions
	}
	return nil
}

func (x *FulfillmentOrder) GetBuyerChargedAmount() string {
	if x != nil {
		return x.BuyerChargedAmount
	}
	return ""
}

func (x *FulfillmentOrder) GetSellerTransferAmount() string {
	if x != nil {
		return x.SellerTransferAmount
	}
	return ""
}

func (x *FulfillmentOrder) GetAutoCanceledAt() *timestamppb.Timestamp {
	if x != nil {
		return x.AutoCanceledAt
	}
	return nil
}

func (x *FulfillmentOrder) GetAutoFinishedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.AutoFinishedAt
	}
	return nil
}

// Deprecate this as it will soon be replaced by FulfillmentOrder
type Order struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id              string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	OrderNo         string                 `protobuf:"bytes,2,opt,name=order_no,json=orderNo,proto3" json:"order_no,omitempty"`
	Status          string                 `protobuf:"bytes,3,opt,name=status,proto3" json:"status,omitempty"`
	BuyerId         string                 `protobuf:"bytes,4,opt,name=buyer_id,json=buyerId,proto3" json:"buyer_id,omitempty"`
	SellerId        string                 `protobuf:"bytes,5,opt,name=seller_id,json=sellerId,proto3" json:"seller_id,omitempty"`
	Type            OrderType              `protobuf:"varint,6,opt,name=type,proto3,enum=ordermanagerpb.OrderType" json:"type,omitempty"`
	ChargeAmount    string                 `protobuf:"bytes,7,opt,name=charge_amount,json=chargeAmount,proto3" json:"charge_amount,omitempty"`
	CurrencyCode    string                 `protobuf:"bytes,8,opt,name=currency_code,json=currencyCode,proto3" json:"currency_code,omitempty"`
	CountryId       string                 `protobuf:"bytes,9,opt,name=country_id,json=countryId,proto3" json:"country_id,omitempty"`
	CancelledReason CancelledReason        `protobuf:"varint,10,opt,name=cancelled_reason,json=cancelledReason,proto3,enum=ordermanagerpb.CancelledReason" json:"cancelled_reason,omitempty"`
	CreatedAt       *timestamppb.Timestamp `protobuf:"bytes,11,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	AutoFinishedAt  *timestamppb.Timestamp `protobuf:"bytes,12,opt,name=auto_finished_at,json=autoFinishedAt,proto3" json:"auto_finished_at,omitempty"`
	LineItems       []*LineItem            `protobuf:"bytes,13,rep,name=line_items,json=lineItems,proto3" json:"line_items,omitempty"`
	PaymentIds      []string               `protobuf:"bytes,14,rep,name=payment_ids,json=paymentIds,proto3" json:"payment_ids,omitempty"`
	CheckoutId      string                 `protobuf:"bytes,15,opt,name=checkout_id,json=checkoutId,proto3" json:"checkout_id,omitempty"`
}

func (x *Order) Reset() {
	*x = Order{}
	if protoimpl.UnsafeEnabled {
		mi := &file_OrderManager_OrderManager_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Order) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Order) ProtoMessage() {}

func (x *Order) ProtoReflect() protoreflect.Message {
	mi := &file_OrderManager_OrderManager_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Order.ProtoReflect.Descriptor instead.
func (*Order) Descriptor() ([]byte, []int) {
	return file_OrderManager_OrderManager_proto_rawDescGZIP(), []int{15}
}

func (x *Order) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Order) GetOrderNo() string {
	if x != nil {
		return x.OrderNo
	}
	return ""
}

func (x *Order) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *Order) GetBuyerId() string {
	if x != nil {
		return x.BuyerId
	}
	return ""
}

func (x *Order) GetSellerId() string {
	if x != nil {
		return x.SellerId
	}
	return ""
}

func (x *Order) GetType() OrderType {
	if x != nil {
		return x.Type
	}
	return OrderType_UNSPECIFIED
}

func (x *Order) GetChargeAmount() string {
	if x != nil {
		return x.ChargeAmount
	}
	return ""
}

func (x *Order) GetCurrencyCode() string {
	if x != nil {
		return x.CurrencyCode
	}
	return ""
}

func (x *Order) GetCountryId() string {
	if x != nil {
		return x.CountryId
	}
	return ""
}

func (x *Order) GetCancelledReason() CancelledReason {
	if x != nil {
		return x.CancelledReason
	}
	return CancelledReason_CANCELLED_REASON_UNSPECIFIED
}

func (x *Order) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *Order) GetAutoFinishedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.AutoFinishedAt
	}
	return nil
}

func (x *Order) GetLineItems() []*LineItem {
	if x != nil {
		return x.LineItems
	}
	return nil
}

func (x *Order) GetPaymentIds() []string {
	if x != nil {
		return x.PaymentIds
	}
	return nil
}

func (x *Order) GetCheckoutId() string {
	if x != nil {
		return x.CheckoutId
	}
	return ""
}

type CancelInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Role      RoleType               `protobuf:"varint,1,opt,name=role,proto3,enum=ordermanagerpb.RoleType" json:"role,omitempty"`
	UserId    int64                  `protobuf:"varint,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	Reason    CancelledReason        `protobuf:"varint,3,opt,name=reason,proto3,enum=ordermanagerpb.CancelledReason" json:"reason,omitempty"`
	Message   string                 `protobuf:"bytes,4,opt,name=message,proto3" json:"message,omitempty"`
	CreatedAt *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
}

func (x *CancelInfo) Reset() {
	*x = CancelInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_OrderManager_OrderManager_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CancelInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CancelInfo) ProtoMessage() {}

func (x *CancelInfo) ProtoReflect() protoreflect.Message {
	mi := &file_OrderManager_OrderManager_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CancelInfo.ProtoReflect.Descriptor instead.
func (*CancelInfo) Descriptor() ([]byte, []int) {
	return file_OrderManager_OrderManager_proto_rawDescGZIP(), []int{16}
}

func (x *CancelInfo) GetRole() RoleType {
	if x != nil {
		return x.Role
	}
	return RoleType_ROLE_TYPE_UNSPECIFIED
}

func (x *CancelInfo) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *CancelInfo) GetReason() CancelledReason {
	if x != nil {
		return x.Reason
	}
	return CancelledReason_CANCELLED_REASON_UNSPECIFIED
}

func (x *CancelInfo) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *CancelInfo) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

type DeliveryInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DeliveryId string   `protobuf:"bytes,1,opt,name=delivery_id,json=deliveryId,proto3" json:"delivery_id,omitempty"` // might be empty, if the delivery is not created
	LineItemId []string `protobuf:"bytes,2,rep,name=line_item_id,json=lineItemId,proto3" json:"line_item_id,omitempty"`
}

func (x *DeliveryInfo) Reset() {
	*x = DeliveryInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_OrderManager_OrderManager_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeliveryInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeliveryInfo) ProtoMessage() {}

func (x *DeliveryInfo) ProtoReflect() protoreflect.Message {
	mi := &file_OrderManager_OrderManager_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeliveryInfo.ProtoReflect.Descriptor instead.
func (*DeliveryInfo) Descriptor() ([]byte, []int) {
	return file_OrderManager_OrderManager_proto_rawDescGZIP(), []int{17}
}

func (x *DeliveryInfo) GetDeliveryId() string {
	if x != nil {
		return x.DeliveryId
	}
	return ""
}

func (x *DeliveryInfo) GetLineItemId() []string {
	if x != nil {
		return x.LineItemId
	}
	return nil
}

type DisputeInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DisputeId  string   `protobuf:"bytes,1,opt,name=dispute_id,json=disputeId,proto3" json:"dispute_id,omitempty"` // might be empty, if the delivery is not created
	LineItemId []string `protobuf:"bytes,2,rep,name=line_item_id,json=lineItemId,proto3" json:"line_item_id,omitempty"`
}

func (x *DisputeInfo) Reset() {
	*x = DisputeInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_OrderManager_OrderManager_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DisputeInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DisputeInfo) ProtoMessage() {}

func (x *DisputeInfo) ProtoReflect() protoreflect.Message {
	mi := &file_OrderManager_OrderManager_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DisputeInfo.ProtoReflect.Descriptor instead.
func (*DisputeInfo) Descriptor() ([]byte, []int) {
	return file_OrderManager_OrderManager_proto_rawDescGZIP(), []int{18}
}

func (x *DisputeInfo) GetDisputeId() string {
	if x != nil {
		return x.DisputeId
	}
	return ""
}

func (x *DisputeInfo) GetLineItemId() []string {
	if x != nil {
		return x.LineItemId
	}
	return nil
}

type DeliveryOption struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FamilyId   string              `protobuf:"bytes,1,opt,name=family_id,json=familyId,proto3" json:"family_id,omitempty"`
	CourierId  string              `protobuf:"bytes,2,opt,name=courier_id,json=courierId,proto3" json:"courier_id,omitempty"`
	Properties []*DeliveryProperty `protobuf:"bytes,3,rep,name=properties,proto3" json:"properties,omitempty"`
}

func (x *DeliveryOption) Reset() {
	*x = DeliveryOption{}
	if protoimpl.UnsafeEnabled {
		mi := &file_OrderManager_OrderManager_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeliveryOption) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeliveryOption) ProtoMessage() {}

func (x *DeliveryOption) ProtoReflect() protoreflect.Message {
	mi := &file_OrderManager_OrderManager_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeliveryOption.ProtoReflect.Descriptor instead.
func (*DeliveryOption) Descriptor() ([]byte, []int) {
	return file_OrderManager_OrderManager_proto_rawDescGZIP(), []int{19}
}

func (x *DeliveryOption) GetFamilyId() string {
	if x != nil {
		return x.FamilyId
	}
	return ""
}

func (x *DeliveryOption) GetCourierId() string {
	if x != nil {
		return x.CourierId
	}
	return ""
}

func (x *DeliveryOption) GetProperties() []*DeliveryProperty {
	if x != nil {
		return x.Properties
	}
	return nil
}

type FeeInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FeeName       FeeNameType     `protobuf:"varint,1,opt,name=fee_name,json=feeName,proto3,enum=ordermanagerpb.FeeNameType" json:"fee_name,omitempty"`
	TotalAmount   string          `protobuf:"bytes,2,opt,name=total_amount,json=totalAmount,proto3" json:"total_amount,omitempty"` // fee total amount
	FeeComponents []*FeeComponent `protobuf:"bytes,3,rep,name=fee_components,json=feeComponents,proto3" json:"fee_components,omitempty"`
	FeeRuleId     int64           `protobuf:"varint,4,opt,name=fee_rule_id,json=feeRuleId,proto3" json:"fee_rule_id,omitempty"`
	Gst           *GST            `protobuf:"bytes,5,opt,name=gst,proto3" json:"gst,omitempty"`
	DisplayMeta   *DisplayMeta    `protobuf:"bytes,6,opt,name=display_meta,json=displayMeta,proto3" json:"display_meta,omitempty"`
}

func (x *FeeInfo) Reset() {
	*x = FeeInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_OrderManager_OrderManager_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FeeInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FeeInfo) ProtoMessage() {}

func (x *FeeInfo) ProtoReflect() protoreflect.Message {
	mi := &file_OrderManager_OrderManager_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FeeInfo.ProtoReflect.Descriptor instead.
func (*FeeInfo) Descriptor() ([]byte, []int) {
	return file_OrderManager_OrderManager_proto_rawDescGZIP(), []int{20}
}

func (x *FeeInfo) GetFeeName() FeeNameType {
	if x != nil {
		return x.FeeName
	}
	return FeeNameType_UNKNOWN_FEE_NAME_TYPE
}

func (x *FeeInfo) GetTotalAmount() string {
	if x != nil {
		return x.TotalAmount
	}
	return ""
}

func (x *FeeInfo) GetFeeComponents() []*FeeComponent {
	if x != nil {
		return x.FeeComponents
	}
	return nil
}

func (x *FeeInfo) GetFeeRuleId() int64 {
	if x != nil {
		return x.FeeRuleId
	}
	return 0
}

func (x *FeeInfo) GetGst() *GST {
	if x != nil {
		return x.Gst
	}
	return nil
}

func (x *FeeInfo) GetDisplayMeta() *DisplayMeta {
	if x != nil {
		return x.DisplayMeta
	}
	return nil
}

type FeeComponent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FeeValueType FeeValueType `protobuf:"varint,1,opt,name=fee_value_type,json=feeValueType,proto3,enum=ordermanagerpb.FeeValueType" json:"fee_value_type,omitempty"`
	FeeValue     string       `protobuf:"bytes,2,opt,name=fee_value,json=feeValue,proto3" json:"fee_value,omitempty"`
	Amount       string       `protobuf:"bytes,3,opt,name=amount,proto3" json:"amount,omitempty"`
}

func (x *FeeComponent) Reset() {
	*x = FeeComponent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_OrderManager_OrderManager_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FeeComponent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FeeComponent) ProtoMessage() {}

func (x *FeeComponent) ProtoReflect() protoreflect.Message {
	mi := &file_OrderManager_OrderManager_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FeeComponent.ProtoReflect.Descriptor instead.
func (*FeeComponent) Descriptor() ([]byte, []int) {
	return file_OrderManager_OrderManager_proto_rawDescGZIP(), []int{21}
}

func (x *FeeComponent) GetFeeValueType() FeeValueType {
	if x != nil {
		return x.FeeValueType
	}
	return FeeValueType_UNKNOWN_FEE_VALUE_TYPE
}

func (x *FeeComponent) GetFeeValue() string {
	if x != nil {
		return x.FeeValue
	}
	return ""
}

func (x *FeeComponent) GetAmount() string {
	if x != nil {
		return x.Amount
	}
	return ""
}

type GST struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IsInclusive  bool   `protobuf:"varint,1,opt,name=is_inclusive,json=isInclusive,proto3" json:"is_inclusive,omitempty"`
	GstFeeRuleId int64  `protobuf:"varint,2,opt,name=gst_fee_rule_id,json=gstFeeRuleId,proto3" json:"gst_fee_rule_id,omitempty"`
	Percentage   string `protobuf:"bytes,3,opt,name=percentage,proto3" json:"percentage,omitempty"`
	Amount       string `protobuf:"bytes,4,opt,name=amount,proto3" json:"amount,omitempty"`
	TaxCode      string `protobuf:"bytes,5,opt,name=tax_code,json=taxCode,proto3" json:"tax_code,omitempty"`
}

func (x *GST) Reset() {
	*x = GST{}
	if protoimpl.UnsafeEnabled {
		mi := &file_OrderManager_OrderManager_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GST) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GST) ProtoMessage() {}

func (x *GST) ProtoReflect() protoreflect.Message {
	mi := &file_OrderManager_OrderManager_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GST.ProtoReflect.Descriptor instead.
func (*GST) Descriptor() ([]byte, []int) {
	return file_OrderManager_OrderManager_proto_rawDescGZIP(), []int{22}
}

func (x *GST) GetIsInclusive() bool {
	if x != nil {
		return x.IsInclusive
	}
	return false
}

func (x *GST) GetGstFeeRuleId() int64 {
	if x != nil {
		return x.GstFeeRuleId
	}
	return 0
}

func (x *GST) GetPercentage() string {
	if x != nil {
		return x.Percentage
	}
	return ""
}

func (x *GST) GetAmount() string {
	if x != nil {
		return x.Amount
	}
	return ""
}

func (x *GST) GetTaxCode() string {
	if x != nil {
		return x.TaxCode
	}
	return ""
}

type DisplayMeta struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FeeNameTag string `protobuf:"bytes,1,opt,name=fee_name_tag,json=feeNameTag,proto3" json:"fee_name_tag,omitempty"` // the tag in lokalise
}

func (x *DisplayMeta) Reset() {
	*x = DisplayMeta{}
	if protoimpl.UnsafeEnabled {
		mi := &file_OrderManager_OrderManager_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DisplayMeta) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DisplayMeta) ProtoMessage() {}

func (x *DisplayMeta) ProtoReflect() protoreflect.Message {
	mi := &file_OrderManager_OrderManager_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DisplayMeta.ProtoReflect.Descriptor instead.
func (*DisplayMeta) Descriptor() ([]byte, []int) {
	return file_OrderManager_OrderManager_proto_rawDescGZIP(), []int{23}
}

func (x *DisplayMeta) GetFeeNameTag() string {
	if x != nil {
		return x.FeeNameTag
	}
	return ""
}

type Promotion struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SelectionId    string `protobuf:"bytes,1,opt,name=selection_id,json=selectionId,proto3" json:"selection_id,omitempty"`
	PromotionCode  string `protobuf:"bytes,2,opt,name=promotion_code,json=promotionCode,proto3" json:"promotion_code,omitempty"`
	DiscountAmount string `protobuf:"bytes,3,opt,name=discount_amount,json=discountAmount,proto3" json:"discount_amount,omitempty"`
}

func (x *Promotion) Reset() {
	*x = Promotion{}
	if protoimpl.UnsafeEnabled {
		mi := &file_OrderManager_OrderManager_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Promotion) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Promotion) ProtoMessage() {}

func (x *Promotion) ProtoReflect() protoreflect.Message {
	mi := &file_OrderManager_OrderManager_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Promotion.ProtoReflect.Descriptor instead.
func (*Promotion) Descriptor() ([]byte, []int) {
	return file_OrderManager_OrderManager_proto_rawDescGZIP(), []int{24}
}

func (x *Promotion) GetSelectionId() string {
	if x != nil {
		return x.SelectionId
	}
	return ""
}

func (x *Promotion) GetPromotionCode() string {
	if x != nil {
		return x.PromotionCode
	}
	return ""
}

func (x *Promotion) GetDiscountAmount() string {
	if x != nil {
		return x.DiscountAmount
	}
	return ""
}

type NotifyDisputeRequestCreatedRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FulfullmentOrderId      string                    `protobuf:"bytes,1,opt,name=fulfullment_order_id,json=fulfullmentOrderId,proto3" json:"fulfullment_order_id,omitempty"`
	DisputeLineItemMappings []*DisputeLineItemMapping `protobuf:"bytes,2,rep,name=dispute_line_item_mappings,json=disputeLineItemMappings,proto3" json:"dispute_line_item_mappings,omitempty"`
}

func (x *NotifyDisputeRequestCreatedRequest) Reset() {
	*x = NotifyDisputeRequestCreatedRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_OrderManager_OrderManager_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NotifyDisputeRequestCreatedRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NotifyDisputeRequestCreatedRequest) ProtoMessage() {}

func (x *NotifyDisputeRequestCreatedRequest) ProtoReflect() protoreflect.Message {
	mi := &file_OrderManager_OrderManager_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NotifyDisputeRequestCreatedRequest.ProtoReflect.Descriptor instead.
func (*NotifyDisputeRequestCreatedRequest) Descriptor() ([]byte, []int) {
	return file_OrderManager_OrderManager_proto_rawDescGZIP(), []int{25}
}

func (x *NotifyDisputeRequestCreatedRequest) GetFulfullmentOrderId() string {
	if x != nil {
		return x.FulfullmentOrderId
	}
	return ""
}

func (x *NotifyDisputeRequestCreatedRequest) GetDisputeLineItemMappings() []*DisputeLineItemMapping {
	if x != nil {
		return x.DisputeLineItemMappings
	}
	return nil
}

type NotifyDisputeRequestCreatedResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *NotifyDisputeRequestCreatedResponse) Reset() {
	*x = NotifyDisputeRequestCreatedResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_OrderManager_OrderManager_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NotifyDisputeRequestCreatedResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NotifyDisputeRequestCreatedResponse) ProtoMessage() {}

func (x *NotifyDisputeRequestCreatedResponse) ProtoReflect() protoreflect.Message {
	mi := &file_OrderManager_OrderManager_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NotifyDisputeRequestCreatedResponse.ProtoReflect.Descriptor instead.
func (*NotifyDisputeRequestCreatedResponse) Descriptor() ([]byte, []int) {
	return file_OrderManager_OrderManager_proto_rawDescGZIP(), []int{26}
}

type NotifyDisputeRequestClosedRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FulfullmentOrderId      string                    `protobuf:"bytes,1,opt,name=fulfullment_order_id,json=fulfullmentOrderId,proto3" json:"fulfullment_order_id,omitempty"`
	DisputeLineItemMappings []*DisputeLineItemMapping `protobuf:"bytes,2,rep,name=dispute_line_item_mappings,json=disputeLineItemMappings,proto3" json:"dispute_line_item_mappings,omitempty"`
}

func (x *NotifyDisputeRequestClosedRequest) Reset() {
	*x = NotifyDisputeRequestClosedRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_OrderManager_OrderManager_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NotifyDisputeRequestClosedRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NotifyDisputeRequestClosedRequest) ProtoMessage() {}

func (x *NotifyDisputeRequestClosedRequest) ProtoReflect() protoreflect.Message {
	mi := &file_OrderManager_OrderManager_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NotifyDisputeRequestClosedRequest.ProtoReflect.Descriptor instead.
func (*NotifyDisputeRequestClosedRequest) Descriptor() ([]byte, []int) {
	return file_OrderManager_OrderManager_proto_rawDescGZIP(), []int{27}
}

func (x *NotifyDisputeRequestClosedRequest) GetFulfullmentOrderId() string {
	if x != nil {
		return x.FulfullmentOrderId
	}
	return ""
}

func (x *NotifyDisputeRequestClosedRequest) GetDisputeLineItemMappings() []*DisputeLineItemMapping {
	if x != nil {
		return x.DisputeLineItemMappings
	}
	return nil
}

type NotifyDisputeRequestClosedResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *NotifyDisputeRequestClosedResponse) Reset() {
	*x = NotifyDisputeRequestClosedResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_OrderManager_OrderManager_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NotifyDisputeRequestClosedResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NotifyDisputeRequestClosedResponse) ProtoMessage() {}

func (x *NotifyDisputeRequestClosedResponse) ProtoReflect() protoreflect.Message {
	mi := &file_OrderManager_OrderManager_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NotifyDisputeRequestClosedResponse.ProtoReflect.Descriptor instead.
func (*NotifyDisputeRequestClosedResponse) Descriptor() ([]byte, []int) {
	return file_OrderManager_OrderManager_proto_rawDescGZIP(), []int{28}
}

type DisputeLineItemMapping struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DisputeId    string       `protobuf:"bytes,1,opt,name=dispute_id,json=disputeId,proto3" json:"dispute_id,omitempty"`
	LineItemId   string       `protobuf:"bytes,2,opt,name=line_item_id,json=lineItemId,proto3" json:"line_item_id,omitempty"`
	DisputeState DisputeState `protobuf:"varint,3,opt,name=dispute_state,json=disputeState,proto3,enum=ordermanagerpb.DisputeState" json:"dispute_state,omitempty"`
}

func (x *DisputeLineItemMapping) Reset() {
	*x = DisputeLineItemMapping{}
	if protoimpl.UnsafeEnabled {
		mi := &file_OrderManager_OrderManager_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DisputeLineItemMapping) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DisputeLineItemMapping) ProtoMessage() {}

func (x *DisputeLineItemMapping) ProtoReflect() protoreflect.Message {
	mi := &file_OrderManager_OrderManager_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DisputeLineItemMapping.ProtoReflect.Descriptor instead.
func (*DisputeLineItemMapping) Descriptor() ([]byte, []int) {
	return file_OrderManager_OrderManager_proto_rawDescGZIP(), []int{29}
}

func (x *DisputeLineItemMapping) GetDisputeId() string {
	if x != nil {
		return x.DisputeId
	}
	return ""
}

func (x *DisputeLineItemMapping) GetLineItemId() string {
	if x != nil {
		return x.LineItemId
	}
	return ""
}

func (x *DisputeLineItemMapping) GetDisputeState() DisputeState {
	if x != nil {
		return x.DisputeState
	}
	return DisputeState_DISPUTE_STATE_UNSPECIFIED
}

type FulfillmentOrderLineItmeUpdatedEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FulfillmentOrderId string                 `protobuf:"bytes,1,opt,name=fulfillment_order_id,json=fulfillmentOrderId,proto3" json:"fulfillment_order_id,omitempty"`
	LineItemId         string                 `protobuf:"bytes,2,opt,name=line_item_id,json=lineItemId,proto3" json:"line_item_id,omitempty"`
	LineItemState      LineItemState          `protobuf:"varint,3,opt,name=line_item_state,json=lineItemState,proto3,enum=ordermanagerpb.LineItemState" json:"line_item_state,omitempty"`
	SellerId           int64                  `protobuf:"varint,4,opt,name=seller_id,json=sellerId,proto3" json:"seller_id,omitempty"`
	BuyerId            int64                  `protobuf:"varint,5,opt,name=buyer_id,json=buyerId,proto3" json:"buyer_id,omitempty"`
	ListingId          int64                  `protobuf:"varint,6,opt,name=listing_id,json=listingId,proto3" json:"listing_id,omitempty"`
	UpdatedAt          *timestamppb.Timestamp `protobuf:"bytes,7,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
}

func (x *FulfillmentOrderLineItmeUpdatedEvent) Reset() {
	*x = FulfillmentOrderLineItmeUpdatedEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_OrderManager_OrderManager_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FulfillmentOrderLineItmeUpdatedEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FulfillmentOrderLineItmeUpdatedEvent) ProtoMessage() {}

func (x *FulfillmentOrderLineItmeUpdatedEvent) ProtoReflect() protoreflect.Message {
	mi := &file_OrderManager_OrderManager_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FulfillmentOrderLineItmeUpdatedEvent.ProtoReflect.Descriptor instead.
func (*FulfillmentOrderLineItmeUpdatedEvent) Descriptor() ([]byte, []int) {
	return file_OrderManager_OrderManager_proto_rawDescGZIP(), []int{30}
}

func (x *FulfillmentOrderLineItmeUpdatedEvent) GetFulfillmentOrderId() string {
	if x != nil {
		return x.FulfillmentOrderId
	}
	return ""
}

func (x *FulfillmentOrderLineItmeUpdatedEvent) GetLineItemId() string {
	if x != nil {
		return x.LineItemId
	}
	return ""
}

func (x *FulfillmentOrderLineItmeUpdatedEvent) GetLineItemState() LineItemState {
	if x != nil {
		return x.LineItemState
	}
	return LineItemState_LINE_ITEM_STATE_UNSPECIFIED
}

func (x *FulfillmentOrderLineItmeUpdatedEvent) GetSellerId() int64 {
	if x != nil {
		return x.SellerId
	}
	return 0
}

func (x *FulfillmentOrderLineItmeUpdatedEvent) GetBuyerId() int64 {
	if x != nil {
		return x.BuyerId
	}
	return 0
}

func (x *FulfillmentOrderLineItmeUpdatedEvent) GetListingId() int64 {
	if x != nil {
		return x.ListingId
	}
	return 0
}

func (x *FulfillmentOrderLineItmeUpdatedEvent) GetUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

type StartD2DDeliveryRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OrderId    string   `protobuf:"bytes,1,opt,name=order_id,json=orderId,proto3" json:"order_id,omitempty"`
	BuyerName  string   `protobuf:"bytes,2,opt,name=buyer_name,json=buyerName,proto3" json:"buyer_name,omitempty"`
	BuyerPhone string   `protobuf:"bytes,3,opt,name=buyer_phone,json=buyerPhone,proto3" json:"buyer_phone,omitempty"`
	BuyerEmail string   `protobuf:"bytes,4,opt,name=buyer_email,json=buyerEmail,proto3" json:"buyer_email,omitempty"`
	Address    *Address `protobuf:"bytes,5,opt,name=address,proto3" json:"address,omitempty"`
	// pickup_date is the date in unix of the pickup time slot.
	// e.g. 1694418932
	PickupDate string `protobuf:"bytes,6,opt,name=pickup_date,json=pickupDate,proto3" json:"pickup_date,omitempty"`
	// pickup_slot is the slot in unix of the pickup time slot.
	// e.g. 9AM-6PM
	PickupSlot string `protobuf:"bytes,7,opt,name=pickup_slot,json=pickupSlot,proto3" json:"pickup_slot,omitempty"`
}

func (x *StartD2DDeliveryRequest) Reset() {
	*x = StartD2DDeliveryRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_OrderManager_OrderManager_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StartD2DDeliveryRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StartD2DDeliveryRequest) ProtoMessage() {}

func (x *StartD2DDeliveryRequest) ProtoReflect() protoreflect.Message {
	mi := &file_OrderManager_OrderManager_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StartD2DDeliveryRequest.ProtoReflect.Descriptor instead.
func (*StartD2DDeliveryRequest) Descriptor() ([]byte, []int) {
	return file_OrderManager_OrderManager_proto_rawDescGZIP(), []int{31}
}

func (x *StartD2DDeliveryRequest) GetOrderId() string {
	if x != nil {
		return x.OrderId
	}
	return ""
}

func (x *StartD2DDeliveryRequest) GetBuyerName() string {
	if x != nil {
		return x.BuyerName
	}
	return ""
}

func (x *StartD2DDeliveryRequest) GetBuyerPhone() string {
	if x != nil {
		return x.BuyerPhone
	}
	return ""
}

func (x *StartD2DDeliveryRequest) GetBuyerEmail() string {
	if x != nil {
		return x.BuyerEmail
	}
	return ""
}

func (x *StartD2DDeliveryRequest) GetAddress() *Address {
	if x != nil {
		return x.Address
	}
	return nil
}

func (x *StartD2DDeliveryRequest) GetPickupDate() string {
	if x != nil {
		return x.PickupDate
	}
	return ""
}

func (x *StartD2DDeliveryRequest) GetPickupSlot() string {
	if x != nil {
		return x.PickupSlot
	}
	return ""
}

type StartD2DDeliveryResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *StartD2DDeliveryResponse) Reset() {
	*x = StartD2DDeliveryResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_OrderManager_OrderManager_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StartD2DDeliveryResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StartD2DDeliveryResponse) ProtoMessage() {}

func (x *StartD2DDeliveryResponse) ProtoReflect() protoreflect.Message {
	mi := &file_OrderManager_OrderManager_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StartD2DDeliveryResponse.ProtoReflect.Descriptor instead.
func (*StartD2DDeliveryResponse) Descriptor() ([]byte, []int) {
	return file_OrderManager_OrderManager_proto_rawDescGZIP(), []int{32}
}

type Address struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Country    string `protobuf:"bytes,1,opt,name=country,proto3" json:"country,omitempty"`
	State      string `protobuf:"bytes,2,opt,name=state,proto3" json:"state,omitempty"`
	City       string `protobuf:"bytes,3,opt,name=city,proto3" json:"city,omitempty"`
	PostalCode string `protobuf:"bytes,4,opt,name=postal_code,json=postalCode,proto3" json:"postal_code,omitempty"`
	UnitNo     string `protobuf:"bytes,5,opt,name=unit_no,json=unitNo,proto3" json:"unit_no,omitempty"`
	Address1   string `protobuf:"bytes,6,opt,name=address1,proto3" json:"address1,omitempty"`
	Address2   string `protobuf:"bytes,7,opt,name=address2,proto3" json:"address2,omitempty"`
}

func (x *Address) Reset() {
	*x = Address{}
	if protoimpl.UnsafeEnabled {
		mi := &file_OrderManager_OrderManager_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Address) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Address) ProtoMessage() {}

func (x *Address) ProtoReflect() protoreflect.Message {
	mi := &file_OrderManager_OrderManager_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Address.ProtoReflect.Descriptor instead.
func (*Address) Descriptor() ([]byte, []int) {
	return file_OrderManager_OrderManager_proto_rawDescGZIP(), []int{33}
}

func (x *Address) GetCountry() string {
	if x != nil {
		return x.Country
	}
	return ""
}

func (x *Address) GetState() string {
	if x != nil {
		return x.State
	}
	return ""
}

func (x *Address) GetCity() string {
	if x != nil {
		return x.City
	}
	return ""
}

func (x *Address) GetPostalCode() string {
	if x != nil {
		return x.PostalCode
	}
	return ""
}

func (x *Address) GetUnitNo() string {
	if x != nil {
		return x.UnitNo
	}
	return ""
}

func (x *Address) GetAddress1() string {
	if x != nil {
		return x.Address1
	}
	return ""
}

func (x *Address) GetAddress2() string {
	if x != nil {
		return x.Address2
	}
	return ""
}

type GetOrdersRequest_Query struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ByIds      []string                `protobuf:"bytes,1,rep,name=by_ids,json=byIds,proto3" json:"by_ids,omitempty"`
	ByStates   []FulfillmentOrderState `protobuf:"varint,2,rep,packed,name=by_states,json=byStates,proto3,enum=ordermanagerpb.FulfillmentOrderState" json:"by_states,omitempty"`
	HasDispute *wrapperspb.BoolValue   `protobuf:"bytes,3,opt,name=has_dispute,json=hasDispute,proto3" json:"has_dispute,omitempty"`
	StartedAt  *timestamppb.Timestamp  `protobuf:"bytes,4,opt,name=started_at,json=startedAt,proto3" json:"started_at,omitempty"`
	EndedAt    *timestamppb.Timestamp  `protobuf:"bytes,5,opt,name=ended_at,json=endedAt,proto3" json:"ended_at,omitempty"`
	CountryId  string                  `protobuf:"bytes,6,opt,name=country_id,json=countryId,proto3" json:"country_id,omitempty"`
	ByUserId   int64                   `protobuf:"varint,7,opt,name=by_user_id,json=byUserId,proto3" json:"by_user_id,omitempty"`
	RoleTypes  []RoleType              `protobuf:"varint,8,rep,packed,name=role_types,json=roleTypes,proto3,enum=ordermanagerpb.RoleType" json:"role_types,omitempty"` // should specific at least one
}

func (x *GetOrdersRequest_Query) Reset() {
	*x = GetOrdersRequest_Query{}
	if protoimpl.UnsafeEnabled {
		mi := &file_OrderManager_OrderManager_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetOrdersRequest_Query) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetOrdersRequest_Query) ProtoMessage() {}

func (x *GetOrdersRequest_Query) ProtoReflect() protoreflect.Message {
	mi := &file_OrderManager_OrderManager_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetOrdersRequest_Query.ProtoReflect.Descriptor instead.
func (*GetOrdersRequest_Query) Descriptor() ([]byte, []int) {
	return file_OrderManager_OrderManager_proto_rawDescGZIP(), []int{2, 0}
}

func (x *GetOrdersRequest_Query) GetByIds() []string {
	if x != nil {
		return x.ByIds
	}
	return nil
}

func (x *GetOrdersRequest_Query) GetByStates() []FulfillmentOrderState {
	if x != nil {
		return x.ByStates
	}
	return nil
}

func (x *GetOrdersRequest_Query) GetHasDispute() *wrapperspb.BoolValue {
	if x != nil {
		return x.HasDispute
	}
	return nil
}

func (x *GetOrdersRequest_Query) GetStartedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.StartedAt
	}
	return nil
}

func (x *GetOrdersRequest_Query) GetEndedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.EndedAt
	}
	return nil
}

func (x *GetOrdersRequest_Query) GetCountryId() string {
	if x != nil {
		return x.CountryId
	}
	return ""
}

func (x *GetOrdersRequest_Query) GetByUserId() int64 {
	if x != nil {
		return x.ByUserId
	}
	return 0
}

func (x *GetOrdersRequest_Query) GetRoleTypes() []RoleType {
	if x != nil {
		return x.RoleTypes
	}
	return nil
}

var File_OrderManager_OrderManager_proto protoreflect.FileDescriptor

var file_OrderManager_OrderManager_proto_rawDesc = []byte{
	0x0a, 0x1f, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2f, 0x4f,
	0x72, 0x64, 0x65, 0x72, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x12, 0x0e, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x70,
	0x62, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x1e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2f, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x73, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x19, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x2f, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1d, 0x4f,
	0x72, 0x64, 0x65, 0x72, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2f, 0x70, 0x72, 0x6f, 0x70,
	0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x4e, 0x0a, 0x0a,
	0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x66,
	0x66, 0x73, 0x65, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x6f, 0x66, 0x66, 0x73,
	0x65, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x22, 0x3f, 0x0a, 0x11,
	0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x69, 0x7a,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x22, 0x9d, 0x04,
	0x0a, 0x10, 0x47, 0x65, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x3c, 0x0a, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x26, 0x2e, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72,
	0x70, 0x62, 0x2e, 0x47, 0x65, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79,
	0x12, 0x41, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x6d, 0x61, 0x6e, 0x61,
	0x67, 0x65, 0x72, 0x70, 0x62, 0x2e, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x0a, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x1a, 0x87, 0x03, 0x0a, 0x05, 0x51, 0x75, 0x65, 0x72, 0x79, 0x12, 0x15, 0x0a,
	0x06, 0x62, 0x79, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x05, 0x62,
	0x79, 0x49, 0x64, 0x73, 0x12, 0x42, 0x0a, 0x09, 0x62, 0x79, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x25, 0x2e, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x6d,
	0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x70, 0x62, 0x2e, 0x46, 0x75, 0x6c, 0x66, 0x69, 0x6c, 0x6c,
	0x6d, 0x65, 0x6e, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x08,
	0x62, 0x79, 0x53, 0x74, 0x61, 0x74, 0x65, 0x73, 0x12, 0x3b, 0x0a, 0x0b, 0x68, 0x61, 0x73, 0x5f,
	0x64, 0x69, 0x73, 0x70, 0x75, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0a, 0x68, 0x61, 0x73, 0x44, 0x69,
	0x73, 0x70, 0x75, 0x74, 0x65, 0x12, 0x39, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x65, 0x64,
	0x5f, 0x61, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x65, 0x64, 0x41, 0x74,
	0x12, 0x35, 0x0a, 0x08, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x07,
	0x65, 0x6e, 0x64, 0x65, 0x64, 0x41, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x72, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x72, 0x79, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x0a, 0x62, 0x79, 0x5f, 0x75, 0x73, 0x65,
	0x72, 0x5f, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x62, 0x79, 0x55, 0x73,
	0x65, 0x72, 0x49, 0x64, 0x12, 0x37, 0x0a, 0x0a, 0x72, 0x6f, 0x6c, 0x65, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x18, 0x2e, 0x6f, 0x72, 0x64, 0x65, 0x72,
	0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x70, 0x62, 0x2e, 0x52, 0x6f, 0x6c, 0x65, 0x54, 0x79,
	0x70, 0x65, 0x52, 0x09, 0x72, 0x6f, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x73, 0x22, 0x89, 0x01,
	0x0a, 0x11, 0x47, 0x65, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x38, 0x0a, 0x06, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x6d, 0x61, 0x6e, 0x61, 0x67,
	0x65, 0x72, 0x70, 0x62, 0x2e, 0x46, 0x75, 0x6c, 0x66, 0x69, 0x6c, 0x6c, 0x6d, 0x65, 0x6e, 0x74,
	0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x06, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x12, 0x3a, 0x0a,
	0x0a, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72,
	0x70, 0x62, 0x2e, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0a, 0x70,
	0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xc0, 0x04, 0x0a, 0x08, 0x4c, 0x69,
	0x6e, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x6c, 0x69, 0x73, 0x74, 0x69, 0x6e,
	0x67, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x6c, 0x69, 0x73, 0x74,
	0x69, 0x6e, 0x67, 0x49, 0x64, 0x12, 0x2f, 0x0a, 0x13, 0x73, 0x74, 0x72, 0x69, 0x6b, 0x65, 0x74,
	0x68, 0x72, 0x6f, 0x75, 0x67, 0x68, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x12, 0x73, 0x74, 0x72, 0x69, 0x6b, 0x65, 0x74, 0x68, 0x72, 0x6f, 0x75, 0x67,
	0x68, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x6c, 0x69, 0x73, 0x74, 0x69, 0x6e,
	0x67, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6c,
	0x69, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x30, 0x0a, 0x14, 0x77,
	0x61, 0x72, 0x72, 0x61, 0x6e, 0x74, 0x79, 0x5f, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65,
	0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x77, 0x61, 0x72, 0x72, 0x61,
	0x6e, 0x74, 0x79, 0x43, 0x6f, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x49, 0x64, 0x12, 0x21, 0x0a,
	0x0c, 0x77, 0x61, 0x72, 0x72, 0x61, 0x6e, 0x74, 0x79, 0x5f, 0x66, 0x65, 0x65, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x77, 0x61, 0x72, 0x72, 0x61, 0x6e, 0x74, 0x79, 0x46, 0x65, 0x65,
	0x12, 0x35, 0x0a, 0x09, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x18, 0x2e, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x6d, 0x61, 0x6e, 0x61, 0x67,
	0x65, 0x72, 0x70, 0x62, 0x2e, 0x49, 0x74, 0x65, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x52, 0x08, 0x69,
	0x74, 0x65, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x12, 0x33, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1d, 0x2e, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x6d, 0x61,
	0x6e, 0x61, 0x67, 0x65, 0x72, 0x70, 0x62, 0x2e, 0x4c, 0x69, 0x6e, 0x65, 0x49, 0x74, 0x65, 0x6d,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x38, 0x0a, 0x0b,
	0x73, 0x65, 0x6c, 0x6c, 0x65, 0x72, 0x5f, 0x66, 0x65, 0x65, 0x73, 0x18, 0x09, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x17, 0x2e, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72,
	0x70, 0x62, 0x2e, 0x46, 0x65, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0a, 0x73, 0x65, 0x6c, 0x6c,
	0x65, 0x72, 0x46, 0x65, 0x65, 0x73, 0x12, 0x36, 0x0a, 0x0a, 0x62, 0x75, 0x79, 0x65, 0x72, 0x5f,
	0x66, 0x65, 0x65, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x6f, 0x72, 0x64,
	0x65, 0x72, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x70, 0x62, 0x2e, 0x46, 0x65, 0x65, 0x49,
	0x6e, 0x66, 0x6f, 0x52, 0x09, 0x62, 0x75, 0x79, 0x65, 0x72, 0x46, 0x65, 0x65, 0x73, 0x12, 0x4a,
	0x0a, 0x10, 0x6c, 0x69, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68,
	0x6f, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x6f, 0x72, 0x64, 0x65, 0x72,
	0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x70, 0x62, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x69, 0x6e,
	0x67, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x52, 0x0f, 0x6c, 0x69, 0x73, 0x74, 0x69,
	0x6e, 0x67, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x12, 0x30, 0x0a, 0x14, 0x62, 0x75,
	0x79, 0x65, 0x72, 0x5f, 0x63, 0x68, 0x61, 0x72, 0x67, 0x65, 0x64, 0x5f, 0x61, 0x6d, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x62, 0x75, 0x79, 0x65, 0x72, 0x43,
	0x68, 0x61, 0x72, 0x67, 0x65, 0x64, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0xe9, 0x01, 0x0a,
	0x0f, 0x4c, 0x69, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74,
	0x12, 0x1b, 0x0a, 0x09, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x55, 0x72, 0x6c, 0x12, 0x14, 0x0a,
	0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69,
	0x74, 0x6c, 0x65, 0x12, 0x22, 0x0a, 0x0d, 0x63, 0x67, 0x5f, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63,
	0x74, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x67, 0x50, 0x72,
	0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x64, 0x12, 0x31, 0x0a, 0x15, 0x63, 0x67, 0x5f, 0x70, 0x72,
	0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f, 0x76, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x74, 0x5f, 0x69, 0x64,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x63, 0x67, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63,
	0x74, 0x56, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x2b, 0x0a, 0x11, 0x6c, 0x61,
	0x79, 0x65, 0x72, 0x65, 0x64, 0x5f, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x10, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x65, 0x64, 0x43, 0x6f,
	0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x61, 0x74, 0x65, 0x67,
	0x6f, 0x72, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x61,
	0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x49, 0x64, 0x22, 0xbf, 0x05, 0x0a, 0x12, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x1f, 0x0a, 0x0b, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x6f, 0x75, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x6f, 0x75, 0x74, 0x49, 0x64,
	0x12, 0x30, 0x0a, 0x14, 0x66, 0x75, 0x6c, 0x66, 0x69, 0x6c, 0x6c, 0x6d, 0x65, 0x6e, 0x74, 0x5f,
	0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12,
	0x66, 0x75, 0x6c, 0x66, 0x69, 0x6c, 0x6c, 0x6d, 0x65, 0x6e, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72,
	0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x49,
	0x64, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x65, 0x6c, 0x6c, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x73, 0x65, 0x6c, 0x6c, 0x65, 0x72, 0x49, 0x64, 0x12, 0x19,
	0x0a, 0x08, 0x62, 0x75, 0x79, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x07, 0x62, 0x75, 0x79, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x72, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x49, 0x64, 0x12, 0x47, 0x0a, 0x0f, 0x64, 0x65, 0x6c, 0x69,
	0x76, 0x65, 0x72, 0x79, 0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1e, 0x2e, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72,
	0x70, 0x62, 0x2e, 0x44, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x4f, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x0e, 0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x4f, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x37, 0x0a, 0x0a, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x18,
	0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x6d, 0x61, 0x6e,
	0x61, 0x67, 0x65, 0x72, 0x70, 0x62, 0x2e, 0x4c, 0x69, 0x6e, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x52,
	0x09, 0x6c, 0x69, 0x6e, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x64, 0x65,
	0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x5f, 0x66, 0x65, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x46, 0x65, 0x65, 0x12, 0x2e, 0x0a,
	0x13, 0x73, 0x65, 0x6c, 0x6c, 0x65, 0x72, 0x5f, 0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79,
	0x5f, 0x66, 0x65, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x73, 0x65, 0x6c, 0x6c,
	0x65, 0x72, 0x44, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x46, 0x65, 0x65, 0x12, 0x2c, 0x0a,
	0x12, 0x62, 0x75, 0x79, 0x65, 0x72, 0x5f, 0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x5f,
	0x66, 0x65, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x62, 0x75, 0x79, 0x65, 0x72,
	0x44, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x46, 0x65, 0x65, 0x12, 0x38, 0x0a, 0x0b, 0x73,
	0x65, 0x6c, 0x6c, 0x65, 0x72, 0x5f, 0x66, 0x65, 0x65, 0x73, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x17, 0x2e, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x70,
	0x62, 0x2e, 0x46, 0x65, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0a, 0x73, 0x65, 0x6c, 0x6c, 0x65,
	0x72, 0x46, 0x65, 0x65, 0x73, 0x12, 0x36, 0x0a, 0x0a, 0x62, 0x75, 0x79, 0x65, 0x72, 0x5f, 0x66,
	0x65, 0x65, 0x73, 0x18, 0x0d, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x6f, 0x72, 0x64, 0x65,
	0x72, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x70, 0x62, 0x2e, 0x46, 0x65, 0x65, 0x49, 0x6e,
	0x66, 0x6f, 0x52, 0x09, 0x62, 0x75, 0x79, 0x65, 0x72, 0x46, 0x65, 0x65, 0x73, 0x12, 0x39, 0x0a,
	0x0a, 0x70, 0x72, 0x6f, 0x6d, 0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x0e, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x19, 0x2e, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72,
	0x70, 0x62, 0x2e, 0x50, 0x72, 0x6f, 0x6d, 0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0a, 0x70, 0x72,
	0x6f, 0x6d, 0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x30, 0x0a, 0x14, 0x62, 0x75, 0x79, 0x65,
	0x72, 0x5f, 0x63, 0x68, 0x61, 0x72, 0x67, 0x65, 0x64, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x62, 0x75, 0x79, 0x65, 0x72, 0x43, 0x68, 0x61,
	0x72, 0x67, 0x65, 0x64, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x4d, 0x0a, 0x13, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x36, 0x0a, 0x05, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x20, 0x2e, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x70,
	0x62, 0x2e, 0x46, 0x75, 0x6c, 0x66, 0x69, 0x6c, 0x6c, 0x6d, 0x65, 0x6e, 0x74, 0x4f, 0x72, 0x64,
	0x65, 0x72, 0x52, 0x05, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x22, 0xa8, 0x01, 0x0a, 0x12, 0x43, 0x61,
	0x6e, 0x63, 0x65, 0x6c, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x19, 0x0a, 0x08, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x64, 0x12, 0x26, 0x0a, 0x0f, 0x63,
	0x61, 0x6e, 0x63, 0x65, 0x6c, 0x6c, 0x65, 0x64, 0x5f, 0x62, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x63, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x6c, 0x65, 0x64, 0x42,
	0x79, 0x49, 0x64, 0x12, 0x37, 0x0a, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x1f, 0x2e, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x6d, 0x61, 0x6e, 0x61, 0x67,
	0x65, 0x72, 0x70, 0x62, 0x2e, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x6c, 0x65, 0x64, 0x52, 0x65,
	0x61, 0x73, 0x6f, 0x6e, 0x52, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x16, 0x0a, 0x06,
	0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x64, 0x65,
	0x74, 0x61, 0x69, 0x6c, 0x22, 0x2f, 0x0a, 0x13, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x4f, 0x72,
	0x64, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73,
	0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x22, 0x32, 0x0a, 0x15, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c,
	0x65, 0x4d, 0x65, 0x65, 0x74, 0x75, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x19,
	0x0a, 0x08, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x64, 0x22, 0x32, 0x0a, 0x16, 0x53, 0x63, 0x68,
	0x65, 0x64, 0x75, 0x6c, 0x65, 0x4d, 0x65, 0x65, 0x74, 0x75, 0x70, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x22, 0x55, 0x0a,
	0x12, 0x46, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x64, 0x12, 0x24,
	0x0a, 0x0e, 0x66, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x65, 0x64, 0x5f, 0x62, 0x79, 0x5f, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x66, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x65, 0x64,
	0x42, 0x79, 0x49, 0x64, 0x22, 0x2f, 0x0a, 0x13, 0x46, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x4f, 0x72,
	0x64, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73,
	0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x22, 0xd4, 0x09, 0x0a, 0x10, 0x46, 0x75, 0x6c, 0x66, 0x69, 0x6c,
	0x6c, 0x6d, 0x65, 0x6e, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x68,
	0x65, 0x63, 0x6b, 0x6f, 0x75, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x6f, 0x75, 0x74, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x70,
	0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x65,
	0x6c, 0x6c, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x73,
	0x65, 0x6c, 0x6c, 0x65, 0x72, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x62, 0x75, 0x79, 0x65, 0x72,
	0x5f, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x62, 0x75, 0x79, 0x65, 0x72,
	0x49, 0x64, 0x12, 0x3b, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x25, 0x2e, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72,
	0x70, 0x62, 0x2e, 0x46, 0x75, 0x6c, 0x66, 0x69, 0x6c, 0x6c, 0x6d, 0x65, 0x6e, 0x74, 0x4f, 0x72,
	0x64, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12,
	0x1d, 0x0a, 0x0a, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x49, 0x64, 0x12, 0x39,
	0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x39, 0x0a, 0x0a, 0x75, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x64, 0x41, 0x74, 0x12, 0x3b, 0x0a, 0x0b, 0x63, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x5f, 0x69,
	0x6e, 0x66, 0x6f, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x6f, 0x72, 0x64, 0x65,
	0x72, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x70, 0x62, 0x2e, 0x43, 0x61, 0x6e, 0x63, 0x65,
	0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0a, 0x63, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x49, 0x6e, 0x66,
	0x6f, 0x12, 0x47, 0x0a, 0x0f, 0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x5f, 0x6f, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x6f, 0x72, 0x64,
	0x65, 0x72, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x70, 0x62, 0x2e, 0x44, 0x65, 0x6c, 0x69,
	0x76, 0x65, 0x72, 0x79, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0e, 0x64, 0x65, 0x6c, 0x69,
	0x76, 0x65, 0x72, 0x79, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x43, 0x0a, 0x0e, 0x64, 0x65,
	0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x18, 0x0e, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65,
	0x72, 0x70, 0x62, 0x2e, 0x44, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x49, 0x6e, 0x66, 0x6f,
	0x52, 0x0d, 0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x73, 0x12,
	0x40, 0x0a, 0x0d, 0x64, 0x69, 0x73, 0x70, 0x75, 0x74, 0x65, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x73,
	0x18, 0x0f, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x6d, 0x61,
	0x6e, 0x61, 0x67, 0x65, 0x72, 0x70, 0x62, 0x2e, 0x44, 0x69, 0x73, 0x70, 0x75, 0x74, 0x65, 0x49,
	0x6e, 0x66, 0x6f, 0x52, 0x0c, 0x64, 0x69, 0x73, 0x70, 0x75, 0x74, 0x65, 0x49, 0x6e, 0x66, 0x6f,
	0x73, 0x12, 0x37, 0x0a, 0x0a, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x18,
	0x10, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x6d, 0x61, 0x6e,
	0x61, 0x67, 0x65, 0x72, 0x70, 0x62, 0x2e, 0x4c, 0x69, 0x6e, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x52,
	0x09, 0x6c, 0x69, 0x6e, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x64, 0x65,
	0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x5f, 0x66, 0x65, 0x65, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x46, 0x65, 0x65, 0x12, 0x2e, 0x0a,
	0x13, 0x73, 0x65, 0x6c, 0x6c, 0x65, 0x72, 0x5f, 0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79,
	0x5f, 0x66, 0x65, 0x65, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x73, 0x65, 0x6c, 0x6c,
	0x65, 0x72, 0x44, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x46, 0x65, 0x65, 0x12, 0x2c, 0x0a,
	0x12, 0x62, 0x75, 0x79, 0x65, 0x72, 0x5f, 0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x5f,
	0x66, 0x65, 0x65, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x62, 0x75, 0x79, 0x65, 0x72,
	0x44, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x46, 0x65, 0x65, 0x12, 0x38, 0x0a, 0x0b, 0x73,
	0x65, 0x6c, 0x6c, 0x65, 0x72, 0x5f, 0x66, 0x65, 0x65, 0x73, 0x18, 0x14, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x17, 0x2e, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x70,
	0x62, 0x2e, 0x46, 0x65, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0a, 0x73, 0x65, 0x6c, 0x6c, 0x65,
	0x72, 0x46, 0x65, 0x65, 0x73, 0x12, 0x36, 0x0a, 0x0a, 0x62, 0x75, 0x79, 0x65, 0x72, 0x5f, 0x66,
	0x65, 0x65, 0x73, 0x18, 0x15, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x6f, 0x72, 0x64, 0x65,
	0x72, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x70, 0x62, 0x2e, 0x46, 0x65, 0x65, 0x49, 0x6e,
	0x66, 0x6f, 0x52, 0x09, 0x62, 0x75, 0x79, 0x65, 0x72, 0x46, 0x65, 0x65, 0x73, 0x12, 0x39, 0x0a,
	0x0a, 0x70, 0x72, 0x6f, 0x6d, 0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x16, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x19, 0x2e, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72,
	0x70, 0x62, 0x2e, 0x50, 0x72, 0x6f, 0x6d, 0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0a, 0x70, 0x72,
	0x6f, 0x6d, 0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x30, 0x0a, 0x14, 0x62, 0x75, 0x79, 0x65,
	0x72, 0x5f, 0x63, 0x68, 0x61, 0x72, 0x67, 0x65, 0x64, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x17, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x62, 0x75, 0x79, 0x65, 0x72, 0x43, 0x68, 0x61,
	0x72, 0x67, 0x65, 0x64, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x34, 0x0a, 0x16, 0x73, 0x65,
	0x6c, 0x6c, 0x65, 0x72, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x5f, 0x61, 0x6d,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x18, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x73, 0x65, 0x6c, 0x6c,
	0x65, 0x72, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74,
	0x12, 0x44, 0x0a, 0x10, 0x61, 0x75, 0x74, 0x6f, 0x5f, 0x63, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x65,
	0x64, 0x5f, 0x61, 0x74, 0x18, 0x19, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0e, 0x61, 0x75, 0x74, 0x6f, 0x43, 0x61, 0x6e, 0x63,
	0x65, 0x6c, 0x65, 0x64, 0x41, 0x74, 0x12, 0x44, 0x0a, 0x10, 0x61, 0x75, 0x74, 0x6f, 0x5f, 0x66,
	0x69, 0x6e, 0x69, 0x73, 0x68, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0e, 0x61, 0x75,
	0x74, 0x6f, 0x46, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x65, 0x64, 0x41, 0x74, 0x22, 0xe2, 0x04, 0x0a,
	0x05, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f,
	0x6e, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x4e,
	0x6f, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x19, 0x0a, 0x08, 0x62, 0x75, 0x79,
	0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x62, 0x75, 0x79,
	0x65, 0x72, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x65, 0x6c, 0x6c, 0x65, 0x72, 0x5f, 0x69,
	0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x65, 0x6c, 0x6c, 0x65, 0x72, 0x49,
	0x64, 0x12, 0x2d, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x19, 0x2e, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x70, 0x62,
	0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x12, 0x23, 0x0a, 0x0d, 0x63, 0x68, 0x61, 0x72, 0x67, 0x65, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x63, 0x68, 0x61, 0x72, 0x67, 0x65, 0x41,
	0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63,
	0x79, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x63, 0x75,
	0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x72, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x49, 0x64, 0x12, 0x4a, 0x0a, 0x10, 0x63, 0x61, 0x6e,
	0x63, 0x65, 0x6c, 0x6c, 0x65, 0x64, 0x5f, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x1f, 0x2e, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x6d, 0x61, 0x6e, 0x61, 0x67,
	0x65, 0x72, 0x70, 0x62, 0x2e, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x6c, 0x65, 0x64, 0x52, 0x65,
	0x61, 0x73, 0x6f, 0x6e, 0x52, 0x0f, 0x63, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x6c, 0x65, 0x64, 0x52,
	0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x39, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64,
	0x5f, 0x61, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74,
	0x12, 0x44, 0x0a, 0x10, 0x61, 0x75, 0x74, 0x6f, 0x5f, 0x66, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x65,
	0x64, 0x5f, 0x61, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0e, 0x61, 0x75, 0x74, 0x6f, 0x46, 0x69, 0x6e, 0x69,
	0x73, 0x68, 0x65, 0x64, 0x41, 0x74, 0x12, 0x37, 0x0a, 0x0a, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x69,
	0x74, 0x65, 0x6d, 0x73, 0x18, 0x0d, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x6f, 0x72, 0x64,
	0x65, 0x72, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x70, 0x62, 0x2e, 0x4c, 0x69, 0x6e, 0x65,
	0x49, 0x74, 0x65, 0x6d, 0x52, 0x09, 0x6c, 0x69, 0x6e, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x73, 0x12,
	0x1f, 0x0a, 0x0b, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x0e,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x0a, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x73,
	0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x6f, 0x75, 0x74, 0x5f, 0x69, 0x64, 0x18,
	0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x6f, 0x75, 0x74, 0x49,
	0x64, 0x22, 0xe1, 0x01, 0x0a, 0x0a, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x49, 0x6e, 0x66, 0x6f,
	0x12, 0x2c, 0x0a, 0x04, 0x72, 0x6f, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x18,
	0x2e, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x70, 0x62, 0x2e,
	0x52, 0x6f, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x72, 0x6f, 0x6c, 0x65, 0x12, 0x17,
	0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x37, 0x0a, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f,
	0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1f, 0x2e, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x6d,
	0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x70, 0x62, 0x2e, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x6c,
	0x65, 0x64, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x52, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e,
	0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x39, 0x0a, 0x0a, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x64, 0x41, 0x74, 0x22, 0x51, 0x0a, 0x0c, 0x44, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72,
	0x79, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1f, 0x0a, 0x0b, 0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72,
	0x79, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x64, 0x65, 0x6c, 0x69,
	0x76, 0x65, 0x72, 0x79, 0x49, 0x64, 0x12, 0x20, 0x0a, 0x0c, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x69,
	0x74, 0x65, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0a, 0x6c, 0x69,
	0x6e, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x49, 0x64, 0x22, 0x4e, 0x0a, 0x0b, 0x44, 0x69, 0x73, 0x70,
	0x75, 0x74, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1d, 0x0a, 0x0a, 0x64, 0x69, 0x73, 0x70, 0x75,
	0x74, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x64, 0x69, 0x73,
	0x70, 0x75, 0x74, 0x65, 0x49, 0x64, 0x12, 0x20, 0x0a, 0x0c, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x69,
	0x74, 0x65, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0a, 0x6c, 0x69,
	0x6e, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x49, 0x64, 0x22, 0x8e, 0x01, 0x0a, 0x0e, 0x44, 0x65, 0x6c,
	0x69, 0x76, 0x65, 0x72, 0x79, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1b, 0x0a, 0x09, 0x66,
	0x61, 0x6d, 0x69, 0x6c, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x66, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x6f, 0x75, 0x72,
	0x69, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x6f,
	0x75, 0x72, 0x69, 0x65, 0x72, 0x49, 0x64, 0x12, 0x40, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x70, 0x65,
	0x72, 0x74, 0x69, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x6f, 0x72,
	0x64, 0x65, 0x72, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x70, 0x62, 0x2e, 0x44, 0x65, 0x6c,
	0x69, 0x76, 0x65, 0x72, 0x79, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x52, 0x0a, 0x70,
	0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x22, 0xb0, 0x02, 0x0a, 0x07, 0x46, 0x65,
	0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x36, 0x0a, 0x08, 0x66, 0x65, 0x65, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1b, 0x2e, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x6d,
	0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x70, 0x62, 0x2e, 0x46, 0x65, 0x65, 0x4e, 0x61, 0x6d, 0x65,
	0x54, 0x79, 0x70, 0x65, 0x52, 0x07, 0x66, 0x65, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x21, 0x0a,
	0x0c, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74,
	0x12, 0x43, 0x0a, 0x0e, 0x66, 0x65, 0x65, 0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e,
	0x74, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x6f, 0x72, 0x64, 0x65, 0x72,
	0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x70, 0x62, 0x2e, 0x46, 0x65, 0x65, 0x43, 0x6f, 0x6d,
	0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x52, 0x0d, 0x66, 0x65, 0x65, 0x43, 0x6f, 0x6d, 0x70, 0x6f,
	0x6e, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x1e, 0x0a, 0x0b, 0x66, 0x65, 0x65, 0x5f, 0x72, 0x75, 0x6c,
	0x65, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x66, 0x65, 0x65, 0x52,
	0x75, 0x6c, 0x65, 0x49, 0x64, 0x12, 0x25, 0x0a, 0x03, 0x67, 0x73, 0x74, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x13, 0x2e, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65,
	0x72, 0x70, 0x62, 0x2e, 0x47, 0x53, 0x54, 0x52, 0x03, 0x67, 0x73, 0x74, 0x12, 0x3e, 0x0a, 0x0c,
	0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65,
	0x72, 0x70, 0x62, 0x2e, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x4d, 0x65, 0x74, 0x61, 0x52,
	0x0b, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x4d, 0x65, 0x74, 0x61, 0x22, 0x87, 0x01, 0x0a,
	0x0c, 0x46, 0x65, 0x65, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x12, 0x42, 0x0a,
	0x0e, 0x66, 0x65, 0x65, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1c, 0x2e, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x6d, 0x61, 0x6e,
	0x61, 0x67, 0x65, 0x72, 0x70, 0x62, 0x2e, 0x46, 0x65, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x54,
	0x79, 0x70, 0x65, 0x52, 0x0c, 0x66, 0x65, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x1b, 0x0a, 0x09, 0x66, 0x65, 0x65, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x66, 0x65, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x16,
	0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0xa2, 0x01, 0x0a, 0x03, 0x47, 0x53, 0x54, 0x12, 0x21,
	0x0a, 0x0c, 0x69, 0x73, 0x5f, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x73, 0x69, 0x76, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x69, 0x73, 0x49, 0x6e, 0x63, 0x6c, 0x75, 0x73, 0x69, 0x76,
	0x65, 0x12, 0x25, 0x0a, 0x0f, 0x67, 0x73, 0x74, 0x5f, 0x66, 0x65, 0x65, 0x5f, 0x72, 0x75, 0x6c,
	0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x67, 0x73, 0x74, 0x46,
	0x65, 0x65, 0x52, 0x75, 0x6c, 0x65, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x70, 0x65, 0x72, 0x63,
	0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x70, 0x65,
	0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74,
	0x12, 0x19, 0x0a, 0x08, 0x74, 0x61, 0x78, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x74, 0x61, 0x78, 0x43, 0x6f, 0x64, 0x65, 0x22, 0x2f, 0x0a, 0x0b, 0x44,
	0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x4d, 0x65, 0x74, 0x61, 0x12, 0x20, 0x0a, 0x0c, 0x66, 0x65,
	0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x5f, 0x74, 0x61, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x66, 0x65, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x54, 0x61, 0x67, 0x22, 0x7e, 0x0a, 0x09,
	0x50, 0x72, 0x6f, 0x6d, 0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x65, 0x6c,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x25, 0x0a, 0x0e,
	0x70, 0x72, 0x6f, 0x6d, 0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x70, 0x72, 0x6f, 0x6d, 0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x43,
	0x6f, 0x64, 0x65, 0x12, 0x27, 0x0a, 0x0f, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f,
	0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x64, 0x69,
	0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0xbb, 0x01, 0x0a,
	0x22, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x44, 0x69, 0x73, 0x70, 0x75, 0x74, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x30, 0x0a, 0x14, 0x66, 0x75, 0x6c, 0x66, 0x75, 0x6c, 0x6c, 0x6d, 0x65,
	0x6e, 0x74, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x12, 0x66, 0x75, 0x6c, 0x66, 0x75, 0x6c, 0x6c, 0x6d, 0x65, 0x6e, 0x74, 0x4f, 0x72,
	0x64, 0x65, 0x72, 0x49, 0x64, 0x12, 0x63, 0x0a, 0x1a, 0x64, 0x69, 0x73, 0x70, 0x75, 0x74, 0x65,
	0x5f, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x6d, 0x61, 0x70, 0x70, 0x69,
	0x6e, 0x67, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x6f, 0x72, 0x64, 0x65,
	0x72, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x70, 0x62, 0x2e, 0x44, 0x69, 0x73, 0x70, 0x75,
	0x74, 0x65, 0x4c, 0x69, 0x6e, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e,
	0x67, 0x52, 0x17, 0x64, 0x69, 0x73, 0x70, 0x75, 0x74, 0x65, 0x4c, 0x69, 0x6e, 0x65, 0x49, 0x74,
	0x65, 0x6d, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x73, 0x22, 0x25, 0x0a, 0x23, 0x4e, 0x6f,
	0x74, 0x69, 0x66, 0x79, 0x44, 0x69, 0x73, 0x70, 0x75, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0xba, 0x01, 0x0a, 0x21, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x44, 0x69, 0x73, 0x70,
	0x75, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x64,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x30, 0x0a, 0x14, 0x66, 0x75, 0x6c, 0x66, 0x75,
	0x6c, 0x6c, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x66, 0x75, 0x6c, 0x66, 0x75, 0x6c, 0x6c, 0x6d, 0x65,
	0x6e, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x64, 0x12, 0x63, 0x0a, 0x1a, 0x64, 0x69, 0x73,
	0x70, 0x75, 0x74, 0x65, 0x5f, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x6d,
	0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x26, 0x2e,
	0x6f, 0x72, 0x64, 0x65, 0x72, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x70, 0x62, 0x2e, 0x44,
	0x69, 0x73, 0x70, 0x75, 0x74, 0x65, 0x4c, 0x69, 0x6e, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x4d, 0x61,
	0x70, 0x70, 0x69, 0x6e, 0x67, 0x52, 0x17, 0x64, 0x69, 0x73, 0x70, 0x75, 0x74, 0x65, 0x4c, 0x69,
	0x6e, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x73, 0x22, 0x24,
	0x0a, 0x22, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x44, 0x69, 0x73, 0x70, 0x75, 0x74, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x64, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x9c, 0x01, 0x0a, 0x16, 0x44, 0x69, 0x73, 0x70, 0x75, 0x74, 0x65,
	0x4c, 0x69, 0x6e, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x12,
	0x1d, 0x0a, 0x0a, 0x64, 0x69, 0x73, 0x70, 0x75, 0x74, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x64, 0x69, 0x73, 0x70, 0x75, 0x74, 0x65, 0x49, 0x64, 0x12, 0x20,
	0x0a, 0x0c, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6c, 0x69, 0x6e, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x49, 0x64,
	0x12, 0x41, 0x0a, 0x0d, 0x64, 0x69, 0x73, 0x70, 0x75, 0x74, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1c, 0x2e, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x6d,
	0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x70, 0x62, 0x2e, 0x44, 0x69, 0x73, 0x70, 0x75, 0x74, 0x65,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x0c, 0x64, 0x69, 0x73, 0x70, 0x75, 0x74, 0x65, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x22, 0xd3, 0x02, 0x0a, 0x24, 0x46, 0x75, 0x6c, 0x66, 0x69, 0x6c, 0x6c, 0x6d,
	0x65, 0x6e, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x4c, 0x69, 0x6e, 0x65, 0x49, 0x74, 0x6d, 0x65,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x30, 0x0a, 0x14,
	0x66, 0x75, 0x6c, 0x66, 0x69, 0x6c, 0x6c, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x6f, 0x72, 0x64, 0x65,
	0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x66, 0x75, 0x6c, 0x66,
	0x69, 0x6c, 0x6c, 0x6d, 0x65, 0x6e, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x64, 0x12, 0x20,
	0x0a, 0x0c, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6c, 0x69, 0x6e, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x49, 0x64,
	0x12, 0x45, 0x0a, 0x0f, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1d, 0x2e, 0x6f, 0x72, 0x64, 0x65,
	0x72, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x70, 0x62, 0x2e, 0x4c, 0x69, 0x6e, 0x65, 0x49,
	0x74, 0x65, 0x6d, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x0d, 0x6c, 0x69, 0x6e, 0x65, 0x49, 0x74,
	0x65, 0x6d, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x65, 0x6c, 0x6c, 0x65,
	0x72, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x73, 0x65, 0x6c, 0x6c,
	0x65, 0x72, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x62, 0x75, 0x79, 0x65, 0x72, 0x5f, 0x69, 0x64,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x62, 0x75, 0x79, 0x65, 0x72, 0x49, 0x64, 0x12,
	0x1d, 0x0a, 0x0a, 0x6c, 0x69, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x09, 0x6c, 0x69, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x49, 0x64, 0x12, 0x39,
	0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09,
	0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x22, 0x8a, 0x02, 0x0a, 0x17, 0x53, 0x74,
	0x61, 0x72, 0x74, 0x44, 0x32, 0x44, 0x44, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x64,
	0x12, 0x1d, 0x0a, 0x0a, 0x62, 0x75, 0x79, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x62, 0x75, 0x79, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x1f, 0x0a, 0x0b, 0x62, 0x75, 0x79, 0x65, 0x72, 0x5f, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x62, 0x75, 0x79, 0x65, 0x72, 0x50, 0x68, 0x6f, 0x6e, 0x65,
	0x12, 0x1f, 0x0a, 0x0b, 0x62, 0x75, 0x79, 0x65, 0x72, 0x5f, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x62, 0x75, 0x79, 0x65, 0x72, 0x45, 0x6d, 0x61, 0x69,
	0x6c, 0x12, 0x31, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x17, 0x2e, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65,
	0x72, 0x70, 0x62, 0x2e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x07, 0x61, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x69, 0x63, 0x6b, 0x75, 0x70, 0x5f, 0x64,
	0x61, 0x74, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x70, 0x69, 0x63, 0x6b, 0x75,
	0x70, 0x44, 0x61, 0x74, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x69, 0x63, 0x6b, 0x75, 0x70, 0x5f,
	0x73, 0x6c, 0x6f, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x70, 0x69, 0x63, 0x6b,
	0x75, 0x70, 0x53, 0x6c, 0x6f, 0x74, 0x22, 0x1a, 0x0a, 0x18, 0x53, 0x74, 0x61, 0x72, 0x74, 0x44,
	0x32, 0x44, 0x44, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0xbf, 0x01, 0x0a, 0x07, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x18,
	0x0a, 0x07, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x12,
	0x0a, 0x04, 0x63, 0x69, 0x74, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x63, 0x69,
	0x74, 0x79, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x6f, 0x73, 0x74, 0x61, 0x6c, 0x5f, 0x63, 0x6f, 0x64,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x70, 0x6f, 0x73, 0x74, 0x61, 0x6c, 0x43,
	0x6f, 0x64, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x6e, 0x69, 0x74, 0x5f, 0x6e, 0x6f, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x6e, 0x69, 0x74, 0x4e, 0x6f, 0x12, 0x1a, 0x0a, 0x08,
	0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x31, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x31, 0x12, 0x1a, 0x0a, 0x08, 0x61, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x32, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x61, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x32, 0x2a, 0x4e, 0x0a, 0x09, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x13, 0x0a, 0x0b, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44,
	0x10, 0x00, 0x1a, 0x02, 0x08, 0x01, 0x12, 0x15, 0x0a, 0x0d, 0x4f, 0x52, 0x44, 0x45, 0x52, 0x5f,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x41, 0x50, 0x10, 0x01, 0x1a, 0x02, 0x08, 0x01, 0x12, 0x15, 0x0a,
	0x0d, 0x4f, 0x52, 0x44, 0x45, 0x52, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x42, 0x50, 0x10, 0x02,
	0x1a, 0x02, 0x08, 0x01, 0x2a, 0xd0, 0x05, 0x0a, 0x0f, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x6c,
	0x65, 0x64, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x20, 0x0a, 0x1c, 0x43, 0x41, 0x4e, 0x43,
	0x45, 0x4c, 0x4c, 0x45, 0x44, 0x5f, 0x52, 0x45, 0x41, 0x53, 0x4f, 0x4e, 0x5f, 0x55, 0x4e, 0x53,
	0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x26, 0x0a, 0x22, 0x43, 0x41,
	0x4e, 0x43, 0x45, 0x4c, 0x4c, 0x45, 0x44, 0x5f, 0x52, 0x45, 0x41, 0x53, 0x4f, 0x4e, 0x5f, 0x42,
	0x55, 0x59, 0x45, 0x52, 0x5f, 0x41, 0x4c, 0x54, 0x5f, 0x50, 0x52, 0x4f, 0x44, 0x55, 0x43, 0x54,
	0x10, 0x01, 0x12, 0x24, 0x0a, 0x20, 0x43, 0x41, 0x4e, 0x43, 0x45, 0x4c, 0x4c, 0x45, 0x44, 0x5f,
	0x52, 0x45, 0x41, 0x53, 0x4f, 0x4e, 0x5f, 0x42, 0x55, 0x59, 0x45, 0x52, 0x5f, 0x57, 0x41, 0x49,
	0x54, 0x5f, 0x54, 0x49, 0x4d, 0x45, 0x10, 0x02, 0x12, 0x29, 0x0a, 0x25, 0x43, 0x41, 0x4e, 0x43,
	0x45, 0x4c, 0x4c, 0x45, 0x44, 0x5f, 0x52, 0x45, 0x41, 0x53, 0x4f, 0x4e, 0x5f, 0x42, 0x55, 0x59,
	0x45, 0x52, 0x5f, 0x4d, 0x55, 0x4c, 0x54, 0x49, 0x50, 0x4c, 0x45, 0x5f, 0x49, 0x54, 0x45, 0x4d,
	0x53, 0x10, 0x03, 0x12, 0x22, 0x0a, 0x1e, 0x43, 0x41, 0x4e, 0x43, 0x45, 0x4c, 0x4c, 0x45, 0x44,
	0x5f, 0x52, 0x45, 0x41, 0x53, 0x4f, 0x4e, 0x5f, 0x42, 0x55, 0x59, 0x45, 0x52, 0x5f, 0x4d, 0x49,
	0x53, 0x54, 0x41, 0x4b, 0x45, 0x10, 0x04, 0x12, 0x22, 0x0a, 0x1e, 0x43, 0x41, 0x4e, 0x43, 0x45,
	0x4c, 0x4c, 0x45, 0x44, 0x5f, 0x52, 0x45, 0x41, 0x53, 0x4f, 0x4e, 0x5f, 0x42, 0x4f, 0x54, 0x48,
	0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x53, 0x55, 0x52, 0x45, 0x10, 0x05, 0x12, 0x20, 0x0a, 0x1c, 0x43,
	0x41, 0x4e, 0x43, 0x45, 0x4c, 0x4c, 0x45, 0x44, 0x5f, 0x52, 0x45, 0x41, 0x53, 0x4f, 0x4e, 0x5f,
	0x42, 0x4f, 0x54, 0x48, 0x5f, 0x4f, 0x54, 0x48, 0x45, 0x52, 0x53, 0x10, 0x06, 0x12, 0x28, 0x0a,
	0x24, 0x43, 0x41, 0x4e, 0x43, 0x45, 0x4c, 0x4c, 0x45, 0x44, 0x5f, 0x52, 0x45, 0x41, 0x53, 0x4f,
	0x4e, 0x5f, 0x53, 0x45, 0x4c, 0x4c, 0x45, 0x52, 0x5f, 0x43, 0x48, 0x41, 0x4e, 0x47, 0x45, 0x44,
	0x5f, 0x4d, 0x49, 0x4e, 0x44, 0x10, 0x07, 0x12, 0x25, 0x0a, 0x21, 0x43, 0x41, 0x4e, 0x43, 0x45,
	0x4c, 0x4c, 0x45, 0x44, 0x5f, 0x52, 0x45, 0x41, 0x53, 0x4f, 0x4e, 0x5f, 0x53, 0x45, 0x4c, 0x4c,
	0x45, 0x52, 0x5f, 0x4d, 0x49, 0x53, 0x51, 0x55, 0x4f, 0x54, 0x45, 0x44, 0x10, 0x08, 0x12, 0x28,
	0x0a, 0x24, 0x43, 0x41, 0x4e, 0x43, 0x45, 0x4c, 0x4c, 0x45, 0x44, 0x5f, 0x52, 0x45, 0x41, 0x53,
	0x4f, 0x4e, 0x5f, 0x53, 0x45, 0x4c, 0x4c, 0x45, 0x52, 0x5f, 0x4f, 0x55, 0x54, 0x5f, 0x4f, 0x46,
	0x5f, 0x53, 0x54, 0x4f, 0x43, 0x4b, 0x10, 0x09, 0x12, 0x28, 0x0a, 0x24, 0x43, 0x41, 0x4e, 0x43,
	0x45, 0x4c, 0x4c, 0x45, 0x44, 0x5f, 0x52, 0x45, 0x41, 0x53, 0x4f, 0x4e, 0x5f, 0x53, 0x45, 0x4c,
	0x4c, 0x45, 0x52, 0x5f, 0x49, 0x54, 0x45, 0x4d, 0x5f, 0x44, 0x41, 0x4d, 0x41, 0x47, 0x45, 0x44,
	0x10, 0x0a, 0x12, 0x2a, 0x0a, 0x26, 0x43, 0x41, 0x4e, 0x43, 0x45, 0x4c, 0x4c, 0x45, 0x44, 0x5f,
	0x52, 0x45, 0x41, 0x53, 0x4f, 0x4e, 0x5f, 0x42, 0x4f, 0x54, 0x48, 0x5f, 0x4e, 0x4f, 0x54, 0x5f,
	0x53, 0x55, 0x52, 0x45, 0x5f, 0x50, 0x41, 0x59, 0x4d, 0x45, 0x4e, 0x54, 0x10, 0x0b, 0x12, 0x2b,
	0x0a, 0x27, 0x43, 0x41, 0x4e, 0x43, 0x45, 0x4c, 0x4c, 0x45, 0x44, 0x5f, 0x52, 0x45, 0x41, 0x53,
	0x4f, 0x4e, 0x5f, 0x42, 0x4f, 0x54, 0x48, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x53, 0x55, 0x52, 0x45,
	0x5f, 0x53, 0x48, 0x49, 0x50, 0x50, 0x49, 0x4e, 0x47, 0x10, 0x0c, 0x12, 0x29, 0x0a, 0x25, 0x43,
	0x41, 0x4e, 0x43, 0x45, 0x4c, 0x4c, 0x45, 0x44, 0x5f, 0x52, 0x45, 0x41, 0x53, 0x4f, 0x4e, 0x5f,
	0x53, 0x45, 0x4c, 0x4c, 0x45, 0x52, 0x5f, 0x41, 0x53, 0x4b, 0x5f, 0x54, 0x4f, 0x5f, 0x43, 0x41,
	0x4e, 0x43, 0x45, 0x4c, 0x10, 0x0d, 0x12, 0x30, 0x0a, 0x2c, 0x43, 0x41, 0x4e, 0x43, 0x45, 0x4c,
	0x4c, 0x45, 0x44, 0x5f, 0x52, 0x45, 0x41, 0x53, 0x4f, 0x4e, 0x5f, 0x53, 0x59, 0x53, 0x54, 0x45,
	0x4d, 0x5f, 0x44, 0x45, 0x4c, 0x49, 0x56, 0x45, 0x52, 0x59, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x53,
	0x54, 0x41, 0x52, 0x54, 0x45, 0x44, 0x10, 0x0e, 0x12, 0x31, 0x0a, 0x2d, 0x43, 0x41, 0x4e, 0x43,
	0x45, 0x4c, 0x4c, 0x45, 0x44, 0x5f, 0x52, 0x45, 0x41, 0x53, 0x4f, 0x4e, 0x5f, 0x53, 0x59, 0x53,
	0x54, 0x45, 0x4d, 0x5f, 0x4d, 0x45, 0x45, 0x54, 0x5f, 0x55, 0x50, 0x5f, 0x4e, 0x4f, 0x54, 0x5f,
	0x53, 0x43, 0x48, 0x45, 0x44, 0x55, 0x4c, 0x45, 0x44, 0x10, 0x0f, 0x12, 0x2a, 0x0a, 0x26, 0x43,
	0x41, 0x4e, 0x43, 0x45, 0x4c, 0x4c, 0x45, 0x44, 0x5f, 0x52, 0x45, 0x41, 0x53, 0x4f, 0x4e, 0x5f,
	0x53, 0x59, 0x53, 0x54, 0x45, 0x4d, 0x5f, 0x50, 0x49, 0x43, 0x4b, 0x5f, 0x55, 0x50, 0x5f, 0x46,
	0x41, 0x49, 0x4c, 0x45, 0x44, 0x10, 0x10, 0x2a, 0x6d, 0x0a, 0x08, 0x49, 0x74, 0x65, 0x6d, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x19, 0x0a, 0x15, 0x49, 0x54, 0x45, 0x4d, 0x5f, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x10,
	0x0a, 0x0c, 0x49, 0x54, 0x45, 0x4d, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x42, 0x10, 0x01,
	0x12, 0x10, 0x0a, 0x0c, 0x49, 0x54, 0x45, 0x4d, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x43, 0x50,
	0x10, 0x02, 0x12, 0x10, 0x0a, 0x0c, 0x49, 0x54, 0x45, 0x4d, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x42, 0x50, 0x10, 0x03, 0x12, 0x10, 0x0a, 0x0c, 0x49, 0x54, 0x45, 0x4d, 0x5f, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x41, 0x50, 0x10, 0x04, 0x2a, 0x8e, 0x02, 0x0a, 0x0d, 0x4c, 0x69, 0x6e, 0x65, 0x49,
	0x74, 0x65, 0x6d, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x1f, 0x0a, 0x1b, 0x4c, 0x49, 0x4e, 0x45,
	0x5f, 0x49, 0x54, 0x45, 0x4d, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50,
	0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x18, 0x0a, 0x14, 0x4c, 0x49, 0x4e,
	0x45, 0x5f, 0x49, 0x54, 0x45, 0x4d, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x49, 0x4e, 0x49,
	0x54, 0x10, 0x01, 0x12, 0x1d, 0x0a, 0x19, 0x4c, 0x49, 0x4e, 0x45, 0x5f, 0x49, 0x54, 0x45, 0x4d,
	0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x43, 0x41, 0x4e, 0x43, 0x45, 0x4c, 0x4c, 0x45, 0x44,
	0x10, 0x02, 0x12, 0x1e, 0x0a, 0x1a, 0x4c, 0x49, 0x4e, 0x45, 0x5f, 0x49, 0x54, 0x45, 0x4d, 0x5f,
	0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x50, 0x52, 0x4f, 0x43, 0x45, 0x53, 0x53, 0x49, 0x4e, 0x47,
	0x10, 0x03, 0x12, 0x1d, 0x0a, 0x19, 0x4c, 0x49, 0x4e, 0x45, 0x5f, 0x49, 0x54, 0x45, 0x4d, 0x5f,
	0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x46, 0x55, 0x4c, 0x46, 0x49, 0x4c, 0x4c, 0x45, 0x44, 0x10,
	0x04, 0x12, 0x20, 0x0a, 0x1c, 0x4c, 0x49, 0x4e, 0x45, 0x5f, 0x49, 0x54, 0x45, 0x4d, 0x5f, 0x53,
	0x54, 0x41, 0x54, 0x45, 0x5f, 0x49, 0x4e, 0x5f, 0x45, 0x58, 0x43, 0x45, 0x50, 0x54, 0x49, 0x4f,
	0x4e, 0x10, 0x05, 0x12, 0x1c, 0x0a, 0x18, 0x4c, 0x49, 0x4e, 0x45, 0x5f, 0x49, 0x54, 0x45, 0x4d,
	0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x46, 0x49, 0x4e, 0x49, 0x53, 0x48, 0x45, 0x44, 0x10,
	0x06, 0x12, 0x24, 0x0a, 0x20, 0x4c, 0x49, 0x4e, 0x45, 0x5f, 0x49, 0x54, 0x45, 0x4d, 0x5f, 0x53,
	0x54, 0x41, 0x54, 0x45, 0x5f, 0x44, 0x49, 0x53, 0x50, 0x55, 0x54, 0x45, 0x5f, 0x52, 0x45, 0x53,
	0x4f, 0x4c, 0x56, 0x45, 0x44, 0x10, 0x07, 0x2a, 0xd6, 0x02, 0x0a, 0x15, 0x46, 0x75, 0x6c, 0x66,
	0x69, 0x6c, 0x6c, 0x6d, 0x65, 0x6e, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x12, 0x27, 0x0a, 0x23, 0x46, 0x55, 0x4c, 0x46, 0x49, 0x4c, 0x4c, 0x4d, 0x45, 0x4e, 0x54,
	0x5f, 0x4f, 0x52, 0x44, 0x45, 0x52, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x55, 0x4e, 0x53,
	0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x20, 0x0a, 0x1c, 0x46, 0x55,
	0x4c, 0x46, 0x49, 0x4c, 0x4c, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x4f, 0x52, 0x44, 0x45, 0x52, 0x5f,
	0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x49, 0x4e, 0x49, 0x54, 0x10, 0x01, 0x12, 0x25, 0x0a, 0x21,
	0x46, 0x55, 0x4c, 0x46, 0x49, 0x4c, 0x4c, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x4f, 0x52, 0x44, 0x45,
	0x52, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x43, 0x41, 0x4e, 0x43, 0x45, 0x4c, 0x4c, 0x45,
	0x44, 0x10, 0x02, 0x12, 0x26, 0x0a, 0x22, 0x46, 0x55, 0x4c, 0x46, 0x49, 0x4c, 0x4c, 0x4d, 0x45,
	0x4e, 0x54, 0x5f, 0x4f, 0x52, 0x44, 0x45, 0x52, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x50,
	0x52, 0x4f, 0x43, 0x45, 0x53, 0x53, 0x49, 0x4e, 0x47, 0x10, 0x03, 0x12, 0x25, 0x0a, 0x21, 0x46,
	0x55, 0x4c, 0x46, 0x49, 0x4c, 0x4c, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x4f, 0x52, 0x44, 0x45, 0x52,
	0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x46, 0x55, 0x4c, 0x46, 0x49, 0x4c, 0x4c, 0x45, 0x44,
	0x10, 0x04, 0x12, 0x28, 0x0a, 0x24, 0x46, 0x55, 0x4c, 0x46, 0x49, 0x4c, 0x4c, 0x4d, 0x45, 0x4e,
	0x54, 0x5f, 0x4f, 0x52, 0x44, 0x45, 0x52, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x49, 0x4e,
	0x5f, 0x45, 0x58, 0x43, 0x45, 0x50, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x05, 0x12, 0x24, 0x0a, 0x20,
	0x46, 0x55, 0x4c, 0x46, 0x49, 0x4c, 0x4c, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x4f, 0x52, 0x44, 0x45,
	0x52, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x46, 0x49, 0x4e, 0x49, 0x53, 0x48, 0x45, 0x44,
	0x10, 0x06, 0x12, 0x2c, 0x0a, 0x28, 0x46, 0x55, 0x4c, 0x46, 0x49, 0x4c, 0x4c, 0x4d, 0x45, 0x4e,
	0x54, 0x5f, 0x4f, 0x52, 0x44, 0x45, 0x52, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x44, 0x49,
	0x53, 0x50, 0x55, 0x54, 0x45, 0x5f, 0x52, 0x45, 0x53, 0x4f, 0x4c, 0x56, 0x45, 0x44, 0x10, 0x07,
	0x2a, 0x7b, 0x0a, 0x08, 0x52, 0x6f, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x19, 0x0a, 0x15,
	0x52, 0x4f, 0x4c, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43,
	0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x14, 0x0a, 0x10, 0x52, 0x4f, 0x4c, 0x45, 0x5f,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x45, 0x4c, 0x4c, 0x45, 0x52, 0x10, 0x01, 0x12, 0x13, 0x0a,
	0x0f, 0x52, 0x4f, 0x4c, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x42, 0x55, 0x59, 0x45, 0x52,
	0x10, 0x02, 0x12, 0x14, 0x0a, 0x10, 0x52, 0x4f, 0x4c, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x53, 0x59, 0x53, 0x54, 0x45, 0x4d, 0x10, 0x03, 0x12, 0x13, 0x0a, 0x0f, 0x52, 0x4f, 0x4c, 0x45,
	0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x41, 0x44, 0x4d, 0x49, 0x4e, 0x10, 0x04, 0x2a, 0x88, 0x01,
	0x0a, 0x0b, 0x46, 0x65, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x19, 0x0a,
	0x15, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x5f, 0x46, 0x45, 0x45, 0x5f, 0x4e, 0x41, 0x4d,
	0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x10, 0x00, 0x12, 0x10, 0x0a, 0x0c, 0x50, 0x4c, 0x41, 0x54,
	0x46, 0x4f, 0x52, 0x4d, 0x5f, 0x46, 0x45, 0x45, 0x10, 0x01, 0x12, 0x18, 0x0a, 0x14, 0x42, 0x55,
	0x59, 0x45, 0x52, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x45, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x46,
	0x45, 0x45, 0x10, 0x02, 0x12, 0x1a, 0x0a, 0x16, 0x50, 0x41, 0x59, 0x4d, 0x45, 0x4e, 0x54, 0x5f,
	0x50, 0x52, 0x4f, 0x43, 0x45, 0x53, 0x53, 0x49, 0x4e, 0x47, 0x5f, 0x46, 0x45, 0x45, 0x10, 0x03,
	0x12, 0x16, 0x0a, 0x11, 0x41, 0x4c, 0x4c, 0x5f, 0x46, 0x45, 0x45, 0x5f, 0x4e, 0x41, 0x4d, 0x45,
	0x5f, 0x54, 0x59, 0x50, 0x45, 0x10, 0xe7, 0x07, 0x2a, 0x44, 0x0a, 0x0c, 0x46, 0x65, 0x65, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1a, 0x0a, 0x16, 0x55, 0x4e, 0x4b, 0x4e,
	0x4f, 0x57, 0x4e, 0x5f, 0x46, 0x45, 0x45, 0x5f, 0x56, 0x41, 0x4c, 0x55, 0x45, 0x5f, 0x54, 0x59,
	0x50, 0x45, 0x10, 0x00, 0x12, 0x0e, 0x0a, 0x0a, 0x50, 0x45, 0x52, 0x43, 0x45, 0x4e, 0x54, 0x41,
	0x47, 0x45, 0x10, 0x01, 0x12, 0x08, 0x0a, 0x04, 0x46, 0x4c, 0x41, 0x54, 0x10, 0x02, 0x2a, 0x82,
	0x01, 0x0a, 0x0c, 0x44, 0x69, 0x73, 0x70, 0x75, 0x74, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12,
	0x1d, 0x0a, 0x19, 0x44, 0x49, 0x53, 0x50, 0x55, 0x54, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45,
	0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x1a,
	0x0a, 0x16, 0x44, 0x49, 0x53, 0x50, 0x55, 0x54, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f,
	0x52, 0x45, 0x53, 0x4f, 0x4c, 0x56, 0x45, 0x44, 0x10, 0x01, 0x12, 0x1b, 0x0a, 0x17, 0x44, 0x49,
	0x53, 0x50, 0x55, 0x54, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x43, 0x41, 0x4e, 0x43,
	0x45, 0x4c, 0x4c, 0x45, 0x44, 0x10, 0x02, 0x12, 0x1a, 0x0a, 0x16, 0x44, 0x49, 0x53, 0x50, 0x55,
	0x54, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x44, 0x45, 0x43, 0x4c, 0x49, 0x4e, 0x45,
	0x44, 0x10, 0x03, 0x32, 0xa6, 0x07, 0x0a, 0x0c, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x4d, 0x61, 0x6e,
	0x61, 0x67, 0x65, 0x72, 0x12, 0x52, 0x0a, 0x09, 0x47, 0x65, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72,
	0x73, 0x12, 0x20, 0x2e, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72,
	0x70, 0x62, 0x2e, 0x47, 0x65, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x21, 0x2e, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x6d, 0x61, 0x6e, 0x61, 0x67,
	0x65, 0x72, 0x70, 0x62, 0x2e, 0x47, 0x65, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x58, 0x0a, 0x0b, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x22, 0x2e, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x6d,
	0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x70, 0x62, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4f,
	0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x23, 0x2e, 0x6f, 0x72,
	0x64, 0x65, 0x72, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x70, 0x62, 0x2e, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x00, 0x12, 0x58, 0x0a, 0x0b, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x4f, 0x72, 0x64, 0x65,
	0x72, 0x12, 0x22, 0x2e, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72,
	0x70, 0x62, 0x2e, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x23, 0x2e, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x6d, 0x61, 0x6e,
	0x61, 0x67, 0x65, 0x72, 0x70, 0x62, 0x2e, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x4f, 0x72, 0x64,
	0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x61, 0x0a, 0x0e,
	0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x4d, 0x65, 0x65, 0x74, 0x75, 0x70, 0x12, 0x25,
	0x2e, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x70, 0x62, 0x2e,
	0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x4d, 0x65, 0x65, 0x74, 0x75, 0x70, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x26, 0x2e, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x6d, 0x61, 0x6e,
	0x61, 0x67, 0x65, 0x72, 0x70, 0x62, 0x2e, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x4d,
	0x65, 0x65, 0x74, 0x75, 0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12,
	0x58, 0x0a, 0x0b, 0x46, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x22,
	0x2e, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x70, 0x62, 0x2e,
	0x46, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x23, 0x2e, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65,
	0x72, 0x70, 0x62, 0x2e, 0x46, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x55, 0x0a, 0x0e, 0x52, 0x65, 0x63,
	0x65, 0x69, 0x76, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x1f, 0x2e, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x20, 0x2e, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00,
	0x12, 0x88, 0x01, 0x0a, 0x1b, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x44, 0x69, 0x73, 0x70, 0x75,
	0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64,
	0x12, 0x32, 0x2e, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x70,
	0x62, 0x2e, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x44, 0x69, 0x73, 0x70, 0x75, 0x74, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x33, 0x2e, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x6d, 0x61, 0x6e, 0x61,
	0x67, 0x65, 0x72, 0x70, 0x62, 0x2e, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x44, 0x69, 0x73, 0x70,
	0x75, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x85, 0x01, 0x0a, 0x1a,
	0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x44, 0x69, 0x73, 0x70, 0x75, 0x74, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x64, 0x12, 0x31, 0x2e, 0x6f, 0x72, 0x64,
	0x65, 0x72, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x70, 0x62, 0x2e, 0x4e, 0x6f, 0x74, 0x69,
	0x66, 0x79, 0x44, 0x69, 0x73, 0x70, 0x75, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x43, 0x6c, 0x6f, 0x73, 0x65, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x32, 0x2e,
	0x6f, 0x72, 0x64, 0x65, 0x72, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x70, 0x62, 0x2e, 0x4e,
	0x6f, 0x74, 0x69, 0x66, 0x79, 0x44, 0x69, 0x73, 0x70, 0x75, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x00, 0x12, 0x67, 0x0a, 0x10, 0x53, 0x74, 0x61, 0x72, 0x74, 0x44, 0x32, 0x44, 0x44,
	0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x12, 0x27, 0x2e, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x6d,
	0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x70, 0x62, 0x2e, 0x53, 0x74, 0x61, 0x72, 0x74, 0x44, 0x32,
	0x44, 0x44, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x28, 0x2e, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x70,
	0x62, 0x2e, 0x53, 0x74, 0x61, 0x72, 0x74, 0x44, 0x32, 0x44, 0x44, 0x65, 0x6c, 0x69, 0x76, 0x65,
	0x72, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x42, 0x42, 0x5a, 0x40,
	0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x63, 0x61, 0x72, 0x6f, 0x75,
	0x73, 0x65, 0x6c, 0x6c, 0x2f, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65,
	0x72, 0x2f, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2f, 0x70,
	0x62, 0x2f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x70, 0x62,
	0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_OrderManager_OrderManager_proto_rawDescOnce sync.Once
	file_OrderManager_OrderManager_proto_rawDescData = file_OrderManager_OrderManager_proto_rawDesc
)

func file_OrderManager_OrderManager_proto_rawDescGZIP() []byte {
	file_OrderManager_OrderManager_proto_rawDescOnce.Do(func() {
		file_OrderManager_OrderManager_proto_rawDescData = protoimpl.X.CompressGZIP(file_OrderManager_OrderManager_proto_rawDescData)
	})
	return file_OrderManager_OrderManager_proto_rawDescData
}

var file_OrderManager_OrderManager_proto_enumTypes = make([]protoimpl.EnumInfo, 9)
var file_OrderManager_OrderManager_proto_msgTypes = make([]protoimpl.MessageInfo, 35)
var file_OrderManager_OrderManager_proto_goTypes = []interface{}{
	(OrderType)(0),                               // 0: ordermanagerpb.OrderType
	(CancelledReason)(0),                         // 1: ordermanagerpb.CancelledReason
	(ItemType)(0),                                // 2: ordermanagerpb.ItemType
	(LineItemState)(0),                           // 3: ordermanagerpb.LineItemState
	(FulfillmentOrderState)(0),                   // 4: ordermanagerpb.FulfillmentOrderState
	(RoleType)(0),                                // 5: ordermanagerpb.RoleType
	(FeeNameType)(0),                             // 6: ordermanagerpb.FeeNameType
	(FeeValueType)(0),                            // 7: ordermanagerpb.FeeValueType
	(DisputeState)(0),                            // 8: ordermanagerpb.DisputeState
	(*Pagination)(nil),                           // 9: ordermanagerpb.Pagination
	(*PaginationRequest)(nil),                    // 10: ordermanagerpb.PaginationRequest
	(*GetOrdersRequest)(nil),                     // 11: ordermanagerpb.GetOrdersRequest
	(*GetOrdersResponse)(nil),                    // 12: ordermanagerpb.GetOrdersResponse
	(*LineItem)(nil),                             // 13: ordermanagerpb.LineItem
	(*ListingSnapshot)(nil),                      // 14: ordermanagerpb.ListingSnapshot
	(*CreateOrderRequest)(nil),                   // 15: ordermanagerpb.CreateOrderRequest
	(*CreateOrderResponse)(nil),                  // 16: ordermanagerpb.CreateOrderResponse
	(*CancelOrderRequest)(nil),                   // 17: ordermanagerpb.CancelOrderRequest
	(*CancelOrderResponse)(nil),                  // 18: ordermanagerpb.CancelOrderResponse
	(*ScheduleMeetupRequest)(nil),                // 19: ordermanagerpb.ScheduleMeetupRequest
	(*ScheduleMeetupResponse)(nil),               // 20: ordermanagerpb.ScheduleMeetupResponse
	(*FinishOrderRequest)(nil),                   // 21: ordermanagerpb.FinishOrderRequest
	(*FinishOrderResponse)(nil),                  // 22: ordermanagerpb.FinishOrderResponse
	(*FulfillmentOrder)(nil),                     // 23: ordermanagerpb.FulfillmentOrder
	(*Order)(nil),                                // 24: ordermanagerpb.Order
	(*CancelInfo)(nil),                           // 25: ordermanagerpb.CancelInfo
	(*DeliveryInfo)(nil),                         // 26: ordermanagerpb.DeliveryInfo
	(*DisputeInfo)(nil),                          // 27: ordermanagerpb.DisputeInfo
	(*DeliveryOption)(nil),                       // 28: ordermanagerpb.DeliveryOption
	(*FeeInfo)(nil),                              // 29: ordermanagerpb.FeeInfo
	(*FeeComponent)(nil),                         // 30: ordermanagerpb.FeeComponent
	(*GST)(nil),                                  // 31: ordermanagerpb.GST
	(*DisplayMeta)(nil),                          // 32: ordermanagerpb.DisplayMeta
	(*Promotion)(nil),                            // 33: ordermanagerpb.Promotion
	(*NotifyDisputeRequestCreatedRequest)(nil),   // 34: ordermanagerpb.NotifyDisputeRequestCreatedRequest
	(*NotifyDisputeRequestCreatedResponse)(nil),  // 35: ordermanagerpb.NotifyDisputeRequestCreatedResponse
	(*NotifyDisputeRequestClosedRequest)(nil),    // 36: ordermanagerpb.NotifyDisputeRequestClosedRequest
	(*NotifyDisputeRequestClosedResponse)(nil),   // 37: ordermanagerpb.NotifyDisputeRequestClosedResponse
	(*DisputeLineItemMapping)(nil),               // 38: ordermanagerpb.DisputeLineItemMapping
	(*FulfillmentOrderLineItmeUpdatedEvent)(nil), // 39: ordermanagerpb.FulfillmentOrderLineItmeUpdatedEvent
	(*StartD2DDeliveryRequest)(nil),              // 40: ordermanagerpb.StartD2DDeliveryRequest
	(*StartD2DDeliveryResponse)(nil),             // 41: ordermanagerpb.StartD2DDeliveryResponse
	(*Address)(nil),                              // 42: ordermanagerpb.Address
	(*GetOrdersRequest_Query)(nil),               // 43: ordermanagerpb.GetOrdersRequest.Query
	(*timestamppb.Timestamp)(nil),                // 44: google.protobuf.Timestamp
	(*DeliveryProperty)(nil),                     // 45: ordermanagerpb.DeliveryProperty
	(*wrapperspb.BoolValue)(nil),                 // 46: google.protobuf.BoolValue
	(*messaging_proto.MessageRequest)(nil),       // 47: messaging_proto.MessageRequest
	(*messaging_proto.MessageResponse)(nil),      // 48: messaging_proto.MessageResponse
}
var file_OrderManager_OrderManager_proto_depIdxs = []int32{
	43, // 0: ordermanagerpb.GetOrdersRequest.query:type_name -> ordermanagerpb.GetOrdersRequest.Query
	10, // 1: ordermanagerpb.GetOrdersRequest.pagination:type_name -> ordermanagerpb.PaginationRequest
	23, // 2: ordermanagerpb.GetOrdersResponse.orders:type_name -> ordermanagerpb.FulfillmentOrder
	9,  // 3: ordermanagerpb.GetOrdersResponse.pagination:type_name -> ordermanagerpb.Pagination
	2,  // 4: ordermanagerpb.LineItem.item_type:type_name -> ordermanagerpb.ItemType
	3,  // 5: ordermanagerpb.LineItem.state:type_name -> ordermanagerpb.LineItemState
	29, // 6: ordermanagerpb.LineItem.seller_fees:type_name -> ordermanagerpb.FeeInfo
	29, // 7: ordermanagerpb.LineItem.buyer_fees:type_name -> ordermanagerpb.FeeInfo
	14, // 8: ordermanagerpb.LineItem.listing_snapshot:type_name -> ordermanagerpb.ListingSnapshot
	28, // 9: ordermanagerpb.CreateOrderRequest.delivery_option:type_name -> ordermanagerpb.DeliveryOption
	13, // 10: ordermanagerpb.CreateOrderRequest.line_items:type_name -> ordermanagerpb.LineItem
	29, // 11: ordermanagerpb.CreateOrderRequest.seller_fees:type_name -> ordermanagerpb.FeeInfo
	29, // 12: ordermanagerpb.CreateOrderRequest.buyer_fees:type_name -> ordermanagerpb.FeeInfo
	33, // 13: ordermanagerpb.CreateOrderRequest.promotions:type_name -> ordermanagerpb.Promotion
	23, // 14: ordermanagerpb.CreateOrderResponse.order:type_name -> ordermanagerpb.FulfillmentOrder
	1,  // 15: ordermanagerpb.CancelOrderRequest.reason:type_name -> ordermanagerpb.CancelledReason
	4,  // 16: ordermanagerpb.FulfillmentOrder.state:type_name -> ordermanagerpb.FulfillmentOrderState
	44, // 17: ordermanagerpb.FulfillmentOrder.created_at:type_name -> google.protobuf.Timestamp
	44, // 18: ordermanagerpb.FulfillmentOrder.updated_at:type_name -> google.protobuf.Timestamp
	25, // 19: ordermanagerpb.FulfillmentOrder.cancel_info:type_name -> ordermanagerpb.CancelInfo
	28, // 20: ordermanagerpb.FulfillmentOrder.delivery_option:type_name -> ordermanagerpb.DeliveryOption
	26, // 21: ordermanagerpb.FulfillmentOrder.delivery_infos:type_name -> ordermanagerpb.DeliveryInfo
	27, // 22: ordermanagerpb.FulfillmentOrder.dispute_infos:type_name -> ordermanagerpb.DisputeInfo
	13, // 23: ordermanagerpb.FulfillmentOrder.line_items:type_name -> ordermanagerpb.LineItem
	29, // 24: ordermanagerpb.FulfillmentOrder.seller_fees:type_name -> ordermanagerpb.FeeInfo
	29, // 25: ordermanagerpb.FulfillmentOrder.buyer_fees:type_name -> ordermanagerpb.FeeInfo
	33, // 26: ordermanagerpb.FulfillmentOrder.promotions:type_name -> ordermanagerpb.Promotion
	44, // 27: ordermanagerpb.FulfillmentOrder.auto_canceled_at:type_name -> google.protobuf.Timestamp
	44, // 28: ordermanagerpb.FulfillmentOrder.auto_finished_at:type_name -> google.protobuf.Timestamp
	0,  // 29: ordermanagerpb.Order.type:type_name -> ordermanagerpb.OrderType
	1,  // 30: ordermanagerpb.Order.cancelled_reason:type_name -> ordermanagerpb.CancelledReason
	44, // 31: ordermanagerpb.Order.created_at:type_name -> google.protobuf.Timestamp
	44, // 32: ordermanagerpb.Order.auto_finished_at:type_name -> google.protobuf.Timestamp
	13, // 33: ordermanagerpb.Order.line_items:type_name -> ordermanagerpb.LineItem
	5,  // 34: ordermanagerpb.CancelInfo.role:type_name -> ordermanagerpb.RoleType
	1,  // 35: ordermanagerpb.CancelInfo.reason:type_name -> ordermanagerpb.CancelledReason
	44, // 36: ordermanagerpb.CancelInfo.created_at:type_name -> google.protobuf.Timestamp
	45, // 37: ordermanagerpb.DeliveryOption.properties:type_name -> ordermanagerpb.DeliveryProperty
	6,  // 38: ordermanagerpb.FeeInfo.fee_name:type_name -> ordermanagerpb.FeeNameType
	30, // 39: ordermanagerpb.FeeInfo.fee_components:type_name -> ordermanagerpb.FeeComponent
	31, // 40: ordermanagerpb.FeeInfo.gst:type_name -> ordermanagerpb.GST
	32, // 41: ordermanagerpb.FeeInfo.display_meta:type_name -> ordermanagerpb.DisplayMeta
	7,  // 42: ordermanagerpb.FeeComponent.fee_value_type:type_name -> ordermanagerpb.FeeValueType
	38, // 43: ordermanagerpb.NotifyDisputeRequestCreatedRequest.dispute_line_item_mappings:type_name -> ordermanagerpb.DisputeLineItemMapping
	38, // 44: ordermanagerpb.NotifyDisputeRequestClosedRequest.dispute_line_item_mappings:type_name -> ordermanagerpb.DisputeLineItemMapping
	8,  // 45: ordermanagerpb.DisputeLineItemMapping.dispute_state:type_name -> ordermanagerpb.DisputeState
	3,  // 46: ordermanagerpb.FulfillmentOrderLineItmeUpdatedEvent.line_item_state:type_name -> ordermanagerpb.LineItemState
	44, // 47: ordermanagerpb.FulfillmentOrderLineItmeUpdatedEvent.updated_at:type_name -> google.protobuf.Timestamp
	42, // 48: ordermanagerpb.StartD2DDeliveryRequest.address:type_name -> ordermanagerpb.Address
	4,  // 49: ordermanagerpb.GetOrdersRequest.Query.by_states:type_name -> ordermanagerpb.FulfillmentOrderState
	46, // 50: ordermanagerpb.GetOrdersRequest.Query.has_dispute:type_name -> google.protobuf.BoolValue
	44, // 51: ordermanagerpb.GetOrdersRequest.Query.started_at:type_name -> google.protobuf.Timestamp
	44, // 52: ordermanagerpb.GetOrdersRequest.Query.ended_at:type_name -> google.protobuf.Timestamp
	5,  // 53: ordermanagerpb.GetOrdersRequest.Query.role_types:type_name -> ordermanagerpb.RoleType
	11, // 54: ordermanagerpb.OrderManager.GetOrders:input_type -> ordermanagerpb.GetOrdersRequest
	15, // 55: ordermanagerpb.OrderManager.CreateOrder:input_type -> ordermanagerpb.CreateOrderRequest
	17, // 56: ordermanagerpb.OrderManager.CancelOrder:input_type -> ordermanagerpb.CancelOrderRequest
	19, // 57: ordermanagerpb.OrderManager.ScheduleMeetup:input_type -> ordermanagerpb.ScheduleMeetupRequest
	21, // 58: ordermanagerpb.OrderManager.FinishOrder:input_type -> ordermanagerpb.FinishOrderRequest
	47, // 59: ordermanagerpb.OrderManager.ReceiveMessage:input_type -> messaging_proto.MessageRequest
	34, // 60: ordermanagerpb.OrderManager.NotifyDisputeRequestCreated:input_type -> ordermanagerpb.NotifyDisputeRequestCreatedRequest
	36, // 61: ordermanagerpb.OrderManager.NotifyDisputeRequestClosed:input_type -> ordermanagerpb.NotifyDisputeRequestClosedRequest
	40, // 62: ordermanagerpb.OrderManager.StartD2DDelivery:input_type -> ordermanagerpb.StartD2DDeliveryRequest
	12, // 63: ordermanagerpb.OrderManager.GetOrders:output_type -> ordermanagerpb.GetOrdersResponse
	16, // 64: ordermanagerpb.OrderManager.CreateOrder:output_type -> ordermanagerpb.CreateOrderResponse
	18, // 65: ordermanagerpb.OrderManager.CancelOrder:output_type -> ordermanagerpb.CancelOrderResponse
	20, // 66: ordermanagerpb.OrderManager.ScheduleMeetup:output_type -> ordermanagerpb.ScheduleMeetupResponse
	22, // 67: ordermanagerpb.OrderManager.FinishOrder:output_type -> ordermanagerpb.FinishOrderResponse
	48, // 68: ordermanagerpb.OrderManager.ReceiveMessage:output_type -> messaging_proto.MessageResponse
	35, // 69: ordermanagerpb.OrderManager.NotifyDisputeRequestCreated:output_type -> ordermanagerpb.NotifyDisputeRequestCreatedResponse
	37, // 70: ordermanagerpb.OrderManager.NotifyDisputeRequestClosed:output_type -> ordermanagerpb.NotifyDisputeRequestClosedResponse
	41, // 71: ordermanagerpb.OrderManager.StartD2DDelivery:output_type -> ordermanagerpb.StartD2DDeliveryResponse
	63, // [63:72] is the sub-list for method output_type
	54, // [54:63] is the sub-list for method input_type
	54, // [54:54] is the sub-list for extension type_name
	54, // [54:54] is the sub-list for extension extendee
	0,  // [0:54] is the sub-list for field type_name
}

func init() { file_OrderManager_OrderManager_proto_init() }
func file_OrderManager_OrderManager_proto_init() {
	if File_OrderManager_OrderManager_proto != nil {
		return
	}
	file_OrderManager_properties_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_OrderManager_OrderManager_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Pagination); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_OrderManager_OrderManager_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PaginationRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_OrderManager_OrderManager_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetOrdersRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_OrderManager_OrderManager_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetOrdersResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_OrderManager_OrderManager_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LineItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_OrderManager_OrderManager_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListingSnapshot); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_OrderManager_OrderManager_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateOrderRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_OrderManager_OrderManager_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateOrderResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_OrderManager_OrderManager_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CancelOrderRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_OrderManager_OrderManager_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CancelOrderResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_OrderManager_OrderManager_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ScheduleMeetupRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_OrderManager_OrderManager_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ScheduleMeetupResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_OrderManager_OrderManager_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FinishOrderRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_OrderManager_OrderManager_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FinishOrderResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_OrderManager_OrderManager_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FulfillmentOrder); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_OrderManager_OrderManager_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Order); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_OrderManager_OrderManager_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CancelInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_OrderManager_OrderManager_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeliveryInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_OrderManager_OrderManager_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DisputeInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_OrderManager_OrderManager_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeliveryOption); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_OrderManager_OrderManager_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FeeInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_OrderManager_OrderManager_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FeeComponent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_OrderManager_OrderManager_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GST); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_OrderManager_OrderManager_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DisplayMeta); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_OrderManager_OrderManager_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Promotion); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_OrderManager_OrderManager_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NotifyDisputeRequestCreatedRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_OrderManager_OrderManager_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NotifyDisputeRequestCreatedResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_OrderManager_OrderManager_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NotifyDisputeRequestClosedRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_OrderManager_OrderManager_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NotifyDisputeRequestClosedResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_OrderManager_OrderManager_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DisputeLineItemMapping); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_OrderManager_OrderManager_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FulfillmentOrderLineItmeUpdatedEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_OrderManager_OrderManager_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StartD2DDeliveryRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_OrderManager_OrderManager_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StartD2DDeliveryResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_OrderManager_OrderManager_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Address); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_OrderManager_OrderManager_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetOrdersRequest_Query); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_OrderManager_OrderManager_proto_rawDesc,
			NumEnums:      9,
			NumMessages:   35,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_OrderManager_OrderManager_proto_goTypes,
		DependencyIndexes: file_OrderManager_OrderManager_proto_depIdxs,
		EnumInfos:         file_OrderManager_OrderManager_proto_enumTypes,
		MessageInfos:      file_OrderManager_OrderManager_proto_msgTypes,
	}.Build()
	File_OrderManager_OrderManager_proto = out.File
	file_OrderManager_OrderManager_proto_rawDesc = nil
	file_OrderManager_OrderManager_proto_goTypes = nil
	file_OrderManager_OrderManager_proto_depIdxs = nil
}
